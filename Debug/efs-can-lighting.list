
efs-can-lighting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c84  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001e10  08001e10  00002e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e50  08001e50  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e50  08001e50  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e50  08001e50  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e50  08001e50  00002e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e54  08001e54  00002e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e58  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001e64  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001e64  00003078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092ef  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166d  00000000  00000000  0000c32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0000d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084a  00000000  00000000  0000e458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed28  00000000  00000000  0000eca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b51f  00000000  00000000  0002d9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b56  00000000  00000000  00038ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fda3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c9c  00000000  00000000  000fda84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00100720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001df8 	.word	0x08001df8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001df8 	.word	0x08001df8

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 f9e0 	bl	8000596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f82d 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8d1 	bl	8000380 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001de:	f000 f87b 	bl	80002d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t hex_color = 0x000339FC;
 80001e2:	4b12      	ldr	r3, [pc, #72]	@ (800022c <main+0x60>)
 80001e4:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f0:	f000 fcca 	bl	8000b88 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2101      	movs	r1, #1
 80001f8:	480d      	ldr	r0, [pc, #52]	@ (8000230 <main+0x64>)
 80001fa:	f000 fcc5 	bl	8000b88 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 80001fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000202:	f000 fa3d 	bl	8000680 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800020c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000210:	f000 fcba 	bl	8000b88 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	2101      	movs	r1, #1
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f000 fcb4 	bl	8000b88 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000224:	f000 fa2c 	bl	8000680 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000228:	bf00      	nop
 800022a:	e7dc      	b.n	80001e6 <main+0x1a>
 800022c:	000339fc 	.word	0x000339fc
 8000230:	48000400 	.word	0x48000400

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b096      	sub	sp, #88	@ 0x58
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	2244      	movs	r2, #68	@ 0x44
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fdac 	bl	8001da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	463b      	mov	r3, r7
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000256:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800025a:	f000 fcbb 	bl	8000bd4 <HAL_PWREx_ControlVoltageScaling>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000264:	f000 f8e2 	bl	800042c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000270:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800027e:	2301      	movs	r3, #1
 8000280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000282:	230c      	movs	r3, #12
 8000284:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000286:	2307      	movs	r3, #7
 8000288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800028a:	2302      	movs	r3, #2
 800028c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800028e:	2304      	movs	r3, #4
 8000290:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fcf2 	bl	8000c80 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002a2:	f000 f8c3 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2303      	movs	r3, #3
 80002ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	463b      	mov	r3, r7
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f8f2 	bl	80014a8 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ca:	f000 f8af 	bl	800042c <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3758      	adds	r7, #88	@ 0x58
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002f6:	4b20      	ldr	r3, [pc, #128]	@ (8000378 <MX_TIM1_Init+0xa0>)
 80002f8:	4a20      	ldr	r2, [pc, #128]	@ (800037c <MX_TIM1_Init+0xa4>)
 80002fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3600;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_TIM1_Init+0xa0>)
 80002fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60;
 800030a:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_TIM1_Init+0xa0>)
 800030c:	223c      	movs	r2, #60	@ 0x3c
 800030e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000310:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000316:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031c:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <MX_TIM1_Init+0xa0>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000322:	4815      	ldr	r0, [pc, #84]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000324:	f001 faac 	bl	8001880 <HAL_TIM_Base_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800032e:	f000 f87d 	bl	800042c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	480e      	ldr	r0, [pc, #56]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000340:	f001 faf5 	bl	800192e <HAL_TIM_ConfigClockSource>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800034a:	f000 f86f 	bl	800042c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000360:	f001 fcb8 	bl	8001cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800036a:	f000 f85f 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028
 800037c:	40012c00 	.word	0x40012c00

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b23      	ldr	r3, [pc, #140]	@ (8000424 <MX_GPIO_Init+0xa4>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	4a22      	ldr	r2, [pc, #136]	@ (8000424 <MX_GPIO_Init+0xa4>)
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a2:	4b20      	ldr	r3, [pc, #128]	@ (8000424 <MX_GPIO_Init+0xa4>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <MX_GPIO_Init+0xa4>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000424 <MX_GPIO_Init+0xa4>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000424 <MX_GPIO_Init+0xa4>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2101      	movs	r1, #1
 80003ca:	4817      	ldr	r0, [pc, #92]	@ (8000428 <MX_GPIO_Init+0xa8>)
 80003cc:	f000 fbdc 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003da:	f000 fbd5 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003de:	2301      	movs	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	4619      	mov	r1, r3
 80003f4:	480c      	ldr	r0, [pc, #48]	@ (8000428 <MX_GPIO_Init+0xa8>)
 80003f6:	f000 fa4d 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f107 030c 	add.w	r3, r7, #12
 8000410:	4619      	mov	r1, r3
 8000412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000416:	f000 fa3d 	bl	8000894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041a:	bf00      	nop
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	48000400 	.word	0x48000400

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <Error_Handler+0x8>

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <HAL_MspInit+0x44>)
 8000440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000442:	4a0e      	ldr	r2, [pc, #56]	@ (800047c <HAL_MspInit+0x44>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6613      	str	r3, [r2, #96]	@ 0x60
 800044a:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b09      	ldr	r3, [pc, #36]	@ (800047c <HAL_MspInit+0x44>)
 8000458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800045a:	4a08      	ldr	r2, [pc, #32]	@ (800047c <HAL_MspInit+0x44>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000460:	6593      	str	r3, [r2, #88]	@ 0x58
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0a      	ldr	r2, [pc, #40]	@ (80004b8 <HAL_TIM_Base_MspInit+0x38>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d10b      	bne.n	80004aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <HAL_TIM_Base_MspInit+0x3c>)
 8000494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000496:	4a09      	ldr	r2, [pc, #36]	@ (80004bc <HAL_TIM_Base_MspInit+0x3c>)
 8000498:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800049c:	6613      	str	r3, [r2, #96]	@ 0x60
 800049e:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <HAL_TIM_Base_MspInit+0x3c>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40012c00 	.word	0x40012c00
 80004bc:	40021000 	.word	0x40021000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <NMI_Handler+0x4>

080004c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000516:	f000 f893 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <SystemInit+0x20>)
 8000526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <SystemInit+0x20>)
 800052c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800057c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000548:	f7ff ffea 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	@ (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	@ (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000572:	f001 fc1d 	bl	8001db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000576:	f7ff fe29 	bl	80001cc <main>

0800057a <LoopForever>:

LoopForever:
    b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000588:	08001e58 	.word	0x08001e58
  ldr r2, =_sbss
 800058c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000590:	20000078 	.word	0x20000078

08000594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC1_IRQHandler>

08000596 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800059c:	2300      	movs	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f943 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a6:	200f      	movs	r0, #15
 80005a8:	f000 f80e 	bl	80005c8 <HAL_InitTick>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	e001      	b.n	80005bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b8:	f7ff ff3e 	bl	8000438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005bc:	79fb      	ldrb	r3, [r7, #7]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <HAL_InitTick+0x6c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d023      	beq.n	8000624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005dc:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <HAL_InitTick+0x70>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <HAL_InitTick+0x6c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f941 	bl	800087a <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10f      	bne.n	800061e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d809      	bhi.n	8000618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f919 	bl	8000842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <HAL_InitTick+0x74>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	e007      	b.n	8000628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000618:	2301      	movs	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e004      	b.n	8000628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e001      	b.n	8000628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000008 	.word	0x20000008
 8000638:	20000000 	.word	0x20000000
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_IncTick+0x20>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <HAL_IncTick+0x24>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000008 	.word	0x20000008
 8000664:	20000074 	.word	0x20000074

08000668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b03      	ldr	r3, [pc, #12]	@ (800067c <HAL_GetTick+0x14>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000074 	.word	0x20000074

08000680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d005      	beq.n	80006a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_Delay+0x44>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a6:	bf00      	nop
 80006a8:	f7ff ffde 	bl	8000668 <HAL_GetTick>
 80006ac:	4602      	mov	r2, r0
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d8f7      	bhi.n	80006a8 <HAL_Delay+0x28>
  {
  }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000008 	.word	0x20000008

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	@ (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	@ (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	@ 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	@ 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007f8:	d301      	bcc.n	80007fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00f      	b.n	800081e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <SysTick_Config+0x40>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000806:	210f      	movs	r1, #15
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f7ff ff8e 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <SysTick_Config+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000816:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <SysTick_Config+0x40>)
 8000818:	2207      	movs	r2, #7
 800081a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff47 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000854:	f7ff ff5c 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff8e 	bl	8000780 <NVIC_EncodePriority>
 8000864:	4602      	mov	r2, r0
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff5d 	bl	800072c <__NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffb0 	bl	80007e8 <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a2:	e154      	b.n	8000b4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 8146 	beq.w	8000b48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 0303 	and.w	r3, r3, #3
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d005      	beq.n	80008d4 <HAL_GPIO_Init+0x40>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d130      	bne.n	8000936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800090a:	2201      	movs	r2, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	091b      	lsrs	r3, r3, #4
 8000920:	f003 0201 	and.w	r2, r3, #1
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	2b03      	cmp	r3, #3
 8000940:	d017      	beq.n	8000972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b02      	cmp	r3, #2
 800097c:	d123      	bne.n	80009c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	08da      	lsrs	r2, r3, #3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3208      	adds	r2, #8
 8000986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	691a      	ldr	r2, [r3, #16]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	6939      	ldr	r1, [r7, #16]
 80009c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0203 	and.w	r2, r3, #3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 80a0 	beq.w	8000b48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	4b58      	ldr	r3, [pc, #352]	@ (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0c:	4a57      	ldr	r2, [pc, #348]	@ (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a14:	4b55      	ldr	r3, [pc, #340]	@ (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a20:	4a53      	ldr	r2, [pc, #332]	@ (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a4a:	d019      	beq.n	8000a80 <HAL_GPIO_Init+0x1ec>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a49      	ldr	r2, [pc, #292]	@ (8000b74 <HAL_GPIO_Init+0x2e0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d013      	beq.n	8000a7c <HAL_GPIO_Init+0x1e8>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a48      	ldr	r2, [pc, #288]	@ (8000b78 <HAL_GPIO_Init+0x2e4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d00d      	beq.n	8000a78 <HAL_GPIO_Init+0x1e4>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a47      	ldr	r2, [pc, #284]	@ (8000b7c <HAL_GPIO_Init+0x2e8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d007      	beq.n	8000a74 <HAL_GPIO_Init+0x1e0>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a46      	ldr	r2, [pc, #280]	@ (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d101      	bne.n	8000a70 <HAL_GPIO_Init+0x1dc>
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	e008      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a70:	2307      	movs	r3, #7
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a74:	2303      	movs	r3, #3
 8000a76:	e004      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a78:	2302      	movs	r3, #2
 8000a7a:	e002      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a80:	2300      	movs	r3, #0
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	f002 0203 	and.w	r2, r2, #3
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a92:	4937      	ldr	r1, [pc, #220]	@ (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aee:	4a25      	ldr	r2, [pc, #148]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000af4:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b18:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b42:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	fa22 f303 	lsr.w	r3, r2, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f47f aea3 	bne.w	80008a4 <HAL_GPIO_Init+0x10>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	48000c00 	.word	0x48000c00
 8000b80:	48001000 	.word	0x48001000
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000be2:	d130      	bne.n	8000c46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bf0:	d038      	beq.n	8000c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf2:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2232      	movs	r2, #50	@ 0x32
 8000c08:	fb02 f303 	mul.w	r3, r2, r3
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c12:	0c9b      	lsrs	r3, r3, #18
 8000c14:	3301      	adds	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c18:	e002      	b.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c2c:	d102      	bne.n	8000c34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f2      	bne.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c34:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c40:	d110      	bne.n	8000c64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e00f      	b.n	8000c66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c52:	d007      	beq.n	8000c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c5c:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40007000 	.word	0x40007000
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	431bde83 	.word	0x431bde83

08000c80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f000 bc02 	b.w	8001498 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c94:	4b96      	ldr	r3, [pc, #600]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c9e:	4b94      	ldr	r3, [pc, #592]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80e4 	beq.w	8000e7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d007      	beq.n	8000ccc <HAL_RCC_OscConfig+0x4c>
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b0c      	cmp	r3, #12
 8000cc0:	f040 808b 	bne.w	8000dda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	f040 8087 	bne.w	8000dda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ccc:	4b88      	ldr	r3, [pc, #544]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x64>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e3d9      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a1a      	ldr	r2, [r3, #32]
 8000ce8:	4b81      	ldr	r3, [pc, #516]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <HAL_RCC_OscConfig+0x7e>
 8000cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cfc:	e005      	b.n	8000d0a <HAL_RCC_OscConfig+0x8a>
 8000cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d223      	bcs.n	8000d56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fd54 	bl	80017c0 <RCC_SetFlashLatencyFromMSIRange>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e3ba      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d22:	4b73      	ldr	r3, [pc, #460]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a72      	ldr	r2, [pc, #456]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b70      	ldr	r3, [pc, #448]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	496d      	ldr	r1, [pc, #436]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d40:	4b6b      	ldr	r3, [pc, #428]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4968      	ldr	r1, [pc, #416]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e025      	b.n	8000da2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d56:	4b66      	ldr	r3, [pc, #408]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a65      	ldr	r2, [pc, #404]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b63      	ldr	r3, [pc, #396]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4960      	ldr	r1, [pc, #384]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d74:	4b5e      	ldr	r3, [pc, #376]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	495b      	ldr	r1, [pc, #364]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d109      	bne.n	8000da2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fd14 	bl	80017c0 <RCC_SetFlashLatencyFromMSIRange>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e37a      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000da2:	f000 fc81 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8000da6:	4602      	mov	r2, r0
 8000da8:	4b51      	ldr	r3, [pc, #324]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4950      	ldr	r1, [pc, #320]	@ (8000ef4 <HAL_RCC_OscConfig+0x274>)
 8000db4:	5ccb      	ldrb	r3, [r1, r3]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000dc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000efc <HAL_RCC_OscConfig+0x27c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fbfe 	bl	80005c8 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d052      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	e35e      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d032      	beq.n	8000e48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000de2:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a42      	ldr	r2, [pc, #264]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fc3b 	bl	8000668 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df6:	f7ff fc37 	bl	8000668 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e347      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e08:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e14:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a35      	ldr	r2, [pc, #212]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	4930      	ldr	r1, [pc, #192]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	492b      	ldr	r1, [pc, #172]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	604b      	str	r3, [r1, #4]
 8000e46:	e01a      	b.n	8000e7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e48:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a28      	ldr	r2, [pc, #160]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc08 	bl	8000668 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fc04 	bl	8000668 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e314      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x1dc>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d073      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d005      	beq.n	8000e9c <HAL_RCC_OscConfig+0x21c>
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b0c      	cmp	r3, #12
 8000e94:	d10e      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d063      	beq.n	8000f70 <HAL_RCC_OscConfig+0x2f0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d15f      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e2f1      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ebc:	d106      	bne.n	8000ecc <HAL_RCC_OscConfig+0x24c>
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e025      	b.n	8000f18 <HAL_RCC_OscConfig+0x298>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ed4:	d114      	bne.n	8000f00 <HAL_RCC_OscConfig+0x280>
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a02      	ldr	r2, [pc, #8]	@ (8000ef0 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e013      	b.n	8000f18 <HAL_RCC_OscConfig+0x298>
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	08001e10 	.word	0x08001e10
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004
 8000f00:	4ba0      	ldr	r3, [pc, #640]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a9f      	ldr	r2, [pc, #636]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b9d      	ldr	r3, [pc, #628]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a9c      	ldr	r2, [pc, #624]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f20:	f7ff fba2 	bl	8000668 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fb9e 	bl	8000668 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	@ 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e2ae      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3a:	4b92      	ldr	r3, [pc, #584]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2a8>
 8000f46:	e014      	b.n	8000f72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fb8e 	bl	8000668 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fb8a 	bl	8000668 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	@ 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e29a      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f62:	4b88      	ldr	r3, [pc, #544]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2d0>
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d060      	beq.n	8001040 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_OscConfig+0x310>
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	2b0c      	cmp	r3, #12
 8000f88:	d119      	bne.n	8000fbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d116      	bne.n	8000fbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f90:	4b7c      	ldr	r3, [pc, #496]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x328>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e277      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b76      	ldr	r3, [pc, #472]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	4973      	ldr	r1, [pc, #460]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fbc:	e040      	b.n	8001040 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d023      	beq.n	800100e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a6e      	ldr	r2, [pc, #440]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb49 	bl	8000668 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fb45 	bl	8000668 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e255      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fec:	4b65      	ldr	r3, [pc, #404]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff8:	4b62      	ldr	r3, [pc, #392]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	061b      	lsls	r3, r3, #24
 8001006:	495f      	ldr	r1, [pc, #380]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001008:	4313      	orrs	r3, r2
 800100a:	604b      	str	r3, [r1, #4]
 800100c:	e018      	b.n	8001040 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100e:	4b5d      	ldr	r3, [pc, #372]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a5c      	ldr	r2, [pc, #368]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101a:	f7ff fb25 	bl	8000668 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff fb21 	bl	8000668 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e231      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001034:	4b53      	ldr	r3, [pc, #332]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f0      	bne.n	8001022 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	2b00      	cmp	r3, #0
 800104a:	d03c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01c      	beq.n	800108e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001054:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105a:	4a4a      	ldr	r2, [pc, #296]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001064:	f7ff fb00 	bl	8000668 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fafc 	bl	8000668 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e20c      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800107e:	4b41      	ldr	r3, [pc, #260]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0ef      	beq.n	800106c <HAL_RCC_OscConfig+0x3ec>
 800108c:	e01b      	b.n	80010c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001094:	4a3b      	ldr	r2, [pc, #236]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff fae3 	bl	8000668 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a6:	f7ff fadf 	bl	8000668 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e1ef      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b8:	4b32      	ldr	r3, [pc, #200]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ef      	bne.n	80010a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80a6 	beq.w	8001220 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10d      	bne.n	8001100 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	4a26      	ldr	r2, [pc, #152]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fc:	2301      	movs	r3, #1
 80010fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <HAL_RCC_OscConfig+0x508>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d118      	bne.n	800113e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800110c:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <HAL_RCC_OscConfig+0x508>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <HAL_RCC_OscConfig+0x508>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001118:	f7ff faa6 	bl	8000668 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001120:	f7ff faa2 	bl	8000668 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1b2      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_RCC_OscConfig+0x508>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d108      	bne.n	8001158 <HAL_RCC_OscConfig+0x4d8>
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001156:	e029      	b.n	80011ac <HAL_RCC_OscConfig+0x52c>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b05      	cmp	r3, #5
 800115e:	d115      	bne.n	800118c <HAL_RCC_OscConfig+0x50c>
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001166:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001176:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_RCC_OscConfig+0x504>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001180:	e014      	b.n	80011ac <HAL_RCC_OscConfig+0x52c>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	40007000 	.word	0x40007000
 800118c:	4b9a      	ldr	r3, [pc, #616]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 800118e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001192:	4a99      	ldr	r2, [pc, #612]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800119c:	4b96      	ldr	r3, [pc, #600]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a2:	4a95      	ldr	r2, [pc, #596]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d016      	beq.n	80011e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b4:	f7ff fa58 	bl	8000668 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011bc:	f7ff fa54 	bl	8000668 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e162      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d2:	4b89      	ldr	r3, [pc, #548]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80011d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ed      	beq.n	80011bc <HAL_RCC_OscConfig+0x53c>
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e2:	f7ff fa41 	bl	8000668 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff fa3d 	bl	8000668 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e14b      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001200:	4b7d      	ldr	r3, [pc, #500]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1ed      	bne.n	80011ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001214:	4b78      	ldr	r3, [pc, #480]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001218:	4a77      	ldr	r2, [pc, #476]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 800121a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d03c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01c      	beq.n	800126e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001234:	4b70      	ldr	r3, [pc, #448]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800123a:	4a6f      	ldr	r2, [pc, #444]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff fa10 	bl	8000668 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800124c:	f7ff fa0c 	bl	8000668 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e11c      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800125e:	4b66      	ldr	r3, [pc, #408]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ef      	beq.n	800124c <HAL_RCC_OscConfig+0x5cc>
 800126c:	e01b      	b.n	80012a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800126e:	4b62      	ldr	r3, [pc, #392]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001274:	4a60      	ldr	r2, [pc, #384]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff f9f3 	bl	8000668 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001286:	f7ff f9ef 	bl	8000668 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0ff      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001298:	4b57      	ldr	r3, [pc, #348]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 800129a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ef      	bne.n	8001286 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80f3 	beq.w	8001496 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	f040 80c9 	bne.w	800144c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012ba:	4b4f      	ldr	r3, [pc, #316]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f003 0203 	and.w	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d12c      	bne.n	8001328 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	3b01      	subs	r3, #1
 80012da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012dc:	429a      	cmp	r2, r3
 80012de:	d123      	bne.n	8001328 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d11b      	bne.n	8001328 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d113      	bne.n	8001328 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	3b01      	subs	r3, #1
 800130e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d109      	bne.n	8001328 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	3b01      	subs	r3, #1
 8001322:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001324:	429a      	cmp	r2, r3
 8001326:	d06b      	beq.n	8001400 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d062      	beq.n	80013f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800132e:	4b32      	ldr	r3, [pc, #200]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0ac      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800133e:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2d      	ldr	r2, [pc, #180]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001344:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001348:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800134a:	f7ff f98d 	bl	8000668 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff f989 	bl	8000668 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e099      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001376:	4013      	ands	r3, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001380:	3a01      	subs	r2, #1
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	4311      	orrs	r1, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800138a:	0212      	lsls	r2, r2, #8
 800138c:	4311      	orrs	r1, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001392:	0852      	lsrs	r2, r2, #1
 8001394:	3a01      	subs	r2, #1
 8001396:	0552      	lsls	r2, r2, #21
 8001398:	4311      	orrs	r1, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800139e:	0852      	lsrs	r2, r2, #1
 80013a0:	3a01      	subs	r2, #1
 80013a2:	0652      	lsls	r2, r2, #25
 80013a4:	4311      	orrs	r1, r2
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013aa:	06d2      	lsls	r2, r2, #27
 80013ac:	430a      	orrs	r2, r1
 80013ae:	4912      	ldr	r1, [pc, #72]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80013ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4a0c      	ldr	r2, [pc, #48]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80013c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013cc:	f7ff f94c 	bl	8000668 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff f948 	bl	8000668 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e058      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e6:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <HAL_RCC_OscConfig+0x778>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013f2:	e050      	b.n	8001496 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e04f      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
 80013f8:	40021000 	.word	0x40021000
 80013fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d144      	bne.n	8001496 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a23      	ldr	r2, [pc, #140]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 8001412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001416:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001418:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a20      	ldr	r2, [pc, #128]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001422:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001424:	f7ff f920 	bl	8000668 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff f91c 	bl	8000668 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e02c      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x7ac>
 800144a:	e024      	b.n	8001496 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d01f      	beq.n	8001492 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 8001458:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800145c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff f903 	bl	8000668 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001466:	f7ff f8ff 	bl	8000668 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e00f      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	4905      	ldr	r1, [pc, #20]	@ (80014a0 <HAL_RCC_OscConfig+0x820>)
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_RCC_OscConfig+0x824>)
 800148c:	4013      	ands	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	e001      	b.n	8001496 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	feeefffc 	.word	0xfeeefffc

080014a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0e7      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b75      	ldr	r3, [pc, #468]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d910      	bls.n	80014ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b72      	ldr	r3, [pc, #456]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0207 	bic.w	r2, r3, #7
 80014d2:	4970      	ldr	r1, [pc, #448]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b6e      	ldr	r3, [pc, #440]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0cf      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d010      	beq.n	800151a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b66      	ldr	r3, [pc, #408]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001504:	429a      	cmp	r2, r3
 8001506:	d908      	bls.n	800151a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001508:	4b63      	ldr	r3, [pc, #396]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4960      	ldr	r1, [pc, #384]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d04c      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152e:	4b5a      	ldr	r3, [pc, #360]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d121      	bne.n	800157e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0a6      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001546:	4b54      	ldr	r3, [pc, #336]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d115      	bne.n	800157e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e09a      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800155e:	4b4e      	ldr	r3, [pc, #312]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e08e      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156e:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e086      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b46      	ldr	r3, [pc, #280]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4943      	ldr	r1, [pc, #268]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001590:	f7ff f86a 	bl	8000668 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff f866 	bl	8000668 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e06e      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d010      	beq.n	80015ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	4b31      	ldr	r3, [pc, #196]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015d8:	429a      	cmp	r2, r3
 80015da:	d208      	bcs.n	80015ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	492b      	ldr	r1, [pc, #172]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d210      	bcs.n	800161e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 0207 	bic.w	r2, r3, #7
 8001604:	4923      	ldr	r1, [pc, #140]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160c:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_RCC_ClockConfig+0x1ec>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e036      	b.n	800168c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4918      	ldr	r1, [pc, #96]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4910      	ldr	r1, [pc, #64]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800165c:	f000 f824 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_RCC_ClockConfig+0x1f0>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	490b      	ldr	r1, [pc, #44]	@ (800169c <HAL_RCC_ClockConfig+0x1f4>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
 8001678:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <HAL_RCC_ClockConfig+0x1f8>)
 800167a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_RCC_ClockConfig+0x1fc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ffa1 	bl	80005c8 <HAL_InitTick>
 8001686:	4603      	mov	r3, r0
 8001688:	72fb      	strb	r3, [r7, #11]

  return status;
 800168a:	7afb      	ldrb	r3, [r7, #11]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40022000 	.word	0x40022000
 8001698:	40021000 	.word	0x40021000
 800169c:	08001e10 	.word	0x08001e10
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	@ 0x24
 80016ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c0:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x34>
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d121      	bne.n	800171a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d11e      	bne.n	800171a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016dc:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016e8:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e005      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016f8:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001704:	4a2b      	ldr	r2, [pc, #172]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10d      	bne.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d102      	bne.n	8001726 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001720:	4b25      	ldr	r3, [pc, #148]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	e004      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d101      	bne.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800172c:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x114>)
 800172e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d134      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001736:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d003      	beq.n	800174e <HAL_RCC_GetSysClockFreq+0xa6>
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d003      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0xac>
 800174c:	e005      	b.n	800175a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800174e:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001750:	617b      	str	r3, [r7, #20]
      break;
 8001752:	e005      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x114>)
 8001756:	617b      	str	r3, [r7, #20]
      break;
 8001758:	e002      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	617b      	str	r3, [r7, #20]
      break;
 800175e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	3301      	adds	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	fb03 f202 	mul.w	r2, r3, r2
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	0e5b      	lsrs	r3, r3, #25
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	3301      	adds	r3, #1
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017a0:	69bb      	ldr	r3, [r7, #24]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	@ 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	08001e20 	.word	0x08001e20
 80017b8:	00f42400 	.word	0x00f42400
 80017bc:	007a1200 	.word	0x007a1200

080017c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017d8:	f7ff f9ee 	bl	8000bb8 <HAL_PWREx_GetVoltageRange>
 80017dc:	6178      	str	r0, [r7, #20]
 80017de:	e014      	b.n	800180a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	4a24      	ldr	r2, [pc, #144]	@ (8001878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017f8:	f7ff f9de 	bl	8000bb8 <HAL_PWREx_GetVoltageRange>
 80017fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	4a1d      	ldr	r2, [pc, #116]	@ (8001878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001810:	d10b      	bne.n	800182a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b80      	cmp	r3, #128	@ 0x80
 8001816:	d919      	bls.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2ba0      	cmp	r3, #160	@ 0xa0
 800181c:	d902      	bls.n	8001824 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800181e:	2302      	movs	r3, #2
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	e013      	b.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001824:	2301      	movs	r3, #1
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	e010      	b.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b80      	cmp	r3, #128	@ 0x80
 800182e:	d902      	bls.n	8001836 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001830:	2303      	movs	r3, #3
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e00a      	b.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b80      	cmp	r3, #128	@ 0x80
 800183a:	d102      	bne.n	8001842 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	e004      	b.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b70      	cmp	r3, #112	@ 0x70
 8001846:	d101      	bne.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001848:	2301      	movs	r3, #1
 800184a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 0207 	bic.w	r2, r3, #7
 8001854:	4909      	ldr	r1, [pc, #36]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800185c:	4b07      	ldr	r3, [pc, #28]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	429a      	cmp	r2, r3
 8001868:	d001      	beq.n	800186e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	40022000 	.word	0x40022000

08001880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e049      	b.n	8001926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe fdea 	bl	8000480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f000 f8fe 	bl	8001ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_TIM_ConfigClockSource+0x1c>
 8001946:	2302      	movs	r3, #2
 8001948:	e0b6      	b.n	8001ab8 <HAL_TIM_ConfigClockSource+0x18a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001968:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800196c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001974:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001986:	d03e      	beq.n	8001a06 <HAL_TIM_ConfigClockSource+0xd8>
 8001988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800198c:	f200 8087 	bhi.w	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 8001990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001994:	f000 8086 	beq.w	8001aa4 <HAL_TIM_ConfigClockSource+0x176>
 8001998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800199c:	d87f      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 800199e:	2b70      	cmp	r3, #112	@ 0x70
 80019a0:	d01a      	beq.n	80019d8 <HAL_TIM_ConfigClockSource+0xaa>
 80019a2:	2b70      	cmp	r3, #112	@ 0x70
 80019a4:	d87b      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 80019a6:	2b60      	cmp	r3, #96	@ 0x60
 80019a8:	d050      	beq.n	8001a4c <HAL_TIM_ConfigClockSource+0x11e>
 80019aa:	2b60      	cmp	r3, #96	@ 0x60
 80019ac:	d877      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 80019ae:	2b50      	cmp	r3, #80	@ 0x50
 80019b0:	d03c      	beq.n	8001a2c <HAL_TIM_ConfigClockSource+0xfe>
 80019b2:	2b50      	cmp	r3, #80	@ 0x50
 80019b4:	d873      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 80019b6:	2b40      	cmp	r3, #64	@ 0x40
 80019b8:	d058      	beq.n	8001a6c <HAL_TIM_ConfigClockSource+0x13e>
 80019ba:	2b40      	cmp	r3, #64	@ 0x40
 80019bc:	d86f      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 80019be:	2b30      	cmp	r3, #48	@ 0x30
 80019c0:	d064      	beq.n	8001a8c <HAL_TIM_ConfigClockSource+0x15e>
 80019c2:	2b30      	cmp	r3, #48	@ 0x30
 80019c4:	d86b      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d060      	beq.n	8001a8c <HAL_TIM_ConfigClockSource+0x15e>
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d867      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d05c      	beq.n	8001a8c <HAL_TIM_ConfigClockSource+0x15e>
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d05a      	beq.n	8001a8c <HAL_TIM_ConfigClockSource+0x15e>
 80019d6:	e062      	b.n	8001a9e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019e8:	f000 f954 	bl	8001c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80019fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	609a      	str	r2, [r3, #8]
      break;
 8001a04:	e04f      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a16:	f000 f93d 	bl	8001c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a28:	609a      	str	r2, [r3, #8]
      break;
 8001a2a:	e03c      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f000 f8b1 	bl	8001ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2150      	movs	r1, #80	@ 0x50
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f90a 	bl	8001c5e <TIM_ITRx_SetConfig>
      break;
 8001a4a:	e02c      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f000 f8d0 	bl	8001bfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2160      	movs	r1, #96	@ 0x60
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f8fa 	bl	8001c5e <TIM_ITRx_SetConfig>
      break;
 8001a6a:	e01c      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f000 f891 	bl	8001ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2140      	movs	r1, #64	@ 0x40
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f8ea 	bl	8001c5e <TIM_ITRx_SetConfig>
      break;
 8001a8a:	e00c      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f000 f8e1 	bl	8001c5e <TIM_ITRx_SetConfig>
      break;
 8001a9c:	e003      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa2:	e000      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001aa4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a30      	ldr	r2, [pc, #192]	@ (8001b94 <TIM_Base_SetConfig+0xd4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <TIM_Base_SetConfig+0x20>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ade:	d108      	bne.n	8001af2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a27      	ldr	r2, [pc, #156]	@ (8001b94 <TIM_Base_SetConfig+0xd4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00b      	beq.n	8001b12 <TIM_Base_SetConfig+0x52>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b00:	d007      	beq.n	8001b12 <TIM_Base_SetConfig+0x52>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a24      	ldr	r2, [pc, #144]	@ (8001b98 <TIM_Base_SetConfig+0xd8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d003      	beq.n	8001b12 <TIM_Base_SetConfig+0x52>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <TIM_Base_SetConfig+0xdc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <TIM_Base_SetConfig+0xd4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d007      	beq.n	8001b60 <TIM_Base_SetConfig+0xa0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <TIM_Base_SetConfig+0xd8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d003      	beq.n	8001b60 <TIM_Base_SetConfig+0xa0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <TIM_Base_SetConfig+0xdc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d103      	bne.n	8001b68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f023 0201 	bic.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
  }
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40014000 	.word	0x40014000
 8001b9c:	40014400 	.word	0x40014400

08001ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	f023 0201 	bic.w	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f023 030a 	bic.w	r3, r3, #10
 8001bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	621a      	str	r2, [r3, #32]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b087      	sub	sp, #28
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f023 0210 	bic.w	r2, r3, #16
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	031b      	lsls	r3, r3, #12
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	621a      	str	r2, [r3, #32]
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f043 0307 	orr.w	r3, r3, #7
 8001c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	609a      	str	r2, [r3, #8]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	021a      	lsls	r2, r3, #8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	609a      	str	r2, [r3, #8]
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e04f      	b.n	8001d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d108      	bne.n	8001d28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001d1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d54:	d004      	beq.n	8001d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a10      	ldr	r2, [pc, #64]	@ (8001d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d10c      	bne.n	8001d7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40014000 	.word	0x40014000

08001da0 <memset>:
 8001da0:	4402      	add	r2, r0
 8001da2:	4603      	mov	r3, r0
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d100      	bne.n	8001daa <memset+0xa>
 8001da8:	4770      	bx	lr
 8001daa:	f803 1b01 	strb.w	r1, [r3], #1
 8001dae:	e7f9      	b.n	8001da4 <memset+0x4>

08001db0 <__libc_init_array>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	4d0d      	ldr	r5, [pc, #52]	@ (8001de8 <__libc_init_array+0x38>)
 8001db4:	4c0d      	ldr	r4, [pc, #52]	@ (8001dec <__libc_init_array+0x3c>)
 8001db6:	1b64      	subs	r4, r4, r5
 8001db8:	10a4      	asrs	r4, r4, #2
 8001dba:	2600      	movs	r6, #0
 8001dbc:	42a6      	cmp	r6, r4
 8001dbe:	d109      	bne.n	8001dd4 <__libc_init_array+0x24>
 8001dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8001df0 <__libc_init_array+0x40>)
 8001dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8001df4 <__libc_init_array+0x44>)
 8001dc4:	f000 f818 	bl	8001df8 <_init>
 8001dc8:	1b64      	subs	r4, r4, r5
 8001dca:	10a4      	asrs	r4, r4, #2
 8001dcc:	2600      	movs	r6, #0
 8001dce:	42a6      	cmp	r6, r4
 8001dd0:	d105      	bne.n	8001dde <__libc_init_array+0x2e>
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd8:	4798      	blx	r3
 8001dda:	3601      	adds	r6, #1
 8001ddc:	e7ee      	b.n	8001dbc <__libc_init_array+0xc>
 8001dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de2:	4798      	blx	r3
 8001de4:	3601      	adds	r6, #1
 8001de6:	e7f2      	b.n	8001dce <__libc_init_array+0x1e>
 8001de8:	08001e50 	.word	0x08001e50
 8001dec:	08001e50 	.word	0x08001e50
 8001df0:	08001e50 	.word	0x08001e50
 8001df4:	08001e54 	.word	0x08001e54

08001df8 <_init>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr

08001e04 <_fini>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr
