
efs-can-lighting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000369c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003828  08003828  00004828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003868  08003868  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003868  08003868  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003868  08003868  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00004868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800386c  0800386c  0000486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003870  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  0800387c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800387c  000050e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cecf  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002345  00000000  00000000  00011f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00014250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  00014fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d70  00000000  00000000  00015a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf4  00000000  00000000  00036771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c797b  00000000  00000000  00046465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010dde0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c4  00000000  00000000  0010de24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001114e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003810 	.word	0x08003810

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003810 	.word	0x08003810

080001cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001d0:	4b16      	ldr	r3, [pc, #88]	@ (800022c <MX_CAN1_Init+0x60>)
 80001d2:	4a17      	ldr	r2, [pc, #92]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80001d6:	4b15      	ldr	r3, [pc, #84]	@ (800022c <MX_CAN1_Init+0x60>)
 80001d8:	2210      	movs	r2, #16
 80001da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80001dc:	4b13      	ldr	r3, [pc, #76]	@ (800022c <MX_CAN1_Init+0x60>)
 80001de:	2200      	movs	r2, #0
 80001e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e2:	4b12      	ldr	r3, [pc, #72]	@ (800022c <MX_CAN1_Init+0x60>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80001e8:	4b10      	ldr	r3, [pc, #64]	@ (800022c <MX_CAN1_Init+0x60>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001ee:	4b0f      	ldr	r3, [pc, #60]	@ (800022c <MX_CAN1_Init+0x60>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80001f4:	4b0d      	ldr	r3, [pc, #52]	@ (800022c <MX_CAN1_Init+0x60>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80001fa:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <MX_CAN1_Init+0x60>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000200:	4b0a      	ldr	r3, [pc, #40]	@ (800022c <MX_CAN1_Init+0x60>)
 8000202:	2200      	movs	r2, #0
 8000204:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000206:	4b09      	ldr	r3, [pc, #36]	@ (800022c <MX_CAN1_Init+0x60>)
 8000208:	2200      	movs	r2, #0
 800020a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000212:	4b06      	ldr	r3, [pc, #24]	@ (800022c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000218:	4804      	ldr	r0, [pc, #16]	@ (800022c <MX_CAN1_Init+0x60>)
 800021a:	f000 fc53 	bl	8000ac4 <HAL_CAN_Init>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000224:	f000 f9a5 	bl	8000572 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000028 	.word	0x20000028
 8000230:	40006400 	.word	0x40006400

08000234 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08a      	sub	sp, #40	@ 0x28
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a18      	ldr	r2, [pc, #96]	@ (80002b4 <HAL_CAN_MspInit+0x80>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d129      	bne.n	80002aa <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000256:	4b18      	ldr	r3, [pc, #96]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800025a:	4a17      	ldr	r2, [pc, #92]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 800025c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000260:	6593      	str	r3, [r2, #88]	@ 0x58
 8000262:	4b15      	ldr	r3, [pc, #84]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000272:	4a11      	ldr	r2, [pc, #68]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800027a:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000286:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800028a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800028c:	2302      	movs	r3, #2
 800028e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000298:	2309      	movs	r3, #9
 800029a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4619      	mov	r1, r3
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 f813 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	@ 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40006400 	.word	0x40006400
 80002b8:	40021000 	.word	0x40021000

080002bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002c2:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <MX_DMA_Init+0x38>)
 80002c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002c6:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <MX_DMA_Init+0x38>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80002ce:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <MX_DMA_Init+0x38>)
 80002d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2100      	movs	r1, #0
 80002de:	200d      	movs	r0, #13
 80002e0:	f000 fdc7 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002e4:	200d      	movs	r0, #13
 80002e6:	f000 fde0 	bl	8000eaa <HAL_NVIC_EnableIRQ>

}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000

080002f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_GPIO_Init+0x44>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a0e      	ldr	r2, [pc, #56]	@ (800033c <MX_GPIO_Init+0x44>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_GPIO_Init+0x44>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_GPIO_Init+0x44>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a08      	ldr	r2, [pc, #32]	@ (800033c <MX_GPIO_Init+0x44>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_GPIO_Init+0x44>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0302 	and.w	r3, r3, #2
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]

}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000344:	b08c      	sub	sp, #48	@ 0x30
 8000346:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000348:	f000 fb23 	bl	8000992 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800034c:	f000 f8c2 	bl	80004d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000350:	f7ff ffd2 	bl	80002f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000354:	f7ff ffb2 	bl	80002bc <MX_DMA_Init>
	MX_CAN1_Init();
 8000358:	f7ff ff38 	bl	80001cc <MX_CAN1_Init>
	MX_TIM1_Init();
 800035c:	f000 f99e 	bl	800069c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	uint8_t angle = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	77fb      	strb	r3, [r7, #31]
	const uint8_t angle_difference = 11;
 8000364:	230b      	movs	r3, #11
 8000366:	77bb      	strb	r3, [r7, #30]

	int rotate_lo = 8;
 8000368:	2308      	movs	r3, #8
 800036a:	61bb      	str	r3, [r7, #24]
	int rotate_hi = 16;
 800036c:	2310      	movs	r3, #16
 800036e:	617b      	str	r3, [r7, #20]

	uint8_t num_led = 6; // Number of LED's we have
 8000370:	2306      	movs	r3, #6
 8000372:	74fb      	strb	r3, [r7, #19]
	uint8_t led_in_cycle = 0;	// This is a value that we use to keep track of which LED is on during the cycle.
 8000374:	2300      	movs	r3, #0
 8000376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	num_led += 1; // +1 because we need 24 bits of 0 at the start
 800037a:	7cfb      	ldrb	r3, [r7, #19]
 800037c:	3301      	adds	r3, #1
 800037e:	74fb      	strb	r3, [r7, #19]
	uint8_t buff_base = num_led * 24; // Each LED has 24 Bits (8 for each of RGB)
 8000380:	7cfb      	ldrb	r3, [r7, #19]
 8000382:	461a      	mov	r2, r3
 8000384:	0052      	lsls	r2, r2, #1
 8000386:	4413      	add	r3, r2
 8000388:	00db      	lsls	r3, r3, #3
 800038a:	74bb      	strb	r3, [r7, #18]
	uint8_t out_buf[buff_base + 24]; // We add sixteen to the end so that we have 24 (one LED) bits of 0
 800038c:	7cbb      	ldrb	r3, [r7, #18]
 800038e:	f103 0118 	add.w	r1, r3, #24
 8000392:	1e4b      	subs	r3, r1, #1
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	460a      	mov	r2, r1
 8000398:	2300      	movs	r3, #0
 800039a:	4690      	mov	r8, r2
 800039c:	4699      	mov	r9, r3
 800039e:	f04f 0200 	mov.w	r2, #0
 80003a2:	f04f 0300 	mov.w	r3, #0
 80003a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80003aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80003ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80003b2:	460a      	mov	r2, r1
 80003b4:	2300      	movs	r3, #0
 80003b6:	4614      	mov	r4, r2
 80003b8:	461d      	mov	r5, r3
 80003ba:	f04f 0200 	mov.w	r2, #0
 80003be:	f04f 0300 	mov.w	r3, #0
 80003c2:	00eb      	lsls	r3, r5, #3
 80003c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80003c8:	00e2      	lsls	r2, r4, #3
 80003ca:	460b      	mov	r3, r1
 80003cc:	3307      	adds	r3, #7
 80003ce:	08db      	lsrs	r3, r3, #3
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	ebad 0d03 	sub.w	sp, sp, r3
 80003d6:	466b      	mov	r3, sp
 80003d8:	3300      	adds	r3, #0
 80003da:	60bb      	str	r3, [r7, #8]
	uint8_t setval = PWM_LO;
 80003dc:	2313      	movs	r3, #19
 80003de:	71fb      	strb	r3, [r7, #7]
			rotate_hi = 8;
		}
# endif

#ifdef CYCLE_ONE_LED_ON
		uint8_t led_that_should_be_on = led_in_cycle;
 80003e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80003e4:	71bb      	strb	r3, [r7, #6]

		// This for loop is kinda busted, the nesting can go either way.
		// Right now, it iterates through every individual position of the 24-bit colours
		// Recall j=0 is the dead LED
		// We are only assigning J=1-6, where num_led = 6+1 (dead LED accounted for at the0th index)
		for (int i = 0; i < 24; i++) {
 80003e6:	2300      	movs	r3, #0
 80003e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80003ea:	e043      	b.n	8000474 <main+0x134>
			out_buf[i] = 0;
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003f0:	4413      	add	r3, r2
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
			for (int j = 1; j < num_led; j++) {
 80003f6:	2301      	movs	r3, #1
 80003f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80003fa:	e034      	b.n	8000466 <main+0x126>
				if (j == led_in_cycle) {
 80003fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000402:	429a      	cmp	r2, r3
 8000404:	d121      	bne.n	800044a <main+0x10a>
					// This LED needs to be on
					if ((i % 8) > 5) {
 8000406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000408:	425a      	negs	r2, r3
 800040a:	f003 0307 	and.w	r3, r3, #7
 800040e:	f002 0207 	and.w	r2, r2, #7
 8000412:	bf58      	it	pl
 8000414:	4253      	negpl	r3, r2
 8000416:	2b05      	cmp	r3, #5
 8000418:	dd0b      	ble.n	8000432 <main+0xf2>
						out_buf[i + j * 24] = PWM_HI;
 800041a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800041c:	4613      	mov	r3, r2
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	4413      	add	r3, r2
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	461a      	mov	r2, r3
 8000426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000428:	4413      	add	r3, r2
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	2126      	movs	r1, #38	@ 0x26
 800042e:	54d1      	strb	r1, [r2, r3]
 8000430:	e016      	b.n	8000460 <main+0x120>
					} else {
						out_buf[i + j * 24] = PWM_LO;
 8000432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000434:	4613      	mov	r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	4413      	add	r3, r2
 800043a:	00db      	lsls	r3, r3, #3
 800043c:	461a      	mov	r2, r3
 800043e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000440:	4413      	add	r3, r2
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	2113      	movs	r1, #19
 8000446:	54d1      	strb	r1, [r2, r3]
 8000448:	e00a      	b.n	8000460 <main+0x120>
//				} else if (j == (led_in_cycle + 1)) { // Only use this if you want goofiness
					// Basically forces the next "led" in sequence to be a flat line, instead of a neopixel command
//					out_buf[i+j*24] = 0;
				} else {
					// This LED needs to be off
					out_buf[i + j * 24] = PWM_LO;
 800044a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800044c:	4613      	mov	r3, r2
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	4413      	add	r3, r2
 8000452:	00db      	lsls	r3, r3, #3
 8000454:	461a      	mov	r2, r3
 8000456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000458:	4413      	add	r3, r2
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	2113      	movs	r1, #19
 800045e:	54d1      	strb	r1, [r2, r3]
			for (int j = 1; j < num_led; j++) {
 8000460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000462:	3301      	adds	r3, #1
 8000464:	627b      	str	r3, [r7, #36]	@ 0x24
 8000466:	7cfb      	ldrb	r3, [r7, #19]
 8000468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800046a:	429a      	cmp	r2, r3
 800046c:	dbc6      	blt.n	80003fc <main+0xbc>
		for (int i = 0; i < 24; i++) {
 800046e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000470:	3301      	adds	r3, #1
 8000472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000476:	2b17      	cmp	r3, #23
 8000478:	ddb8      	ble.n	80003ec <main+0xac>
				}
			}
		}

		// Add 1 and wrap around if it's too large
		led_in_cycle += 1;
 800047a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800047e:	3301      	adds	r3, #1
 8000480:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (led_in_cycle > 6) {
 8000484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000488:	2b06      	cmp	r3, #6
 800048a:	d902      	bls.n	8000492 <main+0x152>
			led_in_cycle = 1;
 800048c:	2301      	movs	r3, #1
 800048e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
#endif

		// No matter what operation we do, we set the last bits in the buffer to 0;
		for (int i = buff_base; i < buff_base + 24; i++) { // TODO: Make this 24 a variable "zero_extend_length"
 8000492:	7cbb      	ldrb	r3, [r7, #18]
 8000494:	623b      	str	r3, [r7, #32]
 8000496:	e007      	b.n	80004a8 <main+0x168>
			out_buf[i] = 0;
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	6a3b      	ldr	r3, [r7, #32]
 800049c:	4413      	add	r3, r2
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
		for (int i = buff_base; i < buff_base + 24; i++) { // TODO: Make this 24 a variable "zero_extend_length"
 80004a2:	6a3b      	ldr	r3, [r7, #32]
 80004a4:	3301      	adds	r3, #1
 80004a6:	623b      	str	r3, [r7, #32]
 80004a8:	7cbb      	ldrb	r3, [r7, #18]
 80004aa:	3317      	adds	r3, #23
 80004ac:	6a3a      	ldr	r2, [r7, #32]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	ddf2      	ble.n	8000498 <main+0x158>
		}

//		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
//		HAL_Delay(20);
		HAL_TIMEx_PWMN_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*) out_buf,
 80004b2:	7cbb      	ldrb	r3, [r7, #18]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	3318      	adds	r3, #24
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	2104      	movs	r1, #4
 80004be:	4804      	ldr	r0, [pc, #16]	@ (80004d0 <main+0x190>)
 80004c0:	f002 fe7a 	bl	80031b8 <HAL_TIMEx_PWMN_Start_DMA>
				buff_base + 24);

		HAL_Delay(1000);
 80004c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004c8:	f000 fad8 	bl	8000a7c <HAL_Delay>
	while (1) {
 80004cc:	e788      	b.n	80003e0 <main+0xa0>
 80004ce:	bf00      	nop
 80004d0:	20000050 	.word	0x20000050

080004d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b096      	sub	sp, #88	@ 0x58
 80004d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2244      	movs	r2, #68	@ 0x44
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 f967 	bl	80037b6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004e8:	463b      	mov	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80004f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004fa:	f001 f871 	bl	80015e0 <HAL_PWREx_ControlVoltageScaling>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000504:	f000 f835 	bl	8000572 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000508:	2301      	movs	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800050c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000510:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	2302      	movs	r3, #2
 8000514:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000516:	2303      	movs	r3, #3
 8000518:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 12;
 800051e:	230c      	movs	r3, #12
 8000520:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000522:	2307      	movs	r3, #7
 8000524:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000526:	2302      	movs	r3, #2
 8000528:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4618      	mov	r0, r3
 8000534:	f001 f8aa 	bl	800168c <HAL_RCC_OscConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x6e>
		Error_Handler();
 800053e:	f000 f818 	bl	8000572 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000542:	230f      	movs	r3, #15
 8000544:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000546:	2303      	movs	r3, #3
 8000548:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000556:	463b      	mov	r3, r7
 8000558:	2102      	movs	r1, #2
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fcaa 	bl	8001eb4 <HAL_RCC_ClockConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x96>
		Error_Handler();
 8000566:	f000 f804 	bl	8000572 <Error_Handler>
	}
}
 800056a:	bf00      	nop
 800056c:	3758      	adds	r7, #88	@ 0x58
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000576:	b672      	cpsid	i
}
 8000578:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800057a:	bf00      	nop
 800057c:	e7fd      	b.n	800057a <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <HAL_MspInit+0x44>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800058a:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6613      	str	r3, [r2, #96]	@ 0x60
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <HAL_MspInit+0x44>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005a2:	4a08      	ldr	r2, [pc, #32]	@ (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <NMI_Handler+0x4>

080005d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <MemManage_Handler+0x4>

080005e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <UsageFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061e:	f000 fa0d 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <DMA1_Channel3_IRQHandler+0x10>)
 800062e:	f000 fd6f 	bl	8001110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000009c 	.word	0x2000009c

0800063c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000640:	4802      	ldr	r0, [pc, #8]	@ (800064c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000642:	f001 fedb 	bl	80023fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000050 	.word	0x20000050

08000650 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000656:	f001 fed1 	bl	80023fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000050 	.word	0x20000050

08000664 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <TIM1_TRG_COM_IRQHandler+0x10>)
 800066a:	f001 fec7 	bl	80023fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000050 	.word	0x20000050

08000678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <SystemInit+0x20>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <SystemInit+0x20>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09a      	sub	sp, #104	@ 0x68
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	222c      	movs	r2, #44	@ 0x2c
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f86d 	bl	80037b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <MX_TIM1_Init+0x150>)
 80006de:	4a44      	ldr	r2, [pc, #272]	@ (80007f0 <MX_TIM1_Init+0x154>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006e2:	4b42      	ldr	r3, [pc, #264]	@ (80007ec <MX_TIM1_Init+0x150>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <MX_TIM1_Init+0x150>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 80006ee:	4b3f      	ldr	r3, [pc, #252]	@ (80007ec <MX_TIM1_Init+0x150>)
 80006f0:	223b      	movs	r2, #59	@ 0x3b
 80006f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b3d      	ldr	r3, [pc, #244]	@ (80007ec <MX_TIM1_Init+0x150>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006fa:	4b3c      	ldr	r3, [pc, #240]	@ (80007ec <MX_TIM1_Init+0x150>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b3a      	ldr	r3, [pc, #232]	@ (80007ec <MX_TIM1_Init+0x150>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000706:	4839      	ldr	r0, [pc, #228]	@ (80007ec <MX_TIM1_Init+0x150>)
 8000708:	f001 fdc0 	bl	800228c <HAL_TIM_Base_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000712:	f7ff ff2e 	bl	8000572 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800071c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000720:	4619      	mov	r1, r3
 8000722:	4832      	ldr	r0, [pc, #200]	@ (80007ec <MX_TIM1_Init+0x150>)
 8000724:	f002 f886 	bl	8002834 <HAL_TIM_ConfigClockSource>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800072e:	f7ff ff20 	bl	8000572 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000732:	482e      	ldr	r0, [pc, #184]	@ (80007ec <MX_TIM1_Init+0x150>)
 8000734:	f001 fe01 	bl	800233a <HAL_TIM_PWM_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800073e:	f7ff ff18 	bl	8000572 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000752:	4619      	mov	r1, r3
 8000754:	4825      	ldr	r0, [pc, #148]	@ (80007ec <MX_TIM1_Init+0x150>)
 8000756:	f002 fe93 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000760:	f7ff ff07 	bl	8000572 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000764:	2370      	movs	r3, #112	@ 0x70
 8000766:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000770:	2308      	movs	r3, #8
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000774:	2304      	movs	r3, #4
 8000776:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800077c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000782:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000786:	2204      	movs	r2, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4818      	ldr	r0, [pc, #96]	@ (80007ec <MX_TIM1_Init+0x150>)
 800078c:	f001 ff3e 	bl	800260c <HAL_TIM_PWM_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000796:	f7ff feec 	bl	8000572 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4807      	ldr	r0, [pc, #28]	@ (80007ec <MX_TIM1_Init+0x150>)
 80007d0:	f002 febc 	bl	800354c <HAL_TIMEx_ConfigBreakDeadTime>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80007da:	f7ff feca 	bl	8000572 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007de:	4803      	ldr	r0, [pc, #12]	@ (80007ec <MX_TIM1_Init+0x150>)
 80007e0:	f000 f86c 	bl	80008bc <HAL_TIM_MspPostInit>

}
 80007e4:	bf00      	nop
 80007e6:	3768      	adds	r7, #104	@ 0x68
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000050 	.word	0x20000050
 80007f0:	40012c00 	.word	0x40012c00

080007f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <HAL_TIM_Base_MspInit+0xb8>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d14e      	bne.n	80008a4 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000806:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <HAL_TIM_Base_MspInit+0xbc>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	4a29      	ldr	r2, [pc, #164]	@ (80008b0 <HAL_TIM_Base_MspInit+0xbc>)
 800080c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000810:	6613      	str	r3, [r2, #96]	@ 0x60
 8000812:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <HAL_TIM_Base_MspInit+0xbc>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800081e:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 8000820:	4a25      	ldr	r2, [pc, #148]	@ (80008b8 <HAL_TIM_Base_MspInit+0xc4>)
 8000822:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 8000826:	2207      	movs	r2, #7
 8000828:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 800082c:	2210      	movs	r2, #16
 800082e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 800083e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000842:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000850:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 8000852:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000858:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 800085a:	f000 fb41 	bl	8000ee0 <HAL_DMA_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000864:	f7ff fe85 	bl	8000572 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
 800086e:	4a11      	ldr	r2, [pc, #68]	@ (80008b4 <HAL_TIM_Base_MspInit+0xc0>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2018      	movs	r0, #24
 800087a:	f000 fafa 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800087e:	2018      	movs	r0, #24
 8000880:	f000 fb13 	bl	8000eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2019      	movs	r0, #25
 800088a:	f000 faf2 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800088e:	2019      	movs	r0, #25
 8000890:	f000 fb0b 	bl	8000eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	201a      	movs	r0, #26
 800089a:	f000 faea 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800089e:	201a      	movs	r0, #26
 80008a0:	f000 fb03 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40012c00 	.word	0x40012c00
 80008b0:	40021000 	.word	0x40021000
 80008b4:	2000009c 	.word	0x2000009c
 80008b8:	40020030 	.word	0x40020030

080008bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <HAL_TIM_MspPostInit+0x64>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d11b      	bne.n	8000916 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_TIM_MspPostInit+0x68>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <HAL_TIM_MspPostInit+0x68>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_TIM_MspPostInit+0x68>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_TIM_MspPostInit+0x6c>)
 8000912:	f000 fcdd 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40012c00 	.word	0x40012c00
 8000924:	40021000 	.word	0x40021000
 8000928:	48000400 	.word	0x48000400

0800092c <HAL_TIM_PWM_PulseFinishedCallback>:
//    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
//    wr_buf_p++;
//  }
//}
//
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
//	HAL_TIMEx_PWMN_Stop_DMA(&htim1, TIM_CHANNEL_2);
////	HAL_Delay(100);
//	TIM2->CCR2 = TIM2->ARR;
////	TIM2->ARR = 100;
//	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000978 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000944:	f7ff fe98 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	@ (8000980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	@ (800098c <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f002 ff2b 	bl	80037c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000972:	f7ff fce5 	bl	8000340 <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000978:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000984:	08003870 	.word	0x08003870
  ldr r2, =_sbss
 8000988:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800098c:	200000e8 	.word	0x200000e8

08000990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_IRQHandler>

08000992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 fa5d 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a2:	200f      	movs	r0, #15
 80009a4:	f000 f80e 	bl	80009c4 <HAL_InitTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e001      	b.n	80009b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b4:	f7ff fde4 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_InitTick+0x6c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d023      	beq.n	8000a20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <HAL_InitTick+0x70>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_InitTick+0x6c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fa69 	bl	8000ec6 <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10f      	bne.n	8000a1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d809      	bhi.n	8000a14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 fa33 	bl	8000e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <HAL_InitTick+0x74>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e007      	b.n	8000a24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e004      	b.n	8000a24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e001      	b.n	8000a24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	200000e4 	.word	0x200000e4

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200000e4 	.word	0x200000e4

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ffee 	bl	8000a64 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffde 	bl	8000a64 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e0ed      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fba6 	bl	8000234 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f042 0201 	orr.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af8:	f7ff ffb4 	bl	8000a64 <HAL_GetTick>
 8000afc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000afe:	e012      	b.n	8000b26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b00:	f7ff ffb0 	bl	8000a64 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b0a      	cmp	r3, #10
 8000b0c:	d90b      	bls.n	8000b26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e0c5      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0e5      	beq.n	8000b00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 0202 	bic.w	r2, r2, #2
 8000b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b44:	f7ff ff8e 	bl	8000a64 <HAL_GetTick>
 8000b48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b4a:	e012      	b.n	8000b72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b4c:	f7ff ff8a 	bl	8000a64 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b0a      	cmp	r3, #10
 8000b58:	d90b      	bls.n	8000b72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2205      	movs	r2, #5
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e09f      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1e5      	bne.n	8000b4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7e1b      	ldrb	r3, [r3, #24]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d108      	bne.n	8000b9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	e007      	b.n	8000baa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7e5b      	ldrb	r3, [r3, #25]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7e9b      	ldrb	r3, [r3, #26]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0220 	orr.w	r2, r2, #32
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0220 	bic.w	r2, r2, #32
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7edb      	ldrb	r3, [r3, #27]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d108      	bne.n	8000c18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0210 	bic.w	r2, r2, #16
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0210 	orr.w	r2, r2, #16
 8000c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7f1b      	ldrb	r3, [r3, #28]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0208 	orr.w	r2, r2, #8
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0208 	bic.w	r2, r2, #8
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7f5b      	ldrb	r3, [r3, #29]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0204 	orr.w	r2, r2, #4
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0204 	bic.w	r2, r2, #4
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	ea42 0103 	orr.w	r1, r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	@ (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff3e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff31 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa2 	bl	8000e18 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e098      	b.n	8001024 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8001030 <HAL_DMA_Init+0x150>)
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d80f      	bhi.n	8000f1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b4b      	ldr	r3, [pc, #300]	@ (8001034 <HAL_DMA_Init+0x154>)
 8000f06:	4413      	add	r3, r2
 8000f08:	4a4b      	ldr	r2, [pc, #300]	@ (8001038 <HAL_DMA_Init+0x158>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	009a      	lsls	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a48      	ldr	r2, [pc, #288]	@ (800103c <HAL_DMA_Init+0x15c>)
 8000f1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f1c:	e00e      	b.n	8000f3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b46      	ldr	r3, [pc, #280]	@ (8001040 <HAL_DMA_Init+0x160>)
 8000f26:	4413      	add	r3, r2
 8000f28:	4a43      	ldr	r2, [pc, #268]	@ (8001038 <HAL_DMA_Init+0x158>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	009a      	lsls	r2, r3, #2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a42      	ldr	r2, [pc, #264]	@ (8001044 <HAL_DMA_Init+0x164>)
 8000f3a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000f96:	d039      	beq.n	800100c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	4a27      	ldr	r2, [pc, #156]	@ (800103c <HAL_DMA_Init+0x15c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11a      	bne.n	8000fd8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fa2:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <HAL_DMA_Init+0x168>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f003 031c 	and.w	r3, r3, #28
 8000fae:	210f      	movs	r1, #15
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4924      	ldr	r1, [pc, #144]	@ (8001048 <HAL_DMA_Init+0x168>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <HAL_DMA_Init+0x168>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6859      	ldr	r1, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc8:	f003 031c 	and.w	r3, r3, #28
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	491d      	ldr	r1, [pc, #116]	@ (8001048 <HAL_DMA_Init+0x168>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
 8000fd6:	e019      	b.n	800100c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_DMA_Init+0x16c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	f003 031c 	and.w	r3, r3, #28
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4917      	ldr	r1, [pc, #92]	@ (800104c <HAL_DMA_Init+0x16c>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HAL_DMA_Init+0x16c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6859      	ldr	r1, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f003 031c 	and.w	r3, r3, #28
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	4911      	ldr	r1, [pc, #68]	@ (800104c <HAL_DMA_Init+0x16c>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40020407 	.word	0x40020407
 8001034:	bffdfff8 	.word	0xbffdfff8
 8001038:	cccccccd 	.word	0xcccccccd
 800103c:	40020000 	.word	0x40020000
 8001040:	bffdfbf8 	.word	0xbffdfbf8
 8001044:	40020400 	.word	0x40020400
 8001048:	400200a8 	.word	0x400200a8
 800104c:	400204a8 	.word	0x400204a8

08001050 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_DMA_Start_IT+0x20>
 800106c:	2302      	movs	r3, #2
 800106e:	e04b      	b.n	8001108 <HAL_DMA_Start_IT+0xb8>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d13a      	bne.n	80010fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0201 	bic.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f8e0 	bl	800126e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 020e 	orr.w	r2, r2, #14
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e00f      	b.n	80010e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0204 	bic.w	r2, r2, #4
 80010d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 020a 	orr.w	r2, r2, #10
 80010e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e005      	b.n	8001106 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001102:	2302      	movs	r3, #2
 8001104:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001106:	7dfb      	ldrb	r3, [r7, #23]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112c:	f003 031c 	and.w	r3, r3, #28
 8001130:	2204      	movs	r2, #4
 8001132:	409a      	lsls	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d026      	beq.n	800118a <HAL_DMA_IRQHandler+0x7a>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d021      	beq.n	800118a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001168:	f003 021c 	and.w	r2, r3, #28
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	2104      	movs	r1, #4
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	2b00      	cmp	r3, #0
 800117e:	d071      	beq.n	8001264 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001188:	e06c      	b.n	8001264 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f003 031c 	and.w	r3, r3, #28
 8001192:	2202      	movs	r2, #2
 8001194:	409a      	lsls	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d02e      	beq.n	80011fc <HAL_DMA_IRQHandler+0xec>
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d029      	beq.n	80011fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10b      	bne.n	80011ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 020a 	bic.w	r2, r2, #10
 80011c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f003 021c 	and.w	r2, r3, #28
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	2102      	movs	r1, #2
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d038      	beq.n	8001264 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011fa:	e033      	b.n	8001264 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001200:	f003 031c 	and.w	r3, r3, #28
 8001204:	2208      	movs	r2, #8
 8001206:	409a      	lsls	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d02a      	beq.n	8001266 <HAL_DMA_IRQHandler+0x156>
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d025      	beq.n	8001266 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 020e 	bic.w	r2, r2, #14
 8001228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f003 021c 	and.w	r2, r3, #28
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001264:	bf00      	nop
 8001266:	bf00      	nop
}
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001280:	f003 021c 	and.w	r2, r3, #28
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b10      	cmp	r3, #16
 800129e:	d108      	bne.n	80012b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012b0:	e007      	b.n	80012c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	60da      	str	r2, [r3, #12]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e154      	b.n	800158a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8146 	beq.w	8001584 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x40>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b03      	cmp	r3, #3
 800137c:	d017      	beq.n	80013ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d123      	bne.n	8001402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	6939      	ldr	r1, [r7, #16]
 80013fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0203 	and.w	r2, r3, #3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80a0 	beq.w	8001584 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001444:	4b58      	ldr	r3, [pc, #352]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 8001446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001448:	4a57      	ldr	r2, [pc, #348]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001450:	4b55      	ldr	r3, [pc, #340]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145c:	4a53      	ldr	r2, [pc, #332]	@ (80015ac <HAL_GPIO_Init+0x2dc>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001486:	d019      	beq.n	80014bc <HAL_GPIO_Init+0x1ec>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a49      	ldr	r2, [pc, #292]	@ (80015b0 <HAL_GPIO_Init+0x2e0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d013      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a48      	ldr	r2, [pc, #288]	@ (80015b4 <HAL_GPIO_Init+0x2e4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_GPIO_Init+0x1e4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a47      	ldr	r2, [pc, #284]	@ (80015b8 <HAL_GPIO_Init+0x2e8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a46      	ldr	r2, [pc, #280]	@ (80015bc <HAL_GPIO_Init+0x2ec>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_Init+0x1dc>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e008      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014ac:	2307      	movs	r3, #7
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014bc:	2300      	movs	r3, #0
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ce:	4937      	ldr	r1, [pc, #220]	@ (80015ac <HAL_GPIO_Init+0x2dc>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014dc:	4b38      	ldr	r3, [pc, #224]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001500:	4a2f      	ldr	r2, [pc, #188]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001506:	4b2e      	ldr	r3, [pc, #184]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152a:	4a25      	ldr	r2, [pc, #148]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001530:	4b23      	ldr	r3, [pc, #140]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001554:	4a1a      	ldr	r2, [pc, #104]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	f47f aea3 	bne.w	80012e0 <HAL_GPIO_Init+0x10>
  }
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	48000c00 	.word	0x48000c00
 80015bc:	48001000 	.word	0x48001000
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <HAL_PWREx_GetVoltageRange+0x18>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40007000 	.word	0x40007000

080015e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ee:	d130      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f0:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015fc:	d038      	beq.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001606:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001608:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2232      	movs	r2, #50	@ 0x32
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9b      	lsrs	r3, r3, #18
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001624:	e002      	b.n	800162c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b01      	subs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001638:	d102      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x60>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f2      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800164c:	d110      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e00f      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800165a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800165e:	d007      	beq.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001668:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40007000 	.word	0x40007000
 8001684:	20000000 	.word	0x20000000
 8001688:	431bde83 	.word	0x431bde83

0800168c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	f000 bc02 	b.w	8001ea4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a0:	4b96      	ldr	r3, [pc, #600]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016aa:	4b94      	ldr	r3, [pc, #592]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80e4 	beq.w	800188a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4c>
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	f040 808b 	bne.w	80017e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	f040 8087 	bne.w	80017e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d8:	4b88      	ldr	r3, [pc, #544]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x64>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e3d9      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	4b81      	ldr	r3, [pc, #516]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_RCC_OscConfig+0x7e>
 8001700:	4b7e      	ldr	r3, [pc, #504]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001708:	e005      	b.n	8001716 <HAL_RCC_OscConfig+0x8a>
 800170a:	4b7c      	ldr	r3, [pc, #496]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800170c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001716:	4293      	cmp	r3, r2
 8001718:	d223      	bcs.n	8001762 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fd54 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e3ba      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172e:	4b73      	ldr	r3, [pc, #460]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a72      	ldr	r2, [pc, #456]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	496d      	ldr	r1, [pc, #436]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	4b6b      	ldr	r3, [pc, #428]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	4968      	ldr	r1, [pc, #416]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	e025      	b.n	80017ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001762:	4b66      	ldr	r3, [pc, #408]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a65      	ldr	r2, [pc, #404]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4960      	ldr	r1, [pc, #384]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001780:	4b5e      	ldr	r3, [pc, #376]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	495b      	ldr	r1, [pc, #364]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fd14 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e37a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ae:	f000 fc81 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b51      	ldr	r3, [pc, #324]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4950      	ldr	r1, [pc, #320]	@ (8001900 <HAL_RCC_OscConfig+0x274>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001904 <HAL_RCC_OscConfig+0x278>)
 80017cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f8f6 	bl	80009c4 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d052      	beq.n	8001888 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	e35e      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d032      	beq.n	8001854 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ee:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a42      	ldr	r2, [pc, #264]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fa:	f7ff f933 	bl	8000a64 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001802:	f7ff f92f 	bl	8000a64 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e347      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001814:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001820:	4b36      	ldr	r3, [pc, #216]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a35      	ldr	r2, [pc, #212]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4930      	ldr	r1, [pc, #192]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183e:	4b2f      	ldr	r3, [pc, #188]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	492b      	ldr	r1, [pc, #172]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
 8001852:	e01a      	b.n	800188a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001860:	f7ff f900 	bl	8000a64 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001868:	f7ff f8fc 	bl	8000a64 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e314      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1dc>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d073      	beq.n	800197e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b08      	cmp	r3, #8
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x21c>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d10e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d063      	beq.n	800197c <HAL_RCC_OscConfig+0x2f0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d15f      	bne.n	800197c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e2f1      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x24c>
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e025      	b.n	8001924 <HAL_RCC_OscConfig+0x298>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e0:	d114      	bne.n	800190c <HAL_RCC_OscConfig+0x280>
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a02      	ldr	r2, [pc, #8]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0x298>
 80018fc:	40021000 	.word	0x40021000
 8001900:	08003828 	.word	0x08003828
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004
 800190c:	4ba0      	ldr	r3, [pc, #640]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a9f      	ldr	r2, [pc, #636]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b9d      	ldr	r3, [pc, #628]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a9c      	ldr	r2, [pc, #624]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f89a 	bl	8000a64 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f896 	bl	8000a64 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2ae      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001946:	4b92      	ldr	r3, [pc, #584]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x2a8>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f886 	bl	8000a64 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff f882 	bl	8000a64 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e29a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196e:	4b88      	ldr	r3, [pc, #544]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x2d0>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d060      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d005      	beq.n	800199c <HAL_RCC_OscConfig+0x310>
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d119      	bne.n	80019ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d116      	bne.n	80019ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x328>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e277      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b76      	ldr	r3, [pc, #472]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	4973      	ldr	r1, [pc, #460]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c8:	e040      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d023      	beq.n	8001a1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f841 	bl	8000a64 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff f83d 	bl	8000a64 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e255      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	4b65      	ldr	r3, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b62      	ldr	r3, [pc, #392]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	495f      	ldr	r1, [pc, #380]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e018      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f81d 	bl	8000a64 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f819 	bl	8000a64 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e231      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a40:	4b53      	ldr	r3, [pc, #332]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d03c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a60:	4b4b      	ldr	r3, [pc, #300]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a66:	4a4a      	ldr	r2, [pc, #296]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7fe fff8 	bl	8000a64 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7fe fff4 	bl	8000a64 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e20c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ef      	beq.n	8001a78 <HAL_RCC_OscConfig+0x3ec>
 8001a98:	e01b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7fe ffdb 	bl	8000a64 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7fe ffd7 	bl	8000a64 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1ef      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ef      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80a6 	beq.w	8001c2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10d      	bne.n	8001b0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0c:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d118      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b18:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b24:	f7fe ff9e 	bl	8000a64 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2c:	f7fe ff9a 	bl	8000a64 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1b2      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4d8>
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b62:	e029      	b.n	8001bb8 <HAL_RCC_OscConfig+0x52c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d115      	bne.n	8001b98 <HAL_RCC_OscConfig+0x50c>
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b72:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b7c:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b82:	4a03      	ldr	r2, [pc, #12]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x52c>
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40007000 	.word	0x40007000
 8001b98:	4b9a      	ldr	r3, [pc, #616]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9e:	4a99      	ldr	r2, [pc, #612]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ba8:	4b96      	ldr	r3, [pc, #600]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bae:	4a95      	ldr	r2, [pc, #596]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d016      	beq.n	8001bee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7fe ff50 	bl	8000a64 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe ff4c 	bl	8000a64 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e162      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bde:	4b89      	ldr	r3, [pc, #548]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ed      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x53c>
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7fe ff39 	bl	8000a64 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7fe ff35 	bl	8000a64 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e14b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ed      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c24:	4a77      	ldr	r2, [pc, #476]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d03c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c40:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c46:	4a6f      	ldr	r2, [pc, #444]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7fe ff08 	bl	8000a64 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c58:	f7fe ff04 	bl	8000a64 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e11c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c6a:	4b66      	ldr	r3, [pc, #408]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ef      	beq.n	8001c58 <HAL_RCC_OscConfig+0x5cc>
 8001c78:	e01b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c7a:	4b62      	ldr	r3, [pc, #392]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c80:	4a60      	ldr	r2, [pc, #384]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8a:	f7fe feeb 	bl	8000a64 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c92:	f7fe fee7 	bl	8000a64 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0ff      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca4:	4b57      	ldr	r3, [pc, #348]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ef      	bne.n	8001c92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80f3 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	f040 80c9 	bne.w	8001e58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d12c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d123      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d11b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d113      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d109      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d06b      	beq.n	8001e0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d062      	beq.n	8001e00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d3a:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0ac      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d56:	f7fe fe85 	bl	8000a64 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe fe81 	bl	8000a64 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e099      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <HAL_RCC_OscConfig+0x77c>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d96:	0212      	lsls	r2, r2, #8
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d9e:	0852      	lsrs	r2, r2, #1
 8001da0:	3a01      	subs	r2, #1
 8001da2:	0552      	lsls	r2, r2, #21
 8001da4:	4311      	orrs	r1, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001daa:	0852      	lsrs	r2, r2, #1
 8001dac:	3a01      	subs	r2, #1
 8001dae:	0652      	lsls	r2, r2, #25
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001db6:	06d2      	lsls	r2, r2, #27
 8001db8:	430a      	orrs	r2, r1
 8001dba:	4912      	ldr	r1, [pc, #72]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd8:	f7fe fe44 	bl	8000a64 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe fe40 	bl	8000a64 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e058      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfe:	e050      	b.n	8001ea2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d144      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e18:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e30:	f7fe fe18 	bl	8000a64 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe fe14 	bl	8000a64 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e02c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x7ac>
 8001e56:	e024      	b.n	8001ea2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d01f      	beq.n	8001e9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fdfb 	bl	8000a64 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fdf7 	bl	8000a64 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4905      	ldr	r1, [pc, #20]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_RCC_OscConfig+0x824>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e001      	b.n	8001ea2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	feeefffc 	.word	0xfeeefffc

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0e7      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b72      	ldr	r3, [pc, #456]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4970      	ldr	r1, [pc, #448]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0cf      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b66      	ldr	r3, [pc, #408]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d908      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b63      	ldr	r3, [pc, #396]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4960      	ldr	r1, [pc, #384]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04c      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0a6      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b54      	ldr	r3, [pc, #336]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e09a      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e08e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e086      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4943      	ldr	r1, [pc, #268]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fd62 	bl	8000a64 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fd5e 	bl	8000a64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b3a      	ldr	r3, [pc, #232]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	492b      	ldr	r1, [pc, #172]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffa:	4b29      	ldr	r3, [pc, #164]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d210      	bcs.n	800202a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	4923      	ldr	r1, [pc, #140]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002018:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e036      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4918      	ldr	r1, [pc, #96]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4910      	ldr	r1, [pc, #64]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002068:	f000 f824 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	490b      	ldr	r1, [pc, #44]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f4>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1fc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fc99 	bl	80009c4 <HAL_InitTick>
 8002092:	4603      	mov	r3, r0
 8002094:	72fb      	strb	r3, [r7, #11]

  return status;
 8002096:	7afb      	ldrb	r3, [r7, #11]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08003828 	.word	0x08003828
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x34>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d11e      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e8:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f4:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e005      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002110:	4a2b      	ldr	r2, [pc, #172]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002124:	e00a      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d102      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800212c:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e004      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d101      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002138:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800213a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d134      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0xa6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xac>
 8002158:	e005      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002162:	617b      	str	r3, [r7, #20]
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0e5b      	lsrs	r3, r3, #25
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	3301      	adds	r3, #1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021ac:	69bb      	ldr	r3, [r7, #24]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08003838 	.word	0x08003838
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff f9ee 	bl	80015c4 <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
 80021ea:	e014      	b.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	4a24      	ldr	r2, [pc, #144]	@ (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f8:	4b22      	ldr	r3, [pc, #136]	@ (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002204:	f7ff f9de 	bl	80015c4 <HAL_PWREx_GetVoltageRange>
 8002208:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	4a1d      	ldr	r2, [pc, #116]	@ (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002214:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800221c:	d10b      	bne.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b80      	cmp	r3, #128	@ 0x80
 8002222:	d919      	bls.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2ba0      	cmp	r3, #160	@ 0xa0
 8002228:	d902      	bls.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800222a:	2302      	movs	r3, #2
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e013      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e010      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b80      	cmp	r3, #128	@ 0x80
 800223a:	d902      	bls.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800223c:	2303      	movs	r3, #3
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	e00a      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	@ 0x80
 8002246:	d102      	bne.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e004      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b70      	cmp	r3, #112	@ 0x70
 8002252:	d101      	bne.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 0207 	bic.w	r2, r3, #7
 8002260:	4909      	ldr	r1, [pc, #36]	@ (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e049      	b.n	8002332 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe fa9e 	bl	80007f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fbec 	bl	8002aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e049      	b.n	80023e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f841 	bl	80023e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f000 fb95 	bl	8002aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d020      	beq.n	8002460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0202 	mvn.w	r2, #2
 8002430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fad1 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fac3 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7fe fa69 	bl	800092c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d020      	beq.n	80024ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0204 	mvn.w	r2, #4
 800247c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 faab 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa9d 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7fe fa43 	bl	800092c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d020      	beq.n	80024f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01b      	beq.n	80024f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0208 	mvn.w	r2, #8
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2204      	movs	r2, #4
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa85 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa77 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7fe fa1d 	bl	800092c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d020      	beq.n	8002544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0210 	mvn.w	r2, #16
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2208      	movs	r2, #8
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa5f 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa51 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fe f9f7 	bl	800092c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0201 	mvn.w	r2, #1
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa2f 	bl	80029c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00c      	beq.n	8002596 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800258e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f001 f85d 	bl	8003650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00c      	beq.n	80025ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80025b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 f855 	bl	8003664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00c      	beq.n	80025de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fa1c 	bl	8002a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f06f 0220 	mvn.w	r2, #32
 80025fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f001 f81d 	bl	800363c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002626:	2302      	movs	r3, #2
 8002628:	e0ff      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b14      	cmp	r3, #20
 8002636:	f200 80f0 	bhi.w	800281a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800263a:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002695 	.word	0x08002695
 8002644:	0800281b 	.word	0x0800281b
 8002648:	0800281b 	.word	0x0800281b
 800264c:	0800281b 	.word	0x0800281b
 8002650:	080026d5 	.word	0x080026d5
 8002654:	0800281b 	.word	0x0800281b
 8002658:	0800281b 	.word	0x0800281b
 800265c:	0800281b 	.word	0x0800281b
 8002660:	08002717 	.word	0x08002717
 8002664:	0800281b 	.word	0x0800281b
 8002668:	0800281b 	.word	0x0800281b
 800266c:	0800281b 	.word	0x0800281b
 8002670:	08002757 	.word	0x08002757
 8002674:	0800281b 	.word	0x0800281b
 8002678:	0800281b 	.word	0x0800281b
 800267c:	0800281b 	.word	0x0800281b
 8002680:	08002799 	.word	0x08002799
 8002684:	0800281b 	.word	0x0800281b
 8002688:	0800281b 	.word	0x0800281b
 800268c:	0800281b 	.word	0x0800281b
 8002690:	080027d9 	.word	0x080027d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fa74 	bl	8002b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6999      	ldr	r1, [r3, #24]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	619a      	str	r2, [r3, #24]
      break;
 80026d2:	e0a5      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fad0 	bl	8002c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6999      	ldr	r1, [r3, #24]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	021a      	lsls	r2, r3, #8
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	619a      	str	r2, [r3, #24]
      break;
 8002714:	e084      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fb29 	bl	8002d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0208 	orr.w	r2, r2, #8
 8002730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0204 	bic.w	r2, r2, #4
 8002740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	61da      	str	r2, [r3, #28]
      break;
 8002754:	e064      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fb81 	bl	8002e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69d9      	ldr	r1, [r3, #28]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	021a      	lsls	r2, r3, #8
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	61da      	str	r2, [r3, #28]
      break;
 8002796:	e043      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fbbe 	bl	8002f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0208 	orr.w	r2, r2, #8
 80027b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80027d6:	e023      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fbf6 	bl	8002fd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	021a      	lsls	r2, r3, #8
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002818:	e002      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
      break;
 800281e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002828:	7dfb      	ldrb	r3, [r7, #23]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop

08002834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIM_ConfigClockSource+0x1c>
 800284c:	2302      	movs	r3, #2
 800284e:	e0b6      	b.n	80029be <HAL_TIM_ConfigClockSource+0x18a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800286e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800287a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800288c:	d03e      	beq.n	800290c <HAL_TIM_ConfigClockSource+0xd8>
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002892:	f200 8087 	bhi.w	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289a:	f000 8086 	beq.w	80029aa <HAL_TIM_ConfigClockSource+0x176>
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a2:	d87f      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 80028a4:	2b70      	cmp	r3, #112	@ 0x70
 80028a6:	d01a      	beq.n	80028de <HAL_TIM_ConfigClockSource+0xaa>
 80028a8:	2b70      	cmp	r3, #112	@ 0x70
 80028aa:	d87b      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 80028ac:	2b60      	cmp	r3, #96	@ 0x60
 80028ae:	d050      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x11e>
 80028b0:	2b60      	cmp	r3, #96	@ 0x60
 80028b2:	d877      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 80028b4:	2b50      	cmp	r3, #80	@ 0x50
 80028b6:	d03c      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0xfe>
 80028b8:	2b50      	cmp	r3, #80	@ 0x50
 80028ba:	d873      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 80028bc:	2b40      	cmp	r3, #64	@ 0x40
 80028be:	d058      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x13e>
 80028c0:	2b40      	cmp	r3, #64	@ 0x40
 80028c2:	d86f      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 80028c4:	2b30      	cmp	r3, #48	@ 0x30
 80028c6:	d064      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15e>
 80028c8:	2b30      	cmp	r3, #48	@ 0x30
 80028ca:	d86b      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d060      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15e>
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d867      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d05c      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15e>
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d05a      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15e>
 80028dc:	e062      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028ee:	f000 fc43 	bl	8003178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
      break;
 800290a:	e04f      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800291c:	f000 fc2c 	bl	8003178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800292e:	609a      	str	r2, [r3, #8]
      break;
 8002930:	e03c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800293e:	461a      	mov	r2, r3
 8002940:	f000 fba0 	bl	8003084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2150      	movs	r1, #80	@ 0x50
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fbf9 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002950:	e02c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800295e:	461a      	mov	r2, r3
 8002960:	f000 fbbf 	bl	80030e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2160      	movs	r1, #96	@ 0x60
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fbe9 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002970:	e01c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297e:	461a      	mov	r2, r3
 8002980:	f000 fb80 	bl	8003084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2140      	movs	r1, #64	@ 0x40
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fbd9 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002990:	e00c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f000 fbd0 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 80029a2:	e003      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e000      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80029aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d103      	bne.n	8002a5e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	771a      	strb	r2, [r3, #28]
 8002a5c:	e019      	b.n	8002a92 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d103      	bne.n	8002a70 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	771a      	strb	r2, [r3, #28]
 8002a6e:	e010      	b.n	8002a92 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d103      	bne.n	8002a82 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	771a      	strb	r2, [r3, #28]
 8002a80:	e007      	b.n	8002a92 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d102      	bne.n	8002a92 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2208      	movs	r2, #8
 8002a90:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ffb5 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	771a      	strb	r2, [r3, #28]
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a30      	ldr	r2, [pc, #192]	@ (8002b7c <TIM_Base_SetConfig+0xd4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_Base_SetConfig+0x20>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac6:	d108      	bne.n	8002ada <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <TIM_Base_SetConfig+0xd4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <TIM_Base_SetConfig+0x52>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae8:	d007      	beq.n	8002afa <TIM_Base_SetConfig+0x52>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <TIM_Base_SetConfig+0xd8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_Base_SetConfig+0x52>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a23      	ldr	r2, [pc, #140]	@ (8002b84 <TIM_Base_SetConfig+0xdc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <TIM_Base_SetConfig+0xd4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <TIM_Base_SetConfig+0xa0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <TIM_Base_SetConfig+0xd8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_Base_SetConfig+0xa0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <TIM_Base_SetConfig+0xdc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40014000 	.word	0x40014000
 8002b84:	40014400 	.word	0x40014400

08002b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f023 0201 	bic.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 0302 	bic.w	r3, r3, #2
 8002bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a24      	ldr	r2, [pc, #144]	@ (8002c74 <TIM_OC1_SetConfig+0xec>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d007      	beq.n	8002bf8 <TIM_OC1_SetConfig+0x70>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a23      	ldr	r2, [pc, #140]	@ (8002c78 <TIM_OC1_SetConfig+0xf0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d003      	beq.n	8002bf8 <TIM_OC1_SetConfig+0x70>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a22      	ldr	r2, [pc, #136]	@ (8002c7c <TIM_OC1_SetConfig+0xf4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10c      	bne.n	8002c12 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0308 	bic.w	r3, r3, #8
 8002bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <TIM_OC1_SetConfig+0xec>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <TIM_OC1_SetConfig+0xa2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	@ (8002c78 <TIM_OC1_SetConfig+0xf0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_OC1_SetConfig+0xa2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <TIM_OC1_SetConfig+0xf4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d111      	bne.n	8002c4e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	621a      	str	r2, [r3, #32]
}
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40014400 	.word	0x40014400

08002c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f023 0210 	bic.w	r2, r3, #16
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0320 	bic.w	r3, r3, #32
 8002cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a22      	ldr	r2, [pc, #136]	@ (8002d68 <TIM_OC2_SetConfig+0xe8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10d      	bne.n	8002d00 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a19      	ldr	r2, [pc, #100]	@ (8002d68 <TIM_OC2_SetConfig+0xe8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <TIM_OC2_SetConfig+0x98>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a18      	ldr	r2, [pc, #96]	@ (8002d6c <TIM_OC2_SetConfig+0xec>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_OC2_SetConfig+0x98>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a17      	ldr	r2, [pc, #92]	@ (8002d70 <TIM_OC2_SetConfig+0xf0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d113      	bne.n	8002d40 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400

08002d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a21      	ldr	r2, [pc, #132]	@ (8002e58 <TIM_OC3_SetConfig+0xe4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10d      	bne.n	8002df2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <TIM_OC3_SetConfig+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <TIM_OC3_SetConfig+0x96>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <TIM_OC3_SetConfig+0xe8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_OC3_SetConfig+0x96>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a16      	ldr	r2, [pc, #88]	@ (8002e60 <TIM_OC3_SetConfig+0xec>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d113      	bne.n	8002e32 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	621a      	str	r2, [r3, #32]
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400

08002e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a14      	ldr	r2, [pc, #80]	@ (8002f14 <TIM_OC4_SetConfig+0xb0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_OC4_SetConfig+0x74>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <TIM_OC4_SetConfig+0xb4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_OC4_SetConfig+0x74>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <TIM_OC4_SetConfig+0xb8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d109      	bne.n	8002eec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400

08002f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a13      	ldr	r2, [pc, #76]	@ (8002fc4 <TIM_OC5_SetConfig+0xa4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_OC5_SetConfig+0x6a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <TIM_OC5_SetConfig+0xa8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_OC5_SetConfig+0x6a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <TIM_OC5_SetConfig+0xac>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d109      	bne.n	8002f9e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40014400 	.word	0x40014400

08002fd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	051b      	lsls	r3, r3, #20
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <TIM_OC6_SetConfig+0xa8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_OC6_SetConfig+0x6c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a13      	ldr	r2, [pc, #76]	@ (800307c <TIM_OC6_SetConfig+0xac>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_OC6_SetConfig+0x6c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a12      	ldr	r2, [pc, #72]	@ (8003080 <TIM_OC6_SetConfig+0xb0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d109      	bne.n	8003050 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40014000 	.word	0x40014000
 8003080:	40014400 	.word	0x40014400

08003084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 030a 	bic.w	r3, r3, #10
 80030c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f023 0210 	bic.w	r2, r3, #16
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800310c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	031b      	lsls	r3, r3, #12
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800311e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	f043 0307 	orr.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	431a      	orrs	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                           uint16_t Length)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e022      	b.n	800322a <HAL_TIMEx_PWMN_Start_DMA+0x72>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d109      	bne.n	80031fe <HAL_TIMEx_PWMN_Start_DMA+0x46>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e015      	b.n	800322a <HAL_TIMEx_PWMN_Start_DMA+0x72>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d109      	bne.n	8003218 <HAL_TIMEx_PWMN_Start_DMA+0x60>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e008      	b.n	800322a <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	e116      	b.n	8003460 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_TIMEx_PWMN_Start_DMA+0x94>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e022      	b.n	8003292 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d109      	bne.n	8003266 <HAL_TIMEx_PWMN_Start_DMA+0xae>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e015      	b.n	8003292 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d109      	bne.n	8003280 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e008      	b.n	8003292 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d024      	beq.n	80032e0 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0dc      	b.n	8003460 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b4:	e016      	b.n	80032e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d104      	bne.n	80032c6 <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032c4:	e00e      	b.n	80032e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d104      	bne.n	80032d6 <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032d4:	e006      	b.n	80032e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80032de:	e001      	b.n	80032e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0bd      	b.n	8003460 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
  }

  switch (Channel)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d051      	beq.n	800338e <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d872      	bhi.n	80033d6 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIMEx_PWMN_Start_DMA+0x146>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d024      	beq.n	8003346 <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 80032fc:	e06b      	b.n	80033d6 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	4a59      	ldr	r2, [pc, #356]	@ (8003468 <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 8003304:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	4a58      	ldr	r2, [pc, #352]	@ (800346c <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	4a57      	ldr	r2, [pc, #348]	@ (8003470 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 8003314:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3334      	adds	r3, #52	@ 0x34
 8003322:	461a      	mov	r2, r3
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	f7fd fe93 	bl	8001050 <HAL_DMA_Start_IT>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e095      	b.n	8003460 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003342:	60da      	str	r2, [r3, #12]
      break;
 8003344:	e04a      	b.n	80033dc <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	4a47      	ldr	r2, [pc, #284]	@ (8003468 <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 800334c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	4a46      	ldr	r2, [pc, #280]	@ (800346c <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	4a45      	ldr	r2, [pc, #276]	@ (8003470 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3338      	adds	r3, #56	@ 0x38
 800336a:	461a      	mov	r2, r3
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	f7fd fe6f 	bl	8001050 <HAL_DMA_Start_IT>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e071      	b.n	8003460 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800338a:	60da      	str	r2, [r3, #12]
      break;
 800338c:	e026      	b.n	80033dc <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	4a35      	ldr	r2, [pc, #212]	@ (8003468 <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 8003394:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	4a34      	ldr	r2, [pc, #208]	@ (800346c <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	4a33      	ldr	r2, [pc, #204]	@ (8003470 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 80033a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	333c      	adds	r3, #60	@ 0x3c
 80033b2:	461a      	mov	r2, r3
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	f7fd fe4b 	bl	8001050 <HAL_DMA_Start_IT>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e04d      	b.n	8003460 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033d2:	60da      	str	r2, [r3, #12]
      break;
 80033d4:	e002      	b.n	80033dc <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
      break;
 80033da:	bf00      	nop
  }

  if (status == HAL_OK)
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d13d      	bne.n	800345e <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2204      	movs	r2, #4
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f9be 	bl	800376c <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1b      	ldr	r2, [pc, #108]	@ (8003474 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_TIMEx_PWMN_Start_DMA+0x266>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003412:	d004      	beq.n	800341e <HAL_TIMEx_PWMN_Start_DMA+0x266>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <HAL_TIMEx_PWMN_Start_DMA+0x2c0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d115      	bne.n	800344a <HAL_TIMEx_PWMN_Start_DMA+0x292>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4b15      	ldr	r3, [pc, #84]	@ (800347c <HAL_TIMEx_PWMN_Start_DMA+0x2c4>)
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b06      	cmp	r3, #6
 800342e:	d015      	beq.n	800345c <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003436:	d011      	beq.n	800345c <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      {
        __HAL_TIM_ENABLE(htim);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	e008      	b.n	800345c <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e000      	b.n	800345e <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800345e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08003679 	.word	0x08003679
 800346c:	08002a3f 	.word	0x08002a3f
 8003470:	080036ff 	.word	0x080036ff
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40014000 	.word	0x40014000
 800347c:	00010007 	.word	0x00010007

08003480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003494:	2302      	movs	r3, #2
 8003496:	e04f      	b.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a21      	ldr	r2, [pc, #132]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a14      	ldr	r2, [pc, #80]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003500:	d004      	beq.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a10      	ldr	r2, [pc, #64]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d10c      	bne.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003512:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40014000 	.word	0x40014000

0800354c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e060      	b.n	800362a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a14      	ldr	r2, [pc, #80]	@ (8003638 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d115      	bne.n	8003618 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	051b      	lsls	r3, r3, #20
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40012c00 	.word	0x40012c00

0800363c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d10b      	bne.n	80036a8 <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d125      	bne.n	80036ea <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a6:	e020      	b.n	80036ea <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d10b      	bne.n	80036ca <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d114      	bne.n	80036ea <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036c8:	e00f      	b.n	80036ea <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d10a      	bne.n	80036ea <TIM_DMADelayPulseNCplt+0x72>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2204      	movs	r2, #4
 80036d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7fd f91e 	bl	800092c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	771a      	strb	r2, [r3, #28]
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	429a      	cmp	r2, r3
 8003714:	d107      	bne.n	8003726 <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003724:	e018      	b.n	8003758 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2202      	movs	r2, #2
 8003734:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800373e:	e00b      	b.n	8003758 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d106      	bne.n	8003758 <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2204      	movs	r2, #4
 800374e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff f966 	bl	8002a2a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	2204      	movs	r2, #4
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	43db      	mvns	r3, r3
 800378e:	401a      	ands	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <memset>:
 80037b6:	4402      	add	r2, r0
 80037b8:	4603      	mov	r3, r0
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d100      	bne.n	80037c0 <memset+0xa>
 80037be:	4770      	bx	lr
 80037c0:	f803 1b01 	strb.w	r1, [r3], #1
 80037c4:	e7f9      	b.n	80037ba <memset+0x4>
	...

080037c8 <__libc_init_array>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003800 <__libc_init_array+0x38>)
 80037cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003804 <__libc_init_array+0x3c>)
 80037ce:	1b64      	subs	r4, r4, r5
 80037d0:	10a4      	asrs	r4, r4, #2
 80037d2:	2600      	movs	r6, #0
 80037d4:	42a6      	cmp	r6, r4
 80037d6:	d109      	bne.n	80037ec <__libc_init_array+0x24>
 80037d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003808 <__libc_init_array+0x40>)
 80037da:	4c0c      	ldr	r4, [pc, #48]	@ (800380c <__libc_init_array+0x44>)
 80037dc:	f000 f818 	bl	8003810 <_init>
 80037e0:	1b64      	subs	r4, r4, r5
 80037e2:	10a4      	asrs	r4, r4, #2
 80037e4:	2600      	movs	r6, #0
 80037e6:	42a6      	cmp	r6, r4
 80037e8:	d105      	bne.n	80037f6 <__libc_init_array+0x2e>
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f0:	4798      	blx	r3
 80037f2:	3601      	adds	r6, #1
 80037f4:	e7ee      	b.n	80037d4 <__libc_init_array+0xc>
 80037f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fa:	4798      	blx	r3
 80037fc:	3601      	adds	r6, #1
 80037fe:	e7f2      	b.n	80037e6 <__libc_init_array+0x1e>
 8003800:	08003868 	.word	0x08003868
 8003804:	08003868 	.word	0x08003868
 8003808:	08003868 	.word	0x08003868
 800380c:	0800386c 	.word	0x0800386c

08003810 <_init>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr

0800381c <_fini>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr
