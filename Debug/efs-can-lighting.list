
efs-can-lighting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c84  08003c84  00004c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc4  08003cc4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc4  08003cc4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc4  08003cc4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cc8  08003cc8  00004cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ccc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003cd8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003cd8  00005140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8a1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ae  00000000  00000000  000118dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00013b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  00014908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d6a  00000000  00000000  00015351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff5f  00000000  00000000  000360bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7911  00000000  00000000  0004601a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d92b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e0  00000000  00000000  0010d970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00111050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003c6c 	.word	0x08003c6c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003c6c 	.word	0x08003c6c

080001cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001d0:	4b16      	ldr	r3, [pc, #88]	@ (800022c <MX_CAN1_Init+0x60>)
 80001d2:	4a17      	ldr	r2, [pc, #92]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80001d6:	4b15      	ldr	r3, [pc, #84]	@ (800022c <MX_CAN1_Init+0x60>)
 80001d8:	2210      	movs	r2, #16
 80001da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80001dc:	4b13      	ldr	r3, [pc, #76]	@ (800022c <MX_CAN1_Init+0x60>)
 80001de:	2200      	movs	r2, #0
 80001e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e2:	4b12      	ldr	r3, [pc, #72]	@ (800022c <MX_CAN1_Init+0x60>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80001e8:	4b10      	ldr	r3, [pc, #64]	@ (800022c <MX_CAN1_Init+0x60>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001ee:	4b0f      	ldr	r3, [pc, #60]	@ (800022c <MX_CAN1_Init+0x60>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80001f4:	4b0d      	ldr	r3, [pc, #52]	@ (800022c <MX_CAN1_Init+0x60>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80001fa:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <MX_CAN1_Init+0x60>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000200:	4b0a      	ldr	r3, [pc, #40]	@ (800022c <MX_CAN1_Init+0x60>)
 8000202:	2200      	movs	r2, #0
 8000204:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000206:	4b09      	ldr	r3, [pc, #36]	@ (800022c <MX_CAN1_Init+0x60>)
 8000208:	2200      	movs	r2, #0
 800020a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000212:	4b06      	ldr	r3, [pc, #24]	@ (800022c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000218:	4804      	ldr	r0, [pc, #16]	@ (800022c <MX_CAN1_Init+0x60>)
 800021a:	f000 fdaf 	bl	8000d7c <HAL_CAN_Init>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000224:	f000 f938 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000028 	.word	0x20000028
 8000230:	40006400 	.word	0x40006400

08000234 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08a      	sub	sp, #40	@ 0x28
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a18      	ldr	r2, [pc, #96]	@ (80002b4 <HAL_CAN_MspInit+0x80>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d129      	bne.n	80002aa <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000256:	4b18      	ldr	r3, [pc, #96]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800025a:	4a17      	ldr	r2, [pc, #92]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 800025c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000260:	6593      	str	r3, [r2, #88]	@ 0x58
 8000262:	4b15      	ldr	r3, [pc, #84]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000272:	4a11      	ldr	r2, [pc, #68]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800027a:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000286:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800028a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800028c:	2302      	movs	r3, #2
 800028e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000298:	2309      	movs	r3, #9
 800029a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4619      	mov	r1, r3
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 f9af 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	@ 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40006400 	.word	0x40006400
 80002b8:	40021000 	.word	0x40021000

080002bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002c2:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <MX_DMA_Init+0x38>)
 80002c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002c6:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <MX_DMA_Init+0x38>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80002ce:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <MX_DMA_Init+0x38>)
 80002d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2100      	movs	r1, #0
 80002de:	200d      	movs	r0, #13
 80002e0:	f000 ff23 	bl	800112a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002e4:	200d      	movs	r0, #13
 80002e6:	f000 ff3c 	bl	8001162 <HAL_NVIC_EnableIRQ>

}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000

080002f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_GPIO_Init+0x44>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a0e      	ldr	r2, [pc, #56]	@ (800033c <MX_GPIO_Init+0x44>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_GPIO_Init+0x44>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_GPIO_Init+0x44>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a08      	ldr	r2, [pc, #32]	@ (800033c <MX_GPIO_Init+0x44>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_GPIO_Init+0x44>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0302 	and.w	r3, r3, #2
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]

}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 fc80 	bl	8000c4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f856 	bl	80003fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f7ff ffd3 	bl	80002f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000352:	f7ff ffb3 	bl	80002bc <MX_DMA_Init>
  MX_CAN1_Init();
 8000356:	f7ff ff39 	bl	80001cc <MX_CAN1_Init>
  MX_TIM1_Init();
 800035a:	f000 f931 	bl	80005c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t angle = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	71fb      	strb	r3, [r7, #7]
	const uint8_t angle_difference = 11;
 8000362:	230b      	movs	r3, #11
 8000364:	71bb      	strb	r3, [r7, #6]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		led_set_RGB(0, 0, 0, 0);
//		led_set_RGB(1, 0, 0, 0);
		led_set_RGB(0, 50, 0, 0);
 8000366:	2300      	movs	r3, #0
 8000368:	2200      	movs	r2, #0
 800036a:	2132      	movs	r1, #50	@ 0x32
 800036c:	2000      	movs	r0, #0
 800036e:	f000 fa83 	bl	8000878 <led_set_RGB>
		led_set_RGB(1, 50, 0, 0);
 8000372:	2300      	movs	r3, #0
 8000374:	2200      	movs	r2, #0
 8000376:	2132      	movs	r1, #50	@ 0x32
 8000378:	2001      	movs	r0, #1
 800037a:	f000 fa7d 	bl	8000878 <led_set_RGB>
		led_set_RGB(2, 50, 0, 0);
 800037e:	2300      	movs	r3, #0
 8000380:	2200      	movs	r2, #0
 8000382:	2132      	movs	r1, #50	@ 0x32
 8000384:	2002      	movs	r0, #2
 8000386:	f000 fa77 	bl	8000878 <led_set_RGB>
		led_render();
 800038a:	f000 faad 	bl	80008e8 <led_render>

		HAL_Delay(1000);
 800038e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000392:	f000 fccf 	bl	8000d34 <HAL_Delay>
		led_set_RGB(0, 0, 50, 0);
 8000396:	2300      	movs	r3, #0
 8000398:	2232      	movs	r2, #50	@ 0x32
 800039a:	2100      	movs	r1, #0
 800039c:	2000      	movs	r0, #0
 800039e:	f000 fa6b 	bl	8000878 <led_set_RGB>
	    led_set_RGB(1, 0, 50, 0);
 80003a2:	2300      	movs	r3, #0
 80003a4:	2232      	movs	r2, #50	@ 0x32
 80003a6:	2100      	movs	r1, #0
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fa65 	bl	8000878 <led_set_RGB>
		led_set_RGB(2, 0, 50, 0);
 80003ae:	2300      	movs	r3, #0
 80003b0:	2232      	movs	r2, #50	@ 0x32
 80003b2:	2100      	movs	r1, #0
 80003b4:	2002      	movs	r0, #2
 80003b6:	f000 fa5f 	bl	8000878 <led_set_RGB>
		led_render();
 80003ba:	f000 fa95 	bl	80008e8 <led_render>
		HAL_Delay(1000);
 80003be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003c2:	f000 fcb7 	bl	8000d34 <HAL_Delay>

		led_set_RGB(0, 0, 0, 50);
 80003c6:	2332      	movs	r3, #50	@ 0x32
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	2000      	movs	r0, #0
 80003ce:	f000 fa53 	bl	8000878 <led_set_RGB>
		led_set_RGB(1, 0, 0, 50);
 80003d2:	2332      	movs	r3, #50	@ 0x32
 80003d4:	2200      	movs	r2, #0
 80003d6:	2100      	movs	r1, #0
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 fa4d 	bl	8000878 <led_set_RGB>
		led_set_RGB(2, 0, 0, 50);
 80003de:	2332      	movs	r3, #50	@ 0x32
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2002      	movs	r0, #2
 80003e6:	f000 fa47 	bl	8000878 <led_set_RGB>
		led_render();
 80003ea:	f000 fa7d 	bl	80008e8 <led_render>
		HAL_Delay(1000);
 80003ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003f2:	f000 fc9f 	bl	8000d34 <HAL_Delay>
		led_set_RGB(0, 50, 0, 0);
 80003f6:	bf00      	nop
 80003f8:	e7b5      	b.n	8000366 <main+0x26>

080003fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b096      	sub	sp, #88	@ 0x58
 80003fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	2244      	movs	r2, #68	@ 0x44
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fc02 	bl	8003c12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040e:	463b      	mov	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800041c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000420:	f001 fa7a 	bl	8001918 <HAL_PWREx_ControlVoltageScaling>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800042a:	f000 f835 	bl	8000498 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000432:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000436:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000438:	2302      	movs	r3, #2
 800043a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800043c:	2303      	movs	r3, #3
 800043e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000440:	2301      	movs	r3, #1
 8000442:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000444:	230c      	movs	r3, #12
 8000446:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000448:	2307      	movs	r3, #7
 800044a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800044c:	2302      	movs	r3, #2
 800044e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000450:	2302      	movs	r3, #2
 8000452:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fab3 	bl	80019c4 <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000464:	f000 f818 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	230f      	movs	r3, #15
 800046a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2303      	movs	r3, #3
 800046e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	463b      	mov	r3, r7
 800047e:	2102      	movs	r1, #2
 8000480:	4618      	mov	r0, r3
 8000482:	f001 feb3 	bl	80021ec <HAL_RCC_ClockConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800048c:	f000 f804 	bl	8000498 <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3758      	adds	r7, #88	@ 0x58
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <HAL_MspInit+0x44>)
 80004ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <HAL_MspInit+0x44>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <HAL_MspInit+0x44>)
 80004b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <HAL_MspInit+0x44>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004c6:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <HAL_MspInit+0x44>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <HAL_MspInit+0x44>)
 80004d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <NMI_Handler+0x4>

080004f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <MemManage_Handler+0x4>

08000504 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <BusFault_Handler+0x4>

0800050c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <UsageFault_Handler+0x4>

08000514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000542:	f000 fbd7 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <DMA1_Channel3_IRQHandler+0x10>)
 8000552:	f000 ff7a 	bl	800144a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000009c 	.word	0x2000009c

08000560 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000564:	4802      	ldr	r0, [pc, #8]	@ (8000570 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000566:	f002 f8e5 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000050 	.word	0x20000050

08000574 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800057a:	f002 f8db 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000050 	.word	0x20000050

08000588 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800058c:	4802      	ldr	r0, [pc, #8]	@ (8000598 <TIM1_TRG_COM_IRQHandler+0x10>)
 800058e:	f002 f8d1 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000050 	.word	0x20000050

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	@ (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b09a      	sub	sp, #104	@ 0x68
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	222c      	movs	r2, #44	@ 0x2c
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fb09 	bl	8003c12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000600:	4b43      	ldr	r3, [pc, #268]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000602:	4a44      	ldr	r2, [pc, #272]	@ (8000714 <MX_TIM1_Init+0x154>)
 8000604:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000606:	4b42      	ldr	r3, [pc, #264]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <MX_TIM1_Init+0x150>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 8000612:	4b3f      	ldr	r3, [pc, #252]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000614:	223b      	movs	r2, #59	@ 0x3b
 8000616:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b3d      	ldr	r3, [pc, #244]	@ (8000710 <MX_TIM1_Init+0x150>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800061e:	4b3c      	ldr	r3, [pc, #240]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000624:	4b3a      	ldr	r3, [pc, #232]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800062a:	4839      	ldr	r0, [pc, #228]	@ (8000710 <MX_TIM1_Init+0x150>)
 800062c:	f001 ffca 	bl	80025c4 <HAL_TIM_Base_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000636:	f7ff ff2f 	bl	8000498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000640:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000644:	4619      	mov	r1, r3
 8000646:	4832      	ldr	r0, [pc, #200]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000648:	f002 fa90 	bl	8002b6c <HAL_TIM_ConfigClockSource>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000652:	f7ff ff21 	bl	8000498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000656:	482e      	ldr	r0, [pc, #184]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000658:	f002 f80b 	bl	8002672 <HAL_TIM_PWM_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000662:	f7ff ff19 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000672:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000676:	4619      	mov	r1, r3
 8000678:	4825      	ldr	r0, [pc, #148]	@ (8000710 <MX_TIM1_Init+0x150>)
 800067a:	f003 f92f 	bl	80038dc <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000684:	f7ff ff08 	bl	8000498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000688:	2370      	movs	r3, #112	@ 0x70
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000694:	2308      	movs	r3, #8
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80006a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006aa:	2204      	movs	r2, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4818      	ldr	r0, [pc, #96]	@ (8000710 <MX_TIM1_Init+0x150>)
 80006b0:	f002 f948 	bl	8002944 <HAL_TIM_PWM_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006ba:	f7ff feed 	bl	8000498 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4807      	ldr	r0, [pc, #28]	@ (8000710 <MX_TIM1_Init+0x150>)
 80006f4:	f003 f958 	bl	80039a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80006fe:	f7ff fecb 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <MX_TIM1_Init+0x150>)
 8000704:	f000 f86c 	bl	80007e0 <HAL_TIM_MspPostInit>

}
 8000708:	bf00      	nop
 800070a:	3768      	adds	r7, #104	@ 0x68
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000050 	.word	0x20000050
 8000714:	40012c00 	.word	0x40012c00

08000718 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a2a      	ldr	r2, [pc, #168]	@ (80007d0 <HAL_TIM_Base_MspInit+0xb8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d14e      	bne.n	80007c8 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <HAL_TIM_Base_MspInit+0xbc>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800072e:	4a29      	ldr	r2, [pc, #164]	@ (80007d4 <HAL_TIM_Base_MspInit+0xbc>)
 8000730:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000734:	6613      	str	r3, [r2, #96]	@ 0x60
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <HAL_TIM_Base_MspInit+0xbc>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8000742:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000744:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <HAL_TIM_Base_MspInit+0xc4>)
 8000746:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 800074a:	2207      	movs	r2, #7
 800074c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000750:	2210      	movs	r2, #16
 8000752:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 800075c:	2280      	movs	r2, #128	@ 0x80
 800075e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000766:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000776:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800077a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800077c:	4816      	ldr	r0, [pc, #88]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 800077e:	f000 fd0b 	bl	8001198 <HAL_DMA_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000788:	f7ff fe86 	bl	8000498 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_TIM_Base_MspInit+0xc0>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2018      	movs	r0, #24
 800079e:	f000 fcc4 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80007a2:	2018      	movs	r0, #24
 80007a4:	f000 fcdd 	bl	8001162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2019      	movs	r0, #25
 80007ae:	f000 fcbc 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80007b2:	2019      	movs	r0, #25
 80007b4:	f000 fcd5 	bl	8001162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	201a      	movs	r0, #26
 80007be:	f000 fcb4 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80007c2:	201a      	movs	r0, #26
 80007c4:	f000 fccd 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40012c00 	.word	0x40012c00
 80007d4:	40021000 	.word	0x40021000
 80007d8:	2000009c 	.word	0x2000009c
 80007dc:	40020030 	.word	0x40020030

080007e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a11      	ldr	r2, [pc, #68]	@ (8000844 <HAL_TIM_MspPostInit+0x64>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d11b      	bne.n	800083a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <HAL_TIM_MspPostInit+0x68>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <HAL_TIM_MspPostInit+0x68>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <HAL_TIM_MspPostInit+0x68>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081a:	2301      	movs	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <HAL_TIM_MspPostInit+0x6c>)
 8000836:	f000 fee7 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40021000 	.word	0x40021000
 800084c:	48000400 	.word	0x48000400

08000850 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * NUM_PIXELS * 8)
uint8_t wr_buf[WR_BUF_LEN];
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	fb02 f303 	mul.w	r3, r2, r3
 8000868:	121b      	asrs	r3, r3, #8
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	4611      	mov	r1, r2
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	4603      	mov	r3, r0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	717b      	strb	r3, [r7, #5]
 8000892:	4613      	mov	r3, r2
 8000894:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8000896:	79fa      	ldrb	r2, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	189c      	adds	r4, r3, r2
 800089e:	797b      	ldrb	r3, [r7, #5]
 80008a0:	21b0      	movs	r1, #176	@ 0xb0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffd4 	bl	8000850 <scale8>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <led_set_RGB+0x6c>)
 80008ae:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	3301      	adds	r3, #1
 80008ba:	490a      	ldr	r1, [pc, #40]	@ (80008e4 <led_set_RGB+0x6c>)
 80008bc:	79ba      	ldrb	r2, [r7, #6]
 80008be:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	1c9c      	adds	r4, r3, #2
 80008ca:	793b      	ldrb	r3, [r7, #4]
 80008cc:	21f0      	movs	r1, #240	@ 0xf0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ffbe 	bl	8000850 <scale8>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b02      	ldr	r3, [pc, #8]	@ (80008e4 <led_set_RGB+0x6c>)
 80008da:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	200000e4 	.word	0x200000e4

080008e8 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	e069      	b.n	80009c8 <led_render+0xe0>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80008f4:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <led_render+0xfc>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000904:	2b00      	cmp	r3, #0
 8000906:	dd01      	ble.n	800090c <led_render+0x24>
 8000908:	2126      	movs	r1, #38	@ 0x26
 800090a:	e000      	b.n	800090e <led_render+0x26>
 800090c:	2113      	movs	r1, #19
 800090e:	4a36      	ldr	r2, [pc, #216]	@ (80009e8 <led_render+0x100>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	460a      	mov	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8000918:	4b32      	ldr	r3, [pc, #200]	@ (80009e4 <led_render+0xfc>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd01      	ble.n	8000930 <led_render+0x48>
 800092c:	2126      	movs	r1, #38	@ 0x26
 800092e:	e000      	b.n	8000932 <led_render+0x4a>
 8000930:	2113      	movs	r1, #19
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3308      	adds	r3, #8
 8000936:	4a2c      	ldr	r2, [pc, #176]	@ (80009e8 <led_render+0x100>)
 8000938:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800093a:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <led_render+0xfc>)
 800093c:	789b      	ldrb	r3, [r3, #2]
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	2b00      	cmp	r3, #0
 800094c:	dd01      	ble.n	8000952 <led_render+0x6a>
 800094e:	2126      	movs	r1, #38	@ 0x26
 8000950:	e000      	b.n	8000954 <led_render+0x6c>
 8000952:	2113      	movs	r1, #19
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3310      	adds	r3, #16
 8000958:	4a23      	ldr	r2, [pc, #140]	@ (80009e8 <led_render+0x100>)
 800095a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <led_render+0xfc>)
 800095e:	78db      	ldrb	r3, [r3, #3]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096c:	2b00      	cmp	r3, #0
 800096e:	dd01      	ble.n	8000974 <led_render+0x8c>
 8000970:	2126      	movs	r1, #38	@ 0x26
 8000972:	e000      	b.n	8000976 <led_render+0x8e>
 8000974:	2113      	movs	r1, #19
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3318      	adds	r3, #24
 800097a:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <led_render+0x100>)
 800097c:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <led_render+0xfc>)
 8000980:	791b      	ldrb	r3, [r3, #4]
 8000982:	461a      	mov	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	2b00      	cmp	r3, #0
 8000990:	dd01      	ble.n	8000996 <led_render+0xae>
 8000992:	2126      	movs	r1, #38	@ 0x26
 8000994:	e000      	b.n	8000998 <led_render+0xb0>
 8000996:	2113      	movs	r1, #19
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3320      	adds	r3, #32
 800099c:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <led_render+0x100>)
 800099e:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <led_render+0xfc>)
 80009a2:	795b      	ldrb	r3, [r3, #5]
 80009a4:	461a      	mov	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	dd01      	ble.n	80009b8 <led_render+0xd0>
 80009b4:	2126      	movs	r1, #38	@ 0x26
 80009b6:	e000      	b.n	80009ba <led_render+0xd2>
 80009b8:	2113      	movs	r1, #19
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3328      	adds	r3, #40	@ 0x28
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <led_render+0x100>)
 80009c0:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d992      	bls.n	80008f4 <led_render+0xc>
  }
#endif // End SK6812 WS2812B case differentiation

  HAL_TIMEx_PWMN_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)wr_buf, WR_BUF_LEN);
 80009ce:	2348      	movs	r3, #72	@ 0x48
 80009d0:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <led_render+0x100>)
 80009d2:	2104      	movs	r1, #4
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <led_render+0x104>)
 80009d6:	f002 fd81 	bl	80034dc <HAL_TIMEx_PWMN_Start_DMA>
//  wr_buf_p = 2; // Since we're ready for the next buffer
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000e4 	.word	0x200000e4
 80009e8:	200000f0 	.word	0x200000f0
 80009ec:	20000050 	.word	0x20000050

080009f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80009f8:	4b39      	ldr	r3, [pc, #228]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d853      	bhi.n	8000aa8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e047      	b.n	8000a96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8000a06:	4b36      	ldr	r3, [pc, #216]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a34      	ldr	r2, [pc, #208]	@ (8000ae4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	461a      	mov	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dd01      	ble.n	8000a28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8000a24:	2126      	movs	r1, #38	@ 0x26
 8000a26:	e000      	b.n	8000a2a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8000a28:	2113      	movs	r1, #19
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	460a      	mov	r2, r1
 8000a32:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8000a34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a28      	ldr	r2, [pc, #160]	@ (8000ae4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	dd01      	ble.n	8000a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8000a54:	2126      	movs	r1, #38	@ 0x26
 8000a56:	e000      	b.n	8000a5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8000a58:	2113      	movs	r1, #19
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3308      	adds	r3, #8
 8000a5e:	4a22      	ldr	r2, [pc, #136]	@ (8000ae8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8000a60:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8000a62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dd01      	ble.n	8000a86 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8000a82:	2126      	movs	r1, #38	@ 0x26
 8000a84:	e000      	b.n	8000a88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8000a86:	2113      	movs	r1, #19
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3310      	adds	r3, #16
 8000a8c:	4a16      	ldr	r2, [pc, #88]	@ (8000ae8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8000a8e:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b07      	cmp	r3, #7
 8000a9a:	d9b4      	bls.n	8000a06 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000aa4:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8000aa6:	e015      	b.n	8000ad4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d811      	bhi.n	8000ad4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	72fb      	strb	r3, [r7, #11]
 8000ab4:	e006      	b.n	8000ac4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 8000ab6:	7afb      	ldrb	r3, [r7, #11]
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	54d1      	strb	r1, [r2, r3]
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	72fb      	strb	r3, [r7, #11]
 8000ac4:	7afb      	ldrb	r3, [r7, #11]
 8000ac6:	2b23      	cmp	r3, #35	@ 0x23
 8000ac8:	d9f5      	bls.n	8000ab6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 8000aca:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a03      	ldr	r2, [pc, #12]	@ (8000ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	20000138 	.word	0x20000138
 8000ae4:	200000e4 	.word	0x200000e4
 8000ae8:	200000f0 	.word	0x200000f0

08000aec <HAL_TIM_PWM_PulseFinishedCallback>:
//
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8000af4:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d852      	bhi.n	8000ba2 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e046      	b.n	8000b90 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8000b02:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a37      	ldr	r2, [pc, #220]	@ (8000bec <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	461a      	mov	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dd01      	ble.n	8000b24 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8000b20:	2126      	movs	r1, #38	@ 0x26
 8000b22:	e000      	b.n	8000b26 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8000b24:	2113      	movs	r1, #19
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3318      	adds	r3, #24
 8000b2a:	4a31      	ldr	r2, [pc, #196]	@ (8000bf0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000b2c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000bec <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd01      	ble.n	8000b52 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8000b4e:	2126      	movs	r1, #38	@ 0x26
 8000b50:	e000      	b.n	8000b54 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8000b52:	2113      	movs	r1, #19
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3320      	adds	r3, #32
 8000b58:	4a25      	ldr	r2, [pc, #148]	@ (8000bf0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000b5a:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	3302      	adds	r3, #2
 8000b68:	4a20      	ldr	r2, [pc, #128]	@ (8000bec <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dd01      	ble.n	8000b80 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8000b7c:	2126      	movs	r1, #38	@ 0x26
 8000b7e:	e000      	b.n	8000b82 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8000b80:	2113      	movs	r1, #19
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3328      	adds	r3, #40	@ 0x28
 8000b86:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000b88:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d9b5      	bls.n	8000b02 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000b9e:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIMEx_PWMN_Stop_DMA(&htim1, TIM_CHANNEL_2);
  }
}
 8000ba0:	e01d      	b.n	8000bde <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d812      	bhi.n	8000bd0 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8000baa:	2324      	movs	r3, #36	@ 0x24
 8000bac:	72fb      	strb	r3, [r7, #11]
 8000bae:	e006      	b.n	8000bbe <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8000bb0:	7afb      	ldrb	r3, [r7, #11]
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	54d1      	strb	r1, [r2, r3]
 8000bb8:	7afb      	ldrb	r3, [r7, #11]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	72fb      	strb	r3, [r7, #11]
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	2b47      	cmp	r3, #71	@ 0x47
 8000bc2:	d9f5      	bls.n	8000bb0 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000bcc:	6013      	str	r3, [r2, #0]
}
 8000bce:	e006      	b.n	8000bde <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
    HAL_TIMEx_PWMN_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8000bda:	f002 fde3 	bl	80037a4 <HAL_TIMEx_PWMN_Stop_DMA>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000138 	.word	0x20000138
 8000bec:	200000e4 	.word	0x200000e4
 8000bf0:	200000f0 	.word	0x200000f0
 8000bf4:	20000050 	.word	0x20000050

08000bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bfc:	f7ff fcce 	bl	800059c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c26:	f002 fffd 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2a:	f7ff fb89 	bl	8000340 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c3c:	08003ccc 	.word	0x08003ccc
  ldr r2, =_sbss
 8000c40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c44:	20000140 	.word	0x20000140

08000c48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_IRQHandler>

08000c4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 fa5d 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f80e 	bl	8000c7c <HAL_InitTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	e001      	b.n	8000c70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c6c:	f7ff fc1a 	bl	80004a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <HAL_InitTick+0x6c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d023      	beq.n	8000cd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <HAL_InitTick+0x70>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <HAL_InitTick+0x6c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fa69 	bl	800117e <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10f      	bne.n	8000cd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d809      	bhi.n	8000ccc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 fa33 	bl	800112a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <HAL_InitTick+0x74>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e007      	b.n	8000cdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e004      	b.n	8000cdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e001      	b.n	8000cdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	2000013c 	.word	0x2000013c

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2000013c 	.word	0x2000013c

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff ffee 	bl	8000d1c <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4c:	d005      	beq.n	8000d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_Delay+0x44>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4413      	add	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5a:	bf00      	nop
 8000d5c:	f7ff ffde 	bl	8000d1c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d8f7      	bhi.n	8000d5c <HAL_Delay+0x28>
  {
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008

08000d7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e0ed      	b.n	8000f6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fa4a 	bl	8000234 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0201 	orr.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000db0:	f7ff ffb4 	bl	8000d1c <HAL_GetTick>
 8000db4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db6:	e012      	b.n	8000dde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db8:	f7ff ffb0 	bl	8000d1c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b0a      	cmp	r3, #10
 8000dc4:	d90b      	bls.n	8000dde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2205      	movs	r2, #5
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e0c5      	b.n	8000f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0e5      	beq.n	8000db8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0202 	bic.w	r2, r2, #2
 8000dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfc:	f7ff ff8e 	bl	8000d1c <HAL_GetTick>
 8000e00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e02:	e012      	b.n	8000e2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e04:	f7ff ff8a 	bl	8000d1c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b0a      	cmp	r3, #10
 8000e10:	d90b      	bls.n	8000e2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2205      	movs	r2, #5
 8000e22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e09f      	b.n	8000f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e5      	bne.n	8000e04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7e1b      	ldrb	r3, [r3, #24]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d108      	bne.n	8000e52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e007      	b.n	8000e62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7e5b      	ldrb	r3, [r3, #25]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d108      	bne.n	8000e7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e007      	b.n	8000e8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e9b      	ldrb	r3, [r3, #26]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d108      	bne.n	8000ea6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0220 	orr.w	r2, r2, #32
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e007      	b.n	8000eb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0220 	bic.w	r2, r2, #32
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7edb      	ldrb	r3, [r3, #27]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d108      	bne.n	8000ed0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0210 	bic.w	r2, r2, #16
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e007      	b.n	8000ee0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0210 	orr.w	r2, r2, #16
 8000ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7f1b      	ldrb	r3, [r3, #28]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d108      	bne.n	8000efa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0208 	orr.w	r2, r2, #8
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e007      	b.n	8000f0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0208 	bic.w	r2, r2, #8
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7f5b      	ldrb	r3, [r3, #29]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d108      	bne.n	8000f24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0204 	orr.w	r2, r2, #4
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e007      	b.n	8000f34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0204 	bic.w	r2, r2, #4
 8000f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	ea42 0103 	orr.w	r1, r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	@ (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	@ (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	@ (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	@ 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e098      	b.n	80012dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <HAL_DMA_Init+0x150>)
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d80f      	bhi.n	80011d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b4b      	ldr	r3, [pc, #300]	@ (80012ec <HAL_DMA_Init+0x154>)
 80011be:	4413      	add	r3, r2
 80011c0:	4a4b      	ldr	r2, [pc, #300]	@ (80012f0 <HAL_DMA_Init+0x158>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	009a      	lsls	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a48      	ldr	r2, [pc, #288]	@ (80012f4 <HAL_DMA_Init+0x15c>)
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80011d4:	e00e      	b.n	80011f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b46      	ldr	r3, [pc, #280]	@ (80012f8 <HAL_DMA_Init+0x160>)
 80011de:	4413      	add	r3, r2
 80011e0:	4a43      	ldr	r2, [pc, #268]	@ (80012f0 <HAL_DMA_Init+0x158>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	009a      	lsls	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a42      	ldr	r2, [pc, #264]	@ (80012fc <HAL_DMA_Init+0x164>)
 80011f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800120a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800120e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800124e:	d039      	beq.n	80012c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <HAL_DMA_Init+0x15c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d11a      	bne.n	8001290 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800125a:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <HAL_DMA_Init+0x168>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	f003 031c 	and.w	r3, r3, #28
 8001266:	210f      	movs	r1, #15
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	4924      	ldr	r1, [pc, #144]	@ (8001300 <HAL_DMA_Init+0x168>)
 8001270:	4013      	ands	r3, r2
 8001272:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <HAL_DMA_Init+0x168>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001280:	f003 031c 	and.w	r3, r3, #28
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	491d      	ldr	r1, [pc, #116]	@ (8001300 <HAL_DMA_Init+0x168>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
 800128e:	e019      	b.n	80012c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001290:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <HAL_DMA_Init+0x16c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001298:	f003 031c 	and.w	r3, r3, #28
 800129c:	210f      	movs	r1, #15
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	4917      	ldr	r1, [pc, #92]	@ (8001304 <HAL_DMA_Init+0x16c>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <HAL_DMA_Init+0x16c>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6859      	ldr	r1, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f003 031c 	and.w	r3, r3, #28
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	4911      	ldr	r1, [pc, #68]	@ (8001304 <HAL_DMA_Init+0x16c>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40020407 	.word	0x40020407
 80012ec:	bffdfff8 	.word	0xbffdfff8
 80012f0:	cccccccd 	.word	0xcccccccd
 80012f4:	40020000 	.word	0x40020000
 80012f8:	bffdfbf8 	.word	0xbffdfbf8
 80012fc:	40020400 	.word	0x40020400
 8001300:	400200a8 	.word	0x400200a8
 8001304:	400204a8 	.word	0x400204a8

08001308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_DMA_Start_IT+0x20>
 8001324:	2302      	movs	r3, #2
 8001326:	e04b      	b.n	80013c0 <HAL_DMA_Start_IT+0xb8>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d13a      	bne.n	80013b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f921 	bl	80015a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 020e 	orr.w	r2, r2, #14
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00f      	b.n	80013a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 020a 	orr.w	r2, r2, #10
 800139e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e005      	b.n	80013be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80013ba:	2302      	movs	r3, #2
 80013bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80013be:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d005      	beq.n	80013ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e029      	b.n	8001440 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 020e 	bic.w	r2, r2, #14
 80013fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	f003 021c 	and.w	r2, r3, #28
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
    }
  }
  return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f003 031c 	and.w	r3, r3, #28
 800146a:	2204      	movs	r2, #4
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d026      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x7a>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d021      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0204 	bic.w	r2, r2, #4
 800149c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f003 021c 	and.w	r2, r3, #28
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	2104      	movs	r1, #4
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d071      	beq.n	800159e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014c2:	e06c      	b.n	800159e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	2202      	movs	r2, #2
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d02e      	beq.n	8001536 <HAL_DMA_IRQHandler+0xec>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d029      	beq.n	8001536 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10b      	bne.n	8001508 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020a 	bic.w	r2, r2, #10
 80014fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150c:	f003 021c 	and.w	r2, r3, #28
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	2102      	movs	r1, #2
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d038      	beq.n	800159e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001534:	e033      	b.n	800159e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f003 031c 	and.w	r3, r3, #28
 800153e:	2208      	movs	r2, #8
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d02a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x156>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d025      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001568:	f003 021c 	and.w	r2, r3, #28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f202 	lsl.w	r2, r1, r2
 8001576:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
}
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f003 021c 	and.w	r2, r3, #28
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d108      	bne.n	80015ec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015ea:	e007      	b.n	80015fc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	60da      	str	r2, [r3, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	e154      	b.n	80018c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8146 	beq.w	80018bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d005      	beq.n	8001648 <HAL_GPIO_Init+0x40>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d130      	bne.n	80016aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167e:	2201      	movs	r2, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 0201 	and.w	r2, r3, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d017      	beq.n	80016e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d123      	bne.n	800173a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	6939      	ldr	r1, [r7, #16]
 8001736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0203 	and.w	r2, r3, #3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80a0 	beq.w	80018bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <HAL_GPIO_Init+0x2d8>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001780:	4a57      	ldr	r2, [pc, #348]	@ (80018e0 <HAL_GPIO_Init+0x2d8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6613      	str	r3, [r2, #96]	@ 0x60
 8001788:	4b55      	ldr	r3, [pc, #340]	@ (80018e0 <HAL_GPIO_Init+0x2d8>)
 800178a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001794:	4a53      	ldr	r2, [pc, #332]	@ (80018e4 <HAL_GPIO_Init+0x2dc>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017be:	d019      	beq.n	80017f4 <HAL_GPIO_Init+0x1ec>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a49      	ldr	r2, [pc, #292]	@ (80018e8 <HAL_GPIO_Init+0x2e0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_GPIO_Init+0x1e8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a48      	ldr	r2, [pc, #288]	@ (80018ec <HAL_GPIO_Init+0x2e4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00d      	beq.n	80017ec <HAL_GPIO_Init+0x1e4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a47      	ldr	r2, [pc, #284]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x1e0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a46      	ldr	r2, [pc, #280]	@ (80018f4 <HAL_GPIO_Init+0x2ec>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_GPIO_Init+0x1dc>
 80017e0:	2304      	movs	r3, #4
 80017e2:	e008      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017e4:	2307      	movs	r3, #7
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017e8:	2303      	movs	r3, #3
 80017ea:	e004      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017f4:	2300      	movs	r3, #0
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	f002 0203 	and.w	r2, r2, #3
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	4093      	lsls	r3, r2
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001806:	4937      	ldr	r1, [pc, #220]	@ (80018e4 <HAL_GPIO_Init+0x2dc>)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001814:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001838:	4a2f      	ldr	r2, [pc, #188]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001862:	4a25      	ldr	r2, [pc, #148]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188c:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b6:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f47f aea3 	bne.w	8001618 <HAL_GPIO_Init+0x10>
  }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	48000400 	.word	0x48000400
 80018ec:	48000800 	.word	0x48000800
 80018f0:	48000c00 	.word	0x48000c00
 80018f4:	48001000 	.word	0x48001000
 80018f8:	40010400 	.word	0x40010400

080018fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <HAL_PWREx_GetVoltageRange+0x18>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000

08001918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001926:	d130      	bne.n	800198a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001928:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001934:	d038      	beq.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800193e:	4a1e      	ldr	r2, [pc, #120]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001940:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2232      	movs	r2, #50	@ 0x32
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195c:	e002      	b.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3b01      	subs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001970:	d102      	bne.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f2      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001984:	d110      	bne.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e00f      	b.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001996:	d007      	beq.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019a0:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40007000 	.word	0x40007000
 80019bc:	20000000 	.word	0x20000000
 80019c0:	431bde83 	.word	0x431bde83

080019c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f000 bc02 	b.w	80021dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d8:	4b96      	ldr	r3, [pc, #600]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e2:	4b94      	ldr	r3, [pc, #592]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80e4 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4c>
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	f040 808b 	bne.w	8001b1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	f040 8087 	bne.w	8001b1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a10:	4b88      	ldr	r3, [pc, #544]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x64>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e3d9      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1a      	ldr	r2, [r3, #32]
 8001a2c:	4b81      	ldr	r3, [pc, #516]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_RCC_OscConfig+0x7e>
 8001a38:	4b7e      	ldr	r3, [pc, #504]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a40:	e005      	b.n	8001a4e <HAL_RCC_OscConfig+0x8a>
 8001a42:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d223      	bcs.n	8001a9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fd54 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e3ba      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a66:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a72      	ldr	r2, [pc, #456]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b70      	ldr	r3, [pc, #448]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	496d      	ldr	r1, [pc, #436]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a84:	4b6b      	ldr	r3, [pc, #428]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	4968      	ldr	r1, [pc, #416]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	e025      	b.n	8001ae6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9a:	4b66      	ldr	r3, [pc, #408]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a65      	ldr	r2, [pc, #404]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b63      	ldr	r3, [pc, #396]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4960      	ldr	r1, [pc, #384]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	495b      	ldr	r1, [pc, #364]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd14 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e37a      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae6:	f000 fc81 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b51      	ldr	r3, [pc, #324]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	4950      	ldr	r1, [pc, #320]	@ (8001c38 <HAL_RCC_OscConfig+0x274>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a4e      	ldr	r2, [pc, #312]	@ (8001c3c <HAL_RCC_OscConfig+0x278>)
 8001b04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b06:	4b4e      	ldr	r3, [pc, #312]	@ (8001c40 <HAL_RCC_OscConfig+0x27c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f8b6 	bl	8000c7c <HAL_InitTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d052      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	e35e      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d032      	beq.n	8001b8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b26:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b32:	f7ff f8f3 	bl	8000d1c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f8ef 	bl	8000d1c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e347      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4c:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b58:	4b36      	ldr	r3, [pc, #216]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a35      	ldr	r2, [pc, #212]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b33      	ldr	r3, [pc, #204]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4930      	ldr	r1, [pc, #192]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b76:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	492b      	ldr	r1, [pc, #172]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e01a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b8c:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f8c0 	bl	8000d1c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba0:	f7ff f8bc 	bl	8000d1c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e314      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1dc>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d073      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x21c>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d063      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d15f      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e2f1      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x24c>
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e025      	b.n	8001c5c <HAL_RCC_OscConfig+0x298>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c18:	d114      	bne.n	8001c44 <HAL_RCC_OscConfig+0x280>
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a02      	ldr	r2, [pc, #8]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x298>
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08003c84 	.word	0x08003c84
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004
 8001c44:	4ba0      	ldr	r3, [pc, #640]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a9f      	ldr	r2, [pc, #636]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b9d      	ldr	r3, [pc, #628]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a9c      	ldr	r2, [pc, #624]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f85a 	bl	8000d1c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f856 	bl	8000d1c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e2ae      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	4b92      	ldr	r3, [pc, #584]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x2a8>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f846 	bl	8000d1c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff f842 	bl	8000d1c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e29a      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca6:	4b88      	ldr	r3, [pc, #544]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2d0>
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d060      	beq.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x310>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d116      	bne.n	8001d02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x328>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e277      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	4973      	ldr	r1, [pc, #460]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	e040      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d023      	beq.n	8001d52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff f801 	bl	8000d1c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7fe fffd 	bl	8000d1c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e255      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	4b65      	ldr	r3, [pc, #404]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b62      	ldr	r3, [pc, #392]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	495f      	ldr	r1, [pc, #380]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7fe ffdd 	bl	8000d1c <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d66:	f7fe ffd9 	bl	8000d1c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e231      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d03c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d98:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7fe ffb8 	bl	8000d1c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7fe ffb4 	bl	8000d1c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e20c      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ef      	beq.n	8001db0 <HAL_RCC_OscConfig+0x3ec>
 8001dd0:	e01b      	b.n	8001e0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7fe ff9b 	bl	8000d1c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dea:	f7fe ff97 	bl	8000d1c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1ef      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfc:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ef      	bne.n	8001dea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a6 	beq.w	8001f64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e28:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e34:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e40:	2301      	movs	r3, #1
 8001e42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d118      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5c:	f7fe ff5e 	bl	8000d1c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e64:	f7fe ff5a 	bl	8000d1c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1b2      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4d8>
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9a:	e029      	b.n	8001ef0 <HAL_RCC_OscConfig+0x52c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d115      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x50c>
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	4a03      	ldr	r2, [pc, #12]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x52c>
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	4b9a      	ldr	r3, [pc, #616]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed6:	4a99      	ldr	r2, [pc, #612]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee0:	4b96      	ldr	r3, [pc, #600]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	4a95      	ldr	r2, [pc, #596]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d016      	beq.n	8001f26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7fe ff10 	bl	8000d1c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff0c 	bl	8000d1c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e162      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f16:	4b89      	ldr	r3, [pc, #548]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ed      	beq.n	8001f00 <HAL_RCC_OscConfig+0x53c>
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7fe fef9 	bl	8000d1c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7fe fef5 	bl	8000d1c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e14b      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f44:	4b7d      	ldr	r3, [pc, #500]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ed      	bne.n	8001f2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b78      	ldr	r3, [pc, #480]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	4a77      	ldr	r2, [pc, #476]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03c      	beq.n	8001fea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f78:	4b70      	ldr	r3, [pc, #448]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe fec8 	bl	8000d1c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f90:	f7fe fec4 	bl	8000d1c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e11c      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fa2:	4b66      	ldr	r3, [pc, #408]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ef      	beq.n	8001f90 <HAL_RCC_OscConfig+0x5cc>
 8001fb0:	e01b      	b.n	8001fea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fb2:	4b62      	ldr	r3, [pc, #392]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fb8:	4a60      	ldr	r2, [pc, #384]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7fe feab 	bl	8000d1c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fca:	f7fe fea7 	bl	8000d1c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0ff      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fdc:	4b57      	ldr	r3, [pc, #348]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8001fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ef      	bne.n	8001fca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80f3 	beq.w	80021da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	f040 80c9 	bne.w	8002190 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0203 	and.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	429a      	cmp	r2, r3
 8002010:	d12c      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	3b01      	subs	r3, #1
 800201e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d123      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d11b      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d113      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d109      	bne.n	800206c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d06b      	beq.n	8002144 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d062      	beq.n	8002138 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002072:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0ac      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002082:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2d      	ldr	r2, [pc, #180]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800208c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208e:	f7fe fe45 	bl	8000d1c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7fe fe41 	bl	8000d1c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e099      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_OscConfig+0x77c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020c4:	3a01      	subs	r2, #1
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	4311      	orrs	r1, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ce:	0212      	lsls	r2, r2, #8
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020d6:	0852      	lsrs	r2, r2, #1
 80020d8:	3a01      	subs	r2, #1
 80020da:	0552      	lsls	r2, r2, #21
 80020dc:	4311      	orrs	r1, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020e2:	0852      	lsrs	r2, r2, #1
 80020e4:	3a01      	subs	r2, #1
 80020e6:	0652      	lsls	r2, r2, #25
 80020e8:	4311      	orrs	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020ee:	06d2      	lsls	r2, r2, #27
 80020f0:	430a      	orrs	r2, r1
 80020f2:	4912      	ldr	r1, [pc, #72]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7fe fe04 	bl	8000d1c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fe00 	bl	8000d1c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e058      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b04      	ldr	r3, [pc, #16]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002136:	e050      	b.n	80021da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e04f      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
 800213c:	40021000 	.word	0x40021000
 8002140:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002144:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d144      	bne.n	80021da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002150:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a20      	ldr	r2, [pc, #128]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002168:	f7fe fdd8 	bl	8000d1c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7fe fdd4 	bl	8000d1c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e02c      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x7ac>
 800218e:	e024      	b.n	80021da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d01f      	beq.n	80021d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 800219c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7fe fdbb 	bl	8000d1c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7fe fdb7 	bl	8000d1c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4905      	ldr	r1, [pc, #20]	@ (80021e4 <HAL_RCC_OscConfig+0x820>)
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x824>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
 80021d4:	e001      	b.n	80021da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	feeefffc 	.word	0xfeeefffc

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0e7      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b72      	ldr	r3, [pc, #456]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4970      	ldr	r1, [pc, #448]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b6e      	ldr	r3, [pc, #440]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0cf      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002248:	429a      	cmp	r2, r3
 800224a:	d908      	bls.n	800225e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4960      	ldr	r1, [pc, #384]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d04c      	beq.n	8002304 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b5a      	ldr	r3, [pc, #360]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0a6      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09a      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a2:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e086      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b46      	ldr	r3, [pc, #280]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4943      	ldr	r1, [pc, #268]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe fd22 	bl	8000d1c <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fd1e 	bl	8000d1c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e06e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b2e      	ldr	r3, [pc, #184]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	492b      	ldr	r1, [pc, #172]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002332:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d210      	bcs.n	8002362 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 0207 	bic.w	r2, r3, #7
 8002348:	4923      	ldr	r1, [pc, #140]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002350:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e036      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4918      	ldr	r1, [pc, #96]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4910      	ldr	r1, [pc, #64]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a0:	f000 f824 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	490b      	ldr	r1, [pc, #44]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f4>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_ClockConfig+0x1fc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fc59 	bl	8000c7c <HAL_InitTick>
 80023ca:	4603      	mov	r3, r0
 80023cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ce:	7afb      	ldrb	r3, [r7, #11]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08003c84 	.word	0x08003c84
 80023e4:	20000000 	.word	0x20000000
 80023e8:	20000004 	.word	0x20000004

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b3e      	ldr	r3, [pc, #248]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002404:	4b3b      	ldr	r3, [pc, #236]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x34>
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d121      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d11e      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800243c:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002448:	4a2b      	ldr	r2, [pc, #172]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d102      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002464:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e004      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d101      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 8002472:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d134      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0xa6>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d003      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xac>
 8002490:	e005      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002492:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	3301      	adds	r3, #1
 80024b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	fb03 f202 	mul.w	r2, r3, r2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	0e5b      	lsrs	r3, r3, #25
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	3301      	adds	r3, #1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024e4:	69bb      	ldr	r3, [r7, #24]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08003c94 	.word	0x08003c94
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002510:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800251c:	f7ff f9ee 	bl	80018fc <HAL_PWREx_GetVoltageRange>
 8002520:	6178      	str	r0, [r7, #20]
 8002522:	e014      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	4a24      	ldr	r2, [pc, #144]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002530:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800253c:	f7ff f9de 	bl	80018fc <HAL_PWREx_GetVoltageRange>
 8002540:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002554:	d10b      	bne.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d919      	bls.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002560:	d902      	bls.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002562:	2302      	movs	r3, #2
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e013      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002568:	2301      	movs	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e010      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	@ 0x80
 8002572:	d902      	bls.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002574:	2303      	movs	r3, #3
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e00a      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b80      	cmp	r3, #128	@ 0x80
 800257e:	d102      	bne.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002580:	2302      	movs	r3, #2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e004      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b70      	cmp	r3, #112	@ 0x70
 800258a:	d101      	bne.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800258c:	2301      	movs	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 0207 	bic.w	r2, r3, #7
 8002598:	4909      	ldr	r1, [pc, #36]	@ (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40022000 	.word	0x40022000

080025c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e049      	b.n	800266a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe f894 	bl	8000718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f000 fbe2 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e049      	b.n	8002718 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f841 	bl	8002720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f000 fb8b 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0202 	mvn.w	r2, #2
 8002768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fad1 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fac3 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe f9ad 	bl	8000aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0204 	mvn.w	r2, #4
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 faab 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa9d 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fe f987 	bl	8000aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa85 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa77 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe f961 	bl	8000aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0210 	mvn.w	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2208      	movs	r2, #8
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa5f 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa51 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f93b 	bl	8000aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0201 	mvn.w	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa2f 	bl	8002cfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80028c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f001 f8ef 	bl	8003aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80028ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f001 f8e7 	bl	8003ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00c      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa12 	bl	8002d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0220 	mvn.w	r2, #32
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f001 f8af 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800295e:	2302      	movs	r3, #2
 8002960:	e0ff      	b.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b14      	cmp	r3, #20
 800296e:	f200 80f0 	bhi.w	8002b52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002972:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029cd 	.word	0x080029cd
 800297c:	08002b53 	.word	0x08002b53
 8002980:	08002b53 	.word	0x08002b53
 8002984:	08002b53 	.word	0x08002b53
 8002988:	08002a0d 	.word	0x08002a0d
 800298c:	08002b53 	.word	0x08002b53
 8002990:	08002b53 	.word	0x08002b53
 8002994:	08002b53 	.word	0x08002b53
 8002998:	08002a4f 	.word	0x08002a4f
 800299c:	08002b53 	.word	0x08002b53
 80029a0:	08002b53 	.word	0x08002b53
 80029a4:	08002b53 	.word	0x08002b53
 80029a8:	08002a8f 	.word	0x08002a8f
 80029ac:	08002b53 	.word	0x08002b53
 80029b0:	08002b53 	.word	0x08002b53
 80029b4:	08002b53 	.word	0x08002b53
 80029b8:	08002ad1 	.word	0x08002ad1
 80029bc:	08002b53 	.word	0x08002b53
 80029c0:	08002b53 	.word	0x08002b53
 80029c4:	08002b53 	.word	0x08002b53
 80029c8:	08002b11 	.word	0x08002b11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fa6a 	bl	8002eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6999      	ldr	r1, [r3, #24]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	619a      	str	r2, [r3, #24]
      break;
 8002a0a:	e0a5      	b.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fac6 	bl	8002fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6999      	ldr	r1, [r3, #24]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	619a      	str	r2, [r3, #24]
      break;
 8002a4c:	e084      	b.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fb1f 	bl	8003098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0208 	orr.w	r2, r2, #8
 8002a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0204 	bic.w	r2, r2, #4
 8002a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	61da      	str	r2, [r3, #28]
      break;
 8002a8c:	e064      	b.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fb77 	bl	8003188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	021a      	lsls	r2, r3, #8
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	61da      	str	r2, [r3, #28]
      break;
 8002ace:	e043      	b.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fbb4 	bl	8003244 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b0e:	e023      	b.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fbec 	bl	80032f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b50:	e002      	b.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
      break;
 8002b56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop

08002b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIM_ConfigClockSource+0x1c>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0b6      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x18a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bc4:	d03e      	beq.n	8002c44 <HAL_TIM_ConfigClockSource+0xd8>
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bca:	f200 8087 	bhi.w	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd2:	f000 8086 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x176>
 8002bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bda:	d87f      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002bdc:	2b70      	cmp	r3, #112	@ 0x70
 8002bde:	d01a      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0xaa>
 8002be0:	2b70      	cmp	r3, #112	@ 0x70
 8002be2:	d87b      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002be4:	2b60      	cmp	r3, #96	@ 0x60
 8002be6:	d050      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x11e>
 8002be8:	2b60      	cmp	r3, #96	@ 0x60
 8002bea:	d877      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002bec:	2b50      	cmp	r3, #80	@ 0x50
 8002bee:	d03c      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0xfe>
 8002bf0:	2b50      	cmp	r3, #80	@ 0x50
 8002bf2:	d873      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002bf4:	2b40      	cmp	r3, #64	@ 0x40
 8002bf6:	d058      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x13e>
 8002bf8:	2b40      	cmp	r3, #64	@ 0x40
 8002bfa:	d86f      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002bfc:	2b30      	cmp	r3, #48	@ 0x30
 8002bfe:	d064      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x15e>
 8002c00:	2b30      	cmp	r3, #48	@ 0x30
 8002c02:	d86b      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d060      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x15e>
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d867      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d05c      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x15e>
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d05a      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x15e>
 8002c14:	e062      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c26:	f000 fc39 	bl	800349c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	609a      	str	r2, [r3, #8]
      break;
 8002c42:	e04f      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c54:	f000 fc22 	bl	800349c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c66:	609a      	str	r2, [r3, #8]
      break;
 8002c68:	e03c      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 fb96 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2150      	movs	r1, #80	@ 0x50
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fbef 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002c88:	e02c      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c96:	461a      	mov	r2, r3
 8002c98:	f000 fbb5 	bl	8003406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2160      	movs	r1, #96	@ 0x60
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fbdf 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e01c      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f000 fb76 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2140      	movs	r1, #64	@ 0x40
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fbcf 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002cc8:	e00c      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f000 fbc6 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002cda:	e003      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce0:	e000      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d103      	bne.n	8002d82 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	771a      	strb	r2, [r3, #28]
 8002d80:	e019      	b.n	8002db6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d103      	bne.n	8002d94 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	771a      	strb	r2, [r3, #28]
 8002d92:	e010      	b.n	8002db6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d103      	bne.n	8002da6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2204      	movs	r2, #4
 8002da2:	771a      	strb	r2, [r3, #28]
 8002da4:	e007      	b.n	8002db6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d102      	bne.n	8002db6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2208      	movs	r2, #8
 8002db4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7fd fe1a 	bl	80009f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	771a      	strb	r2, [r3, #28]
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a30      	ldr	r2, [pc, #192]	@ (8002ea0 <TIM_Base_SetConfig+0xd4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0x20>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dea:	d108      	bne.n	8002dfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a27      	ldr	r2, [pc, #156]	@ (8002ea0 <TIM_Base_SetConfig+0xd4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <TIM_Base_SetConfig+0x52>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0c:	d007      	beq.n	8002e1e <TIM_Base_SetConfig+0x52>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <TIM_Base_SetConfig+0xd8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_Base_SetConfig+0x52>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <TIM_Base_SetConfig+0xdc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a12      	ldr	r2, [pc, #72]	@ (8002ea0 <TIM_Base_SetConfig+0xd4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <TIM_Base_SetConfig+0xa0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ea4 <TIM_Base_SetConfig+0xd8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0xa0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a10      	ldr	r2, [pc, #64]	@ (8002ea8 <TIM_Base_SetConfig+0xdc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
  }
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40014400 	.word	0x40014400

08002eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f023 0201 	bic.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 0302 	bic.w	r3, r3, #2
 8002ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a24      	ldr	r2, [pc, #144]	@ (8002f98 <TIM_OC1_SetConfig+0xec>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_OC1_SetConfig+0x70>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <TIM_OC1_SetConfig+0xf0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_OC1_SetConfig+0x70>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a22      	ldr	r2, [pc, #136]	@ (8002fa0 <TIM_OC1_SetConfig+0xf4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10c      	bne.n	8002f36 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0308 	bic.w	r3, r3, #8
 8002f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <TIM_OC1_SetConfig+0xec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TIM_OC1_SetConfig+0xa2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a16      	ldr	r2, [pc, #88]	@ (8002f9c <TIM_OC1_SetConfig+0xf0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_OC1_SetConfig+0xa2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a15      	ldr	r2, [pc, #84]	@ (8002fa0 <TIM_OC1_SetConfig+0xf4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d111      	bne.n	8002f72 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	621a      	str	r2, [r3, #32]
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400

08002fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 0210 	bic.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0320 	bic.w	r3, r3, #32
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a22      	ldr	r2, [pc, #136]	@ (800308c <TIM_OC2_SetConfig+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10d      	bne.n	8003024 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800300e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a19      	ldr	r2, [pc, #100]	@ (800308c <TIM_OC2_SetConfig+0xe8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_OC2_SetConfig+0x98>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <TIM_OC2_SetConfig+0xec>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_OC2_SetConfig+0x98>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a17      	ldr	r2, [pc, #92]	@ (8003094 <TIM_OC2_SetConfig+0xf0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d113      	bne.n	8003064 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400

08003098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a21      	ldr	r2, [pc, #132]	@ (800317c <TIM_OC3_SetConfig+0xe4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10d      	bne.n	8003116 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a18      	ldr	r2, [pc, #96]	@ (800317c <TIM_OC3_SetConfig+0xe4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <TIM_OC3_SetConfig+0x96>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a17      	ldr	r2, [pc, #92]	@ (8003180 <TIM_OC3_SetConfig+0xe8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_OC3_SetConfig+0x96>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a16      	ldr	r2, [pc, #88]	@ (8003184 <TIM_OC3_SetConfig+0xec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d113      	bne.n	8003156 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400

08003188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	031b      	lsls	r3, r3, #12
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <TIM_OC4_SetConfig+0xb0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <TIM_OC4_SetConfig+0x74>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a13      	ldr	r2, [pc, #76]	@ (800323c <TIM_OC4_SetConfig+0xb4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_OC4_SetConfig+0x74>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <TIM_OC4_SetConfig+0xb8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d109      	bne.n	8003210 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400

08003244 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003288:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a13      	ldr	r2, [pc, #76]	@ (80032e8 <TIM_OC5_SetConfig+0xa4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC5_SetConfig+0x6a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <TIM_OC5_SetConfig+0xa8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC5_SetConfig+0x6a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a11      	ldr	r2, [pc, #68]	@ (80032f0 <TIM_OC5_SetConfig+0xac>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d109      	bne.n	80032c2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400

080032f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800333a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	051b      	lsls	r3, r3, #20
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a14      	ldr	r2, [pc, #80]	@ (800339c <TIM_OC6_SetConfig+0xa8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_OC6_SetConfig+0x6c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a13      	ldr	r2, [pc, #76]	@ (80033a0 <TIM_OC6_SetConfig+0xac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC6_SetConfig+0x6c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <TIM_OC6_SetConfig+0xb0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d109      	bne.n	8003374 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	029b      	lsls	r3, r3, #10
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400

080033a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 030a 	bic.w	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003406:	b480      	push	{r7}
 8003408:	b087      	sub	sp, #28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f023 0210 	bic.w	r2, r3, #16
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	031b      	lsls	r3, r3, #12
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800347c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 0307 	orr.w	r3, r3, #7
 8003488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	021a      	lsls	r2, r3, #8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	431a      	orrs	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                           uint16_t Length)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e022      	b.n	800354e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d109      	bne.n	8003522 <HAL_TIMEx_PWMN_Start_DMA+0x46>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e015      	b.n	800354e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d109      	bne.n	800353c <HAL_TIMEx_PWMN_Start_DMA+0x60>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e008      	b.n	800354e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	e116      	b.n	8003784 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_TIMEx_PWMN_Start_DMA+0x94>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e022      	b.n	80035b6 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b04      	cmp	r3, #4
 8003574:	d109      	bne.n	800358a <HAL_TIMEx_PWMN_Start_DMA+0xae>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	e015      	b.n	80035b6 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d109      	bne.n	80035a4 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e008      	b.n	80035b6 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d024      	beq.n	8003604 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0dc      	b.n	8003784 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d8:	e016      	b.n	8003608 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d104      	bne.n	80035ea <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e8:	e00e      	b.n	8003608 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d104      	bne.n	80035fa <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035f8:	e006      	b.n	8003608 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8003602:	e001      	b.n	8003608 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0bd      	b.n	8003784 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
  }

  switch (Channel)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b08      	cmp	r3, #8
 800360c:	d051      	beq.n	80036b2 <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d872      	bhi.n	80036fa <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIMEx_PWMN_Start_DMA+0x146>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d024      	beq.n	800366a <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 8003620:	e06b      	b.n	80036fa <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	4a59      	ldr	r2, [pc, #356]	@ (800378c <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 8003628:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 8003638:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3334      	adds	r3, #52	@ 0x34
 8003646:	461a      	mov	r2, r3
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	f7fd fe5d 	bl	8001308 <HAL_DMA_Start_IT>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e095      	b.n	8003784 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	60da      	str	r2, [r3, #12]
      break;
 8003668:	e04a      	b.n	8003700 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	4a47      	ldr	r2, [pc, #284]	@ (800378c <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 8003670:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	4a46      	ldr	r2, [pc, #280]	@ (8003790 <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 8003678:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	4a45      	ldr	r2, [pc, #276]	@ (8003794 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3338      	adds	r3, #56	@ 0x38
 800368e:	461a      	mov	r2, r3
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	f7fd fe39 	bl	8001308 <HAL_DMA_Start_IT>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e071      	b.n	8003784 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036ae:	60da      	str	r2, [r3, #12]
      break;
 80036b0:	e026      	b.n	8003700 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	4a35      	ldr	r2, [pc, #212]	@ (800378c <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 80036b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	4a34      	ldr	r2, [pc, #208]	@ (8003790 <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	4a33      	ldr	r2, [pc, #204]	@ (8003794 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	333c      	adds	r3, #60	@ 0x3c
 80036d6:	461a      	mov	r2, r3
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	f7fd fe15 	bl	8001308 <HAL_DMA_Start_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04d      	b.n	8003784 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f6:	60da      	str	r2, [r3, #12]
      break;
 80036f8:	e002      	b.n	8003700 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
      break;
 80036fe:	bf00      	nop
  }

  if (status == HAL_OK)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d13d      	bne.n	8003782 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2204      	movs	r2, #4
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa5a 	bl	8003bc8 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003722:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1b      	ldr	r2, [pc, #108]	@ (8003798 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_TIMEx_PWMN_Start_DMA+0x266>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003736:	d004      	beq.n	8003742 <HAL_TIMEx_PWMN_Start_DMA+0x266>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a17      	ldr	r2, [pc, #92]	@ (800379c <HAL_TIMEx_PWMN_Start_DMA+0x2c0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d115      	bne.n	800376e <HAL_TIMEx_PWMN_Start_DMA+0x292>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <HAL_TIMEx_PWMN_Start_DMA+0x2c4>)
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d015      	beq.n	8003780 <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375a:	d011      	beq.n	8003780 <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      {
        __HAL_TIM_ENABLE(htim);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376c:	e008      	b.n	8003780 <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e000      	b.n	8003782 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003780:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	08003ad5 	.word	0x08003ad5
 8003790:	08002d63 	.word	0x08002d63
 8003794:	08003b5b 	.word	0x08003b5b
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40014000 	.word	0x40014000
 80037a0:	00010007 	.word	0x00010007

080037a4 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d025      	beq.n	8003804 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d830      	bhi.n	8003820 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_TIMEx_PWMN_Stop_DMA+0x28>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d00e      	beq.n	80037e8 <HAL_TIMEx_PWMN_Stop_DMA+0x44>
 80037ca:	e029      	b.n	8003820 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fdf1 	bl	80013c8 <HAL_DMA_Abort_IT>
      break;
 80037e6:	e01e      	b.n	8003826 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fde3 	bl	80013c8 <HAL_DMA_Abort_IT>
      break;
 8003802:	e010      	b.n	8003826 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003812:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fdd5 	bl	80013c8 <HAL_DMA_Abort_IT>
      break;
 800381e:	e002      	b.n	8003826 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	bf00      	nop
  }

  if (status == HAL_OK)
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d152      	bne.n	80038d2 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
  {
    /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2200      	movs	r2, #0
 8003832:	6839      	ldr	r1, [r7, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f9c7 	bl	8003bc8 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	f240 4344 	movw	r3, #1092	@ 0x444
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d107      	bne.n	800386a <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1a      	ldr	r2, [r3, #32]
 8003880:	f240 4344 	movw	r3, #1092	@ 0x444
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_TIMEx_PWMN_Stop_DMA+0x106>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a8:	e013      	b.n	80038d2 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d104      	bne.n	80038ba <HAL_TIMEx_PWMN_Stop_DMA+0x116>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038b8:	e00b      	b.n	80038d2 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d104      	bne.n	80038ca <HAL_TIMEx_PWMN_Stop_DMA+0x126>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038c8:	e003      	b.n	80038d2 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e04f      	b.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a21      	ldr	r2, [pc, #132]	@ (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d108      	bne.n	8003930 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003924:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395c:	d004      	beq.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a10      	ldr	r2, [pc, #64]	@ (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d10c      	bne.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800396e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	4313      	orrs	r3, r2
 8003978:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40014000 	.word	0x40014000

080039a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e060      	b.n	8003a86 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a14      	ldr	r2, [pc, #80]	@ (8003a94 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d115      	bne.n	8003a74 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	051b      	lsls	r3, r3, #20
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d10b      	bne.n	8003b04 <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d125      	bne.n	8003b46 <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b02:	e020      	b.n	8003b46 <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d10b      	bne.n	8003b26 <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2202      	movs	r2, #2
 8003b12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d114      	bne.n	8003b46 <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b24:	e00f      	b.n	8003b46 <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d10a      	bne.n	8003b46 <TIM_DMADelayPulseNCplt+0x72>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2204      	movs	r2, #4
 8003b34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7fc ffd0 	bl	8000aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	771a      	strb	r2, [r3, #28]
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d107      	bne.n	8003b82 <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b80:	e018      	b.n	8003bb4 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d107      	bne.n	8003b9c <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b9a:	e00b      	b.n	8003bb4 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d106      	bne.n	8003bb4 <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff f8ca 	bl	8002d4e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	2204      	movs	r2, #4
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1a      	ldr	r2, [r3, #32]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	401a      	ands	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <memset>:
 8003c12:	4402      	add	r2, r0
 8003c14:	4603      	mov	r3, r0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d100      	bne.n	8003c1c <memset+0xa>
 8003c1a:	4770      	bx	lr
 8003c1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c20:	e7f9      	b.n	8003c16 <memset+0x4>
	...

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4d0d      	ldr	r5, [pc, #52]	@ (8003c5c <__libc_init_array+0x38>)
 8003c28:	4c0d      	ldr	r4, [pc, #52]	@ (8003c60 <__libc_init_array+0x3c>)
 8003c2a:	1b64      	subs	r4, r4, r5
 8003c2c:	10a4      	asrs	r4, r4, #2
 8003c2e:	2600      	movs	r6, #0
 8003c30:	42a6      	cmp	r6, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	4d0b      	ldr	r5, [pc, #44]	@ (8003c64 <__libc_init_array+0x40>)
 8003c36:	4c0c      	ldr	r4, [pc, #48]	@ (8003c68 <__libc_init_array+0x44>)
 8003c38:	f000 f818 	bl	8003c6c <_init>
 8003c3c:	1b64      	subs	r4, r4, r5
 8003c3e:	10a4      	asrs	r4, r4, #2
 8003c40:	2600      	movs	r6, #0
 8003c42:	42a6      	cmp	r6, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4c:	4798      	blx	r3
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c56:	4798      	blx	r3
 8003c58:	3601      	adds	r6, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08003cc4 	.word	0x08003cc4
 8003c60:	08003cc4 	.word	0x08003cc4
 8003c64:	08003cc4 	.word	0x08003cc4
 8003c68:	08003cc8 	.word	0x08003cc8

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
