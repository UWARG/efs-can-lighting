
efs-can-lighting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002bb4  08002bb4  00003bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf4  08002bf4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf4  08002bf4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf4  08002bf4  00003bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bf8  08002bf8  00003bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bfc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002c08  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002c08  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0f4  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d02  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00010e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097e  00000000  00000000  00011aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207f4  00000000  00000000  0001241e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000deec  00000000  00000000  00032c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c756a  00000000  00000000  00040afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  001080ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0010b3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002b9c 	.word	0x08002b9c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002b9c 	.word	0x08002b9c

080001cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001d0:	4b16      	ldr	r3, [pc, #88]	@ (800022c <MX_CAN1_Init+0x60>)
 80001d2:	4a17      	ldr	r2, [pc, #92]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80001d6:	4b15      	ldr	r3, [pc, #84]	@ (800022c <MX_CAN1_Init+0x60>)
 80001d8:	2210      	movs	r2, #16
 80001da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80001dc:	4b13      	ldr	r3, [pc, #76]	@ (800022c <MX_CAN1_Init+0x60>)
 80001de:	2200      	movs	r2, #0
 80001e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e2:	4b12      	ldr	r3, [pc, #72]	@ (800022c <MX_CAN1_Init+0x60>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80001e8:	4b10      	ldr	r3, [pc, #64]	@ (800022c <MX_CAN1_Init+0x60>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001ee:	4b0f      	ldr	r3, [pc, #60]	@ (800022c <MX_CAN1_Init+0x60>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80001f4:	4b0d      	ldr	r3, [pc, #52]	@ (800022c <MX_CAN1_Init+0x60>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80001fa:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <MX_CAN1_Init+0x60>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000200:	4b0a      	ldr	r3, [pc, #40]	@ (800022c <MX_CAN1_Init+0x60>)
 8000202:	2200      	movs	r2, #0
 8000204:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000206:	4b09      	ldr	r3, [pc, #36]	@ (800022c <MX_CAN1_Init+0x60>)
 8000208:	2200      	movs	r2, #0
 800020a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000212:	4b06      	ldr	r3, [pc, #24]	@ (800022c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000218:	4804      	ldr	r0, [pc, #16]	@ (800022c <MX_CAN1_Init+0x60>)
 800021a:	f000 fb13 	bl	8000844 <HAL_CAN_Init>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000224:	f000 f8d9 	bl	80003da <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000028 	.word	0x20000028
 8000230:	40006400 	.word	0x40006400

08000234 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08a      	sub	sp, #40	@ 0x28
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a18      	ldr	r2, [pc, #96]	@ (80002b4 <HAL_CAN_MspInit+0x80>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d129      	bne.n	80002aa <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000256:	4b18      	ldr	r3, [pc, #96]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800025a:	4a17      	ldr	r2, [pc, #92]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 800025c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000260:	6593      	str	r3, [r2, #88]	@ 0x58
 8000262:	4b15      	ldr	r3, [pc, #84]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000272:	4a11      	ldr	r2, [pc, #68]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800027a:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <HAL_CAN_MspInit+0x84>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000286:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800028a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800028c:	2302      	movs	r3, #2
 800028e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000298:	2309      	movs	r3, #9
 800029a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4619      	mov	r1, r3
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f000 fcaf 	bl	8000c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	@ 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40006400 	.word	0x40006400
 80002b8:	40021000 	.word	0x40021000

080002bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <MX_GPIO_Init+0x44>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000300 <MX_GPIO_Init+0x44>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <MX_GPIO_Init+0x44>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <MX_GPIO_Init+0x44>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002de:	4a08      	ldr	r2, [pc, #32]	@ (8000300 <MX_GPIO_Init+0x44>)
 80002e0:	f043 0302 	orr.w	r3, r3, #2
 80002e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <MX_GPIO_Init+0x44>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	f003 0302 	and.w	r3, r3, #2
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	683b      	ldr	r3, [r7, #0]

}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fa02 	bl	8000712 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f815 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f7ff ffd3 	bl	80002bc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000316:	f7ff ff59 	bl	80001cc <MX_CAN1_Init>
  MX_TIM1_Init();
 800031a:	f000 f8cb 	bl	80004b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t angle = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	71fb      	strb	r3, [r7, #7]
	const uint8_t angle_difference = 11;
 8000322:	230b      	movs	r3, #11
 8000324:	71bb      	strb	r3, [r7, #6]

//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000326:	2104      	movs	r1, #4
 8000328:	4803      	ldr	r0, [pc, #12]	@ (8000338 <main+0x34>)
 800032a:	f002 fa69 	bl	8002800 <HAL_TIMEx_PWMN_Start>
//		}
//		// Write to LED
//		++angle;
//		led_render();
		// Some delay
		HAL_Delay(10);
 800032e:	200a      	movs	r0, #10
 8000330:	f000 fa64 	bl	80007fc <HAL_Delay>
 8000334:	e7fb      	b.n	800032e <main+0x2a>
 8000336:	bf00      	nop
 8000338:	20000050 	.word	0x20000050

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b096      	sub	sp, #88	@ 0x58
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	2244      	movs	r2, #68	@ 0x44
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f002 fbf9 	bl	8002b42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800035e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000362:	f000 fdd9 	bl	8000f18 <HAL_PWREx_ControlVoltageScaling>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800036c:	f000 f835 	bl	80003da <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000374:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037e:	2303      	movs	r3, #3
 8000380:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000382:	2301      	movs	r3, #1
 8000384:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000386:	230c      	movs	r3, #12
 8000388:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800038a:	2307      	movs	r3, #7
 800038c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000392:	2302      	movs	r3, #2
 8000394:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fe12 	bl	8000fc4 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003a6:	f000 f818 	bl	80003da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2303      	movs	r3, #3
 80003b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	463b      	mov	r3, r7
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fa12 	bl	80017ec <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ce:	f000 f804 	bl	80003da <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3758      	adds	r7, #88	@ 0x58
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003de:	b672      	cpsid	i
}
 80003e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003e2:	bf00      	nop
 80003e4:	e7fd      	b.n	80003e2 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <HAL_MspInit+0x44>)
 80003f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003f2:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <HAL_MspInit+0x44>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <HAL_MspInit+0x44>)
 80003fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <HAL_MspInit+0x44>)
 8000408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800040a:	4a08      	ldr	r2, [pc, #32]	@ (800042c <HAL_MspInit+0x44>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000410:	6593      	str	r3, [r2, #88]	@ 0x58
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <HAL_MspInit+0x44>)
 8000414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <NMI_Handler+0x4>

08000438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <MemManage_Handler+0x4>

08000448 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <BusFault_Handler+0x4>

08000450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <UsageFault_Handler+0x4>

08000458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000486:	f000 f999 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <SystemInit+0x20>)
 8000496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800049a:	4a05      	ldr	r2, [pc, #20]	@ (80004b0 <SystemInit+0x20>)
 800049c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b09a      	sub	sp, #104	@ 0x68
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	222c      	movs	r2, #44	@ 0x2c
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fb27 	bl	8002b42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f4:	4b44      	ldr	r3, [pc, #272]	@ (8000608 <MX_TIM1_Init+0x154>)
 80004f6:	4a45      	ldr	r2, [pc, #276]	@ (800060c <MX_TIM1_Init+0x158>)
 80004f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004fa:	4b43      	ldr	r3, [pc, #268]	@ (8000608 <MX_TIM1_Init+0x154>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000500:	4b41      	ldr	r3, [pc, #260]	@ (8000608 <MX_TIM1_Init+0x154>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000506:	4b40      	ldr	r3, [pc, #256]	@ (8000608 <MX_TIM1_Init+0x154>)
 8000508:	f242 7210 	movw	r2, #10000	@ 0x2710
 800050c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050e:	4b3e      	ldr	r3, [pc, #248]	@ (8000608 <MX_TIM1_Init+0x154>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000514:	4b3c      	ldr	r3, [pc, #240]	@ (8000608 <MX_TIM1_Init+0x154>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b3b      	ldr	r3, [pc, #236]	@ (8000608 <MX_TIM1_Init+0x154>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000520:	4839      	ldr	r0, [pc, #228]	@ (8000608 <MX_TIM1_Init+0x154>)
 8000522:	f001 fb4f 	bl	8001bc4 <HAL_TIM_Base_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800052c:	f7ff ff55 	bl	80003da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000534:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000536:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800053a:	4619      	mov	r1, r3
 800053c:	4832      	ldr	r0, [pc, #200]	@ (8000608 <MX_TIM1_Init+0x154>)
 800053e:	f001 fd0d 	bl	8001f5c <HAL_TIM_ConfigClockSource>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000548:	f7ff ff47 	bl	80003da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800054c:	482e      	ldr	r0, [pc, #184]	@ (8000608 <MX_TIM1_Init+0x154>)
 800054e:	f001 fb90 	bl	8001c72 <HAL_TIM_PWM_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000558:	f7ff ff3f 	bl	80003da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000568:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800056c:	4619      	mov	r1, r3
 800056e:	4826      	ldr	r0, [pc, #152]	@ (8000608 <MX_TIM1_Init+0x154>)
 8000570:	f002 f9e4 	bl	800293c <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800057a:	f7ff ff2e 	bl	80003da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800057e:	2370      	movs	r3, #112	@ 0x70
 8000580:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 5000;
 8000582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000586:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000594:	2300      	movs	r3, #0
 8000596:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000598:	2300      	movs	r3, #0
 800059a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800059c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005a0:	2204      	movs	r2, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4818      	ldr	r0, [pc, #96]	@ (8000608 <MX_TIM1_Init+0x154>)
 80005a6:	f001 fbc5 	bl	8001d34 <HAL_TIM_PWM_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80005b0:	f7ff ff13 	bl	80003da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <MX_TIM1_Init+0x154>)
 80005ea:	f002 fa0d 	bl	8002a08 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80005f4:	f7ff fef1 	bl	80003da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <MX_TIM1_Init+0x154>)
 80005fa:	f000 f829 	bl	8000650 <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3768      	adds	r7, #104	@ 0x68
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000050 	.word	0x20000050
 800060c:	40012c00 	.word	0x40012c00

08000610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <HAL_TIM_Base_MspInit+0x38>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d10b      	bne.n	800063a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000626:	4a09      	ldr	r2, [pc, #36]	@ (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800062c:	6613      	str	r3, [r2, #96]	@ 0x60
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40012c00 	.word	0x40012c00
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <HAL_TIM_MspPostInit+0x64>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d11b      	bne.n	80006aa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <HAL_TIM_MspPostInit+0x68>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <HAL_TIM_MspPostInit+0x68>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <HAL_TIM_MspPostInit+0x68>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	@ (80006bc <HAL_TIM_MspPostInit+0x6c>)
 80006a6:	f000 faaf 	bl	8000c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006aa:	bf00      	nop
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400

080006c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c4:	f7ff fee4 	bl	8000490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	@ (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	@ (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ee:	f002 fa31 	bl	8002b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006f2:	f7ff fe07 	bl	8000304 <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000704:	08002bfc 	.word	0x08002bfc
  ldr r2, =_sbss
 8000708:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800070c:	200000a0 	.word	0x200000a0

08000710 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_IRQHandler>

08000712 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 fa3f 	bl	8000ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000722:	200f      	movs	r0, #15
 8000724:	f000 f80e 	bl	8000744 <HAL_InitTick>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d002      	beq.n	8000734 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e001      	b.n	8000738 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000734:	f7ff fe58 	bl	80003e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000738:	79fb      	ldrb	r3, [r7, #7]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <HAL_InitTick+0x6c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d023      	beq.n	80007a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <HAL_InitTick+0x70>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <HAL_InitTick+0x6c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000766:	fbb3 f3f1 	udiv	r3, r3, r1
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fa3d 	bl	8000bee <HAL_SYSTICK_Config>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10f      	bne.n	800079a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d809      	bhi.n	8000794 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f000 fa15 	bl	8000bb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800078c:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <HAL_InitTick+0x74>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e007      	b.n	80007a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e004      	b.n	80007a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e001      	b.n	80007a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007a0:	2301      	movs	r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_IncTick+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_IncTick+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_IncTick+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2000009c 	.word	0x2000009c

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff ffee 	bl	80007e4 <HAL_GetTick>
 8000808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000822:	bf00      	nop
 8000824:	f7ff ffde 	bl	80007e4 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e0ed      	b.n	8000a32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d102      	bne.n	8000868 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fce6 	bl	8000234 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 0201 	orr.w	r2, r2, #1
 8000876:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000878:	f7ff ffb4 	bl	80007e4 <HAL_GetTick>
 800087c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800087e:	e012      	b.n	80008a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000880:	f7ff ffb0 	bl	80007e4 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b0a      	cmp	r3, #10
 800088c:	d90b      	bls.n	80008a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000892:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2205      	movs	r2, #5
 800089e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e0c5      	b.n	8000a32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0e5      	beq.n	8000880 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 0202 	bic.w	r2, r2, #2
 80008c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008c4:	f7ff ff8e 	bl	80007e4 <HAL_GetTick>
 80008c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ca:	e012      	b.n	80008f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008cc:	f7ff ff8a 	bl	80007e4 <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d90b      	bls.n	80008f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2205      	movs	r2, #5
 80008ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e09f      	b.n	8000a32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e5      	bne.n	80008cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7e1b      	ldrb	r3, [r3, #24]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d108      	bne.n	800091a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e007      	b.n	800092a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7e5b      	ldrb	r3, [r3, #25]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d108      	bne.n	8000944 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e007      	b.n	8000954 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000952:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7e9b      	ldrb	r3, [r3, #26]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d108      	bne.n	800096e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f042 0220 	orr.w	r2, r2, #32
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	e007      	b.n	800097e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f022 0220 	bic.w	r2, r2, #32
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7edb      	ldrb	r3, [r3, #27]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d108      	bne.n	8000998 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0210 	bic.w	r2, r2, #16
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e007      	b.n	80009a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 0210 	orr.w	r2, r2, #16
 80009a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7f1b      	ldrb	r3, [r3, #28]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d108      	bne.n	80009c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0208 	orr.w	r2, r2, #8
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	e007      	b.n	80009d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f022 0208 	bic.w	r2, r2, #8
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	7f5b      	ldrb	r3, [r3, #29]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d108      	bne.n	80009ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f042 0204 	orr.w	r2, r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e007      	b.n	80009fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f022 0204 	bic.w	r2, r2, #4
 80009fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	431a      	orrs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	ea42 0103 	orr.w	r1, r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	@ (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	@ (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	@ 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	@ 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b6c:	d301      	bcc.n	8000b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00f      	b.n	8000b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <SysTick_Config+0x40>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f7ff ff8e 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <SysTick_Config+0x40>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <SysTick_Config+0x40>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff47 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc8:	f7ff ff5c 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f7ff ff8e 	bl	8000af4 <NVIC_EncodePriority>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff5d 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffb0 	bl	8000b5c <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e154      	b.n	8000ec2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa01 f303 	lsl.w	r3, r1, r3
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 8146 	beq.w	8000ebc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d005      	beq.n	8000c48 <HAL_GPIO_Init+0x40>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d130      	bne.n	8000caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	f003 0201 	and.w	r2, r3, #1
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d017      	beq.n	8000ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d123      	bne.n	8000d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	6939      	ldr	r1, [r7, #16]
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0203 	and.w	r2, r3, #3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80a0 	beq.w	8000ebc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	4b58      	ldr	r3, [pc, #352]	@ (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d80:	4a57      	ldr	r2, [pc, #348]	@ (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d88:	4b55      	ldr	r3, [pc, #340]	@ (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d94:	4a53      	ldr	r2, [pc, #332]	@ (8000ee4 <HAL_GPIO_Init+0x2dc>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dbe:	d019      	beq.n	8000df4 <HAL_GPIO_Init+0x1ec>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a49      	ldr	r2, [pc, #292]	@ (8000ee8 <HAL_GPIO_Init+0x2e0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x1e8>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a48      	ldr	r2, [pc, #288]	@ (8000eec <HAL_GPIO_Init+0x2e4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1e4>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a47      	ldr	r2, [pc, #284]	@ (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1e0>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a46      	ldr	r2, [pc, #280]	@ (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1dc>
 8000de0:	2304      	movs	r3, #4
 8000de2:	e008      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000de4:	2307      	movs	r3, #7
 8000de6:	e006      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000de8:	2303      	movs	r3, #3
 8000dea:	e004      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e002      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df4:	2300      	movs	r3, #0
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e06:	4937      	ldr	r1, [pc, #220]	@ (8000ee4 <HAL_GPIO_Init+0x2dc>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e14:	4b38      	ldr	r3, [pc, #224]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e38:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e62:	4a25      	ldr	r2, [pc, #148]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f aea3 	bne.w	8000c18 <HAL_GPIO_Init+0x10>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	48000c00 	.word	0x48000c00
 8000ef4:	48001000 	.word	0x48001000
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40007000 	.word	0x40007000

08000f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f26:	d130      	bne.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f28:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f34:	d038      	beq.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2232      	movs	r2, #50	@ 0x32
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9b      	lsrs	r3, r3, #18
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f5c:	e002      	b.n	8000f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f70:	d102      	bne.n	8000f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f2      	bne.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f84:	d110      	bne.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e00f      	b.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f96:	d007      	beq.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40007000 	.word	0x40007000
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	431bde83 	.word	0x431bde83

08000fc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f000 bc02 	b.w	80017dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd8:	4b96      	ldr	r3, [pc, #600]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fe2:	4b94      	ldr	r3, [pc, #592]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80e4 	beq.w	80011c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <HAL_RCC_OscConfig+0x4c>
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b0c      	cmp	r3, #12
 8001004:	f040 808b 	bne.w	800111e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b01      	cmp	r3, #1
 800100c:	f040 8087 	bne.w	800111e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001010:	4b88      	ldr	r3, [pc, #544]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x64>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e3d9      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	4b81      	ldr	r3, [pc, #516]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_RCC_OscConfig+0x7e>
 8001038:	4b7e      	ldr	r3, [pc, #504]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001040:	e005      	b.n	800104e <HAL_RCC_OscConfig+0x8a>
 8001042:	4b7c      	ldr	r3, [pc, #496]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800104e:	4293      	cmp	r3, r2
 8001050:	d223      	bcs.n	800109a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fd54 	bl	8001b04 <RCC_SetFlashLatencyFromMSIRange>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e3ba      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001066:	4b73      	ldr	r3, [pc, #460]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a72      	ldr	r2, [pc, #456]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b70      	ldr	r3, [pc, #448]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	496d      	ldr	r1, [pc, #436]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001084:	4b6b      	ldr	r3, [pc, #428]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	4968      	ldr	r1, [pc, #416]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
 8001098:	e025      	b.n	80010e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109a:	4b66      	ldr	r3, [pc, #408]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a65      	ldr	r2, [pc, #404]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b63      	ldr	r3, [pc, #396]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4960      	ldr	r1, [pc, #384]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	495b      	ldr	r1, [pc, #364]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd14 	bl	8001b04 <RCC_SetFlashLatencyFromMSIRange>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e37a      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010e6:	f000 fc81 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b51      	ldr	r3, [pc, #324]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	4950      	ldr	r1, [pc, #320]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 80010f8:	5ccb      	ldrb	r3, [r1, r3]
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001102:	4a4e      	ldr	r2, [pc, #312]	@ (800123c <HAL_RCC_OscConfig+0x278>)
 8001104:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001106:	4b4e      	ldr	r3, [pc, #312]	@ (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fb1a 	bl	8000744 <HAL_InitTick>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d052      	beq.n	80011c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	e35e      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d032      	beq.n	800118c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001126:	4b43      	ldr	r3, [pc, #268]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a42      	ldr	r2, [pc, #264]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001132:	f7ff fb57 	bl	80007e4 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800113a:	f7ff fb53 	bl	80007e4 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e347      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800114c:	4b39      	ldr	r3, [pc, #228]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001158:	4b36      	ldr	r3, [pc, #216]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a35      	ldr	r2, [pc, #212]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4930      	ldr	r1, [pc, #192]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	492b      	ldr	r1, [pc, #172]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
 800118a:	e01a      	b.n	80011c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001198:	f7ff fb24 	bl	80007e4 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a0:	f7ff fb20 	bl	80007e4 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e314      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1dc>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d073      	beq.n	80012b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x21c>
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	d10e      	bne.n	80011f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d10b      	bne.n	80011f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d063      	beq.n	80012b4 <HAL_RCC_OscConfig+0x2f0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d15f      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e2f1      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001200:	d106      	bne.n	8001210 <HAL_RCC_OscConfig+0x24c>
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0b      	ldr	r2, [pc, #44]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e025      	b.n	800125c <HAL_RCC_OscConfig+0x298>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001218:	d114      	bne.n	8001244 <HAL_RCC_OscConfig+0x280>
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a02      	ldr	r2, [pc, #8]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e013      	b.n	800125c <HAL_RCC_OscConfig+0x298>
 8001234:	40021000 	.word	0x40021000
 8001238:	08002bb4 	.word	0x08002bb4
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004
 8001244:	4ba0      	ldr	r3, [pc, #640]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a9f      	ldr	r2, [pc, #636]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b9d      	ldr	r3, [pc, #628]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a9c      	ldr	r2, [pc, #624]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fabe 	bl	80007e4 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff faba 	bl	80007e4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	@ 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e2ae      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800127e:	4b92      	ldr	r3, [pc, #584]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x2a8>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff faaa 	bl	80007e4 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff faa6 	bl	80007e4 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e29a      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a6:	4b88      	ldr	r3, [pc, #544]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x2d0>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d060      	beq.n	8001384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_OscConfig+0x310>
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d119      	bne.n	8001302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d116      	bne.n	8001302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d4:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_OscConfig+0x328>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e277      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	4973      	ldr	r1, [pc, #460]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001300:	e040      	b.n	8001384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d023      	beq.n	8001352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130a:	4b6f      	ldr	r3, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6e      	ldr	r2, [pc, #440]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fa65 	bl	80007e4 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fa61 	bl	80007e4 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e255      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001330:	4b65      	ldr	r3, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b62      	ldr	r3, [pc, #392]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	061b      	lsls	r3, r3, #24
 800134a:	495f      	ldr	r1, [pc, #380]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	e018      	b.n	8001384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b5d      	ldr	r3, [pc, #372]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a5c      	ldr	r2, [pc, #368]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800135c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff fa41 	bl	80007e4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fa3d 	bl	80007e4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e231      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f0      	bne.n	8001366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d03c      	beq.n	800140a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001398:	4b4b      	ldr	r3, [pc, #300]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800139a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800139e:	4a4a      	ldr	r2, [pc, #296]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fa1c 	bl	80007e4 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fa18 	bl	80007e4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e20c      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0ef      	beq.n	80013b0 <HAL_RCC_OscConfig+0x3ec>
 80013d0:	e01b      	b.n	800140a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b3d      	ldr	r3, [pc, #244]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d8:	4a3b      	ldr	r2, [pc, #236]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	f7ff f9ff 	bl	80007e4 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff f9fb 	bl	80007e4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1ef      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013fc:	4b32      	ldr	r3, [pc, #200]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ef      	bne.n	80013ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800141c:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10d      	bne.n	8001444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001432:	6593      	str	r3, [r2, #88]	@ 0x58
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001440:	2301      	movs	r3, #1
 8001442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001444:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d118      	bne.n	8001482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1d      	ldr	r2, [pc, #116]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145c:	f7ff f9c2 	bl	80007e4 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001464:	f7ff f9be 	bl	80007e4 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1b2      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x4d8>
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800148c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800149a:	e029      	b.n	80014f0 <HAL_RCC_OscConfig+0x52c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d115      	bne.n	80014d0 <HAL_RCC_OscConfig+0x50c>
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014aa:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ba:	4a03      	ldr	r2, [pc, #12]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x52c>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40007000 	.word	0x40007000
 80014d0:	4b9a      	ldr	r3, [pc, #616]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014d6:	4a99      	ldr	r2, [pc, #612]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014e0:	4b96      	ldr	r3, [pc, #600]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e6:	4a95      	ldr	r2, [pc, #596]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d016      	beq.n	8001526 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff f974 	bl	80007e4 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff f970 	bl	80007e4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e162      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001516:	4b89      	ldr	r3, [pc, #548]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0ed      	beq.n	8001500 <HAL_RCC_OscConfig+0x53c>
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff f95d 	bl	80007e4 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff f959 	bl	80007e4 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e14b      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001544:	4b7d      	ldr	r3, [pc, #500]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ed      	bne.n	800152e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001552:	7ffb      	ldrb	r3, [r7, #31]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b78      	ldr	r3, [pc, #480]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155c:	4a77      	ldr	r2, [pc, #476]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001562:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b00      	cmp	r3, #0
 800156e:	d03c      	beq.n	80015ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001578:	4b70      	ldr	r3, [pc, #448]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 800157a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800157e:	4a6f      	ldr	r2, [pc, #444]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f7ff f92c 	bl	80007e4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001590:	f7ff f928 	bl	80007e4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e11c      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015a2:	4b66      	ldr	r3, [pc, #408]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80015a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ef      	beq.n	8001590 <HAL_RCC_OscConfig+0x5cc>
 80015b0:	e01b      	b.n	80015ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015b2:	4b62      	ldr	r3, [pc, #392]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80015b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015b8:	4a60      	ldr	r2, [pc, #384]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c2:	f7ff f90f 	bl	80007e4 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ca:	f7ff f90b 	bl	80007e4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0ff      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015dc:	4b57      	ldr	r3, [pc, #348]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80015de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ef      	bne.n	80015ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80f3 	beq.w	80017da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	f040 80c9 	bne.w	8001790 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015fe:	4b4f      	ldr	r3, [pc, #316]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0203 	and.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160e:	429a      	cmp	r2, r3
 8001610:	d12c      	bne.n	800166c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	3b01      	subs	r3, #1
 800161e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d123      	bne.n	800166c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d11b      	bne.n	800166c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800163e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d113      	bne.n	800166c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	3b01      	subs	r3, #1
 8001652:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d109      	bne.n	800166c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	3b01      	subs	r3, #1
 8001666:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d06b      	beq.n	8001744 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d062      	beq.n	8001738 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001672:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0ac      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a2d      	ldr	r2, [pc, #180]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001688:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800168c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800168e:	f7ff f8a9 	bl	80007e4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff f8a5 	bl	80007e4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e099      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b4:	4b21      	ldr	r3, [pc, #132]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <HAL_RCC_OscConfig+0x77c>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016c4:	3a01      	subs	r2, #1
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	4311      	orrs	r1, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016ce:	0212      	lsls	r2, r2, #8
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016d6:	0852      	lsrs	r2, r2, #1
 80016d8:	3a01      	subs	r2, #1
 80016da:	0552      	lsls	r2, r2, #21
 80016dc:	4311      	orrs	r1, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016e2:	0852      	lsrs	r2, r2, #1
 80016e4:	3a01      	subs	r2, #1
 80016e6:	0652      	lsls	r2, r2, #25
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016ee:	06d2      	lsls	r2, r2, #27
 80016f0:	430a      	orrs	r2, r1
 80016f2:	4912      	ldr	r1, [pc, #72]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0f      	ldr	r2, [pc, #60]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800170e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001710:	f7ff f868 	bl	80007e4 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff f864 	bl	80007e4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e058      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <HAL_RCC_OscConfig+0x778>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001736:	e050      	b.n	80017da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e04f      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
 800173c:	40021000 	.word	0x40021000
 8001740:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d144      	bne.n	80017da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a23      	ldr	r2, [pc, #140]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 8001756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800175a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800175c:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a20      	ldr	r2, [pc, #128]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001766:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001768:	f7ff f83c 	bl	80007e4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff f838 	bl	80007e4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e02c      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x7ac>
 800178e:	e024      	b.n	80017da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d01f      	beq.n	80017d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 800179c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff f81f 	bl	80007e4 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff f81b 	bl	80007e4 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e00f      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4905      	ldr	r1, [pc, #20]	@ (80017e4 <HAL_RCC_OscConfig+0x820>)
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_OscConfig+0x824>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
 80017d4:	e001      	b.n	80017da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	feeefffc 	.word	0xfeeefffc

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0e7      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b75      	ldr	r3, [pc, #468]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d910      	bls.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b72      	ldr	r3, [pc, #456]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4970      	ldr	r1, [pc, #448]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b6e      	ldr	r3, [pc, #440]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cf      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d010      	beq.n	800185e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b66      	ldr	r3, [pc, #408]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001848:	429a      	cmp	r2, r3
 800184a:	d908      	bls.n	800185e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b63      	ldr	r3, [pc, #396]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4960      	ldr	r1, [pc, #384]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d04c      	beq.n	8001904 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b5a      	ldr	r3, [pc, #360]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d121      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0a6      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b54      	ldr	r3, [pc, #336]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e09a      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a2:	4b4e      	ldr	r3, [pc, #312]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e08e      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b2:	4b4a      	ldr	r3, [pc, #296]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e086      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b46      	ldr	r3, [pc, #280]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4943      	ldr	r1, [pc, #268]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d4:	f7fe ff86 	bl	80007e4 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7fe ff82 	bl	80007e4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e06e      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b3a      	ldr	r3, [pc, #232]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800191c:	429a      	cmp	r2, r3
 800191e:	d208      	bcs.n	8001932 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b2e      	ldr	r3, [pc, #184]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	492b      	ldr	r1, [pc, #172]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001932:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d210      	bcs.n	8001962 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001940:	4b25      	ldr	r3, [pc, #148]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 0207 	bic.w	r2, r3, #7
 8001948:	4923      	ldr	r1, [pc, #140]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001950:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d001      	beq.n	8001962 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e036      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196e:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4918      	ldr	r1, [pc, #96]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4910      	ldr	r1, [pc, #64]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a0:	f000 f824 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	490b      	ldr	r1, [pc, #44]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f4>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <HAL_RCC_ClockConfig+0x1f8>)
 80019be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_RCC_ClockConfig+0x1fc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe febd 	bl	8000744 <HAL_InitTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80019ce:	7afb      	ldrb	r3, [r7, #11]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40022000 	.word	0x40022000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	08002bb4 	.word	0x08002bb4
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fa:	4b3e      	ldr	r3, [pc, #248]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a04:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x34>
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d121      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d11e      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a20:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a2c:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e005      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a48:	4a2b      	ldr	r2, [pc, #172]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10d      	bne.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a64:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	e004      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d134      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d003      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0xac>
 8001a90:	e005      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a94:	617b      	str	r3, [r7, #20]
      break;
 8001a96:	e005      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a9a:	617b      	str	r3, [r7, #20]
      break;
 8001a9c:	e002      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	617b      	str	r3, [r7, #20]
      break;
 8001aa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	3301      	adds	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	fb03 f202 	mul.w	r2, r3, r2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	0e5b      	lsrs	r3, r3, #25
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08002bc4 	.word	0x08002bc4
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b1c:	f7ff f9ee 	bl	8000efc <HAL_PWREx_GetVoltageRange>
 8001b20:	6178      	str	r0, [r7, #20]
 8001b22:	e014      	b.n	8001b4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b28:	4a24      	ldr	r2, [pc, #144]	@ (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b3c:	f7ff f9de 	bl	8000efc <HAL_PWREx_GetVoltageRange>
 8001b40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b42:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	4a1d      	ldr	r2, [pc, #116]	@ (8001bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b54:	d10b      	bne.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b80      	cmp	r3, #128	@ 0x80
 8001b5a:	d919      	bls.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b60:	d902      	bls.n	8001b68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b62:	2302      	movs	r3, #2
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e013      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b68:	2301      	movs	r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e010      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b80      	cmp	r3, #128	@ 0x80
 8001b72:	d902      	bls.n	8001b7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b74:	2303      	movs	r3, #3
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e00a      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b80      	cmp	r3, #128	@ 0x80
 8001b7e:	d102      	bne.n	8001b86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b80:	2302      	movs	r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e004      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b70      	cmp	r3, #112	@ 0x70
 8001b8a:	d101      	bne.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 0207 	bic.w	r2, r3, #7
 8001b98:	4909      	ldr	r1, [pc, #36]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e049      	b.n	8001c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7fe fd10 	bl	8000610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f000 fa74 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e049      	b.n	8001d18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f841 	bl	8001d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f000 fa1d 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0ff      	b.n	8001f52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b14      	cmp	r3, #20
 8001d5e:	f200 80f0 	bhi.w	8001f42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001d62:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001dbd 	.word	0x08001dbd
 8001d6c:	08001f43 	.word	0x08001f43
 8001d70:	08001f43 	.word	0x08001f43
 8001d74:	08001f43 	.word	0x08001f43
 8001d78:	08001dfd 	.word	0x08001dfd
 8001d7c:	08001f43 	.word	0x08001f43
 8001d80:	08001f43 	.word	0x08001f43
 8001d84:	08001f43 	.word	0x08001f43
 8001d88:	08001e3f 	.word	0x08001e3f
 8001d8c:	08001f43 	.word	0x08001f43
 8001d90:	08001f43 	.word	0x08001f43
 8001d94:	08001f43 	.word	0x08001f43
 8001d98:	08001e7f 	.word	0x08001e7f
 8001d9c:	08001f43 	.word	0x08001f43
 8001da0:	08001f43 	.word	0x08001f43
 8001da4:	08001f43 	.word	0x08001f43
 8001da8:	08001ec1 	.word	0x08001ec1
 8001dac:	08001f43 	.word	0x08001f43
 8001db0:	08001f43 	.word	0x08001f43
 8001db4:	08001f43 	.word	0x08001f43
 8001db8:	08001f01 	.word	0x08001f01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fa04 	bl	80021d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0208 	orr.w	r2, r2, #8
 8001dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6999      	ldr	r1, [r3, #24]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	619a      	str	r2, [r3, #24]
      break;
 8001dfa:	e0a5      	b.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fa60 	bl	80022c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6999      	ldr	r1, [r3, #24]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	021a      	lsls	r2, r3, #8
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	619a      	str	r2, [r3, #24]
      break;
 8001e3c:	e084      	b.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fab9 	bl	80023bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0208 	orr.w	r2, r2, #8
 8001e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0204 	bic.w	r2, r2, #4
 8001e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69d9      	ldr	r1, [r3, #28]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	61da      	str	r2, [r3, #28]
      break;
 8001e7c:	e064      	b.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fb11 	bl	80024ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69d9      	ldr	r1, [r3, #28]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	021a      	lsls	r2, r3, #8
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	61da      	str	r2, [r3, #28]
      break;
 8001ebe:	e043      	b.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fb4e 	bl	8002568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0208 	orr.w	r2, r2, #8
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0204 	bic.w	r2, r2, #4
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001efe:	e023      	b.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fb86 	bl	8002618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	021a      	lsls	r2, r3, #8
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001f40:	e002      	b.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
      break;
 8001f46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_TIM_ConfigClockSource+0x1c>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0b6      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x18a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb4:	d03e      	beq.n	8002034 <HAL_TIM_ConfigClockSource+0xd8>
 8001fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fba:	f200 8087 	bhi.w	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc2:	f000 8086 	beq.w	80020d2 <HAL_TIM_ConfigClockSource+0x176>
 8001fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fca:	d87f      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001fcc:	2b70      	cmp	r3, #112	@ 0x70
 8001fce:	d01a      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0xaa>
 8001fd0:	2b70      	cmp	r3, #112	@ 0x70
 8001fd2:	d87b      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001fd4:	2b60      	cmp	r3, #96	@ 0x60
 8001fd6:	d050      	beq.n	800207a <HAL_TIM_ConfigClockSource+0x11e>
 8001fd8:	2b60      	cmp	r3, #96	@ 0x60
 8001fda:	d877      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001fdc:	2b50      	cmp	r3, #80	@ 0x50
 8001fde:	d03c      	beq.n	800205a <HAL_TIM_ConfigClockSource+0xfe>
 8001fe0:	2b50      	cmp	r3, #80	@ 0x50
 8001fe2:	d873      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d058      	beq.n	800209a <HAL_TIM_ConfigClockSource+0x13e>
 8001fe8:	2b40      	cmp	r3, #64	@ 0x40
 8001fea:	d86f      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001fec:	2b30      	cmp	r3, #48	@ 0x30
 8001fee:	d064      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
 8001ff0:	2b30      	cmp	r3, #48	@ 0x30
 8001ff2:	d86b      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d060      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d867      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d05c      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
 8002000:	2b10      	cmp	r3, #16
 8002002:	d05a      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
 8002004:	e062      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002016:	f000 fbd3 	bl	80027c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	609a      	str	r2, [r3, #8]
      break;
 8002032:	e04f      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002044:	f000 fbbc 	bl	80027c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002056:	609a      	str	r2, [r3, #8]
      break;
 8002058:	e03c      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002066:	461a      	mov	r2, r3
 8002068:	f000 fb30 	bl	80026cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2150      	movs	r1, #80	@ 0x50
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fb89 	bl	800278a <TIM_ITRx_SetConfig>
      break;
 8002078:	e02c      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002086:	461a      	mov	r2, r3
 8002088:	f000 fb4f 	bl	800272a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2160      	movs	r1, #96	@ 0x60
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fb79 	bl	800278a <TIM_ITRx_SetConfig>
      break;
 8002098:	e01c      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a6:	461a      	mov	r2, r3
 80020a8:	f000 fb10 	bl	80026cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2140      	movs	r1, #64	@ 0x40
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fb69 	bl	800278a <TIM_ITRx_SetConfig>
      break;
 80020b8:	e00c      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f000 fb60 	bl	800278a <TIM_ITRx_SetConfig>
      break;
 80020ca:	e003      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      break;
 80020d0:	e000      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80020d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a30      	ldr	r2, [pc, #192]	@ (80021c4 <TIM_Base_SetConfig+0xd4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0x20>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210e:	d108      	bne.n	8002122 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a27      	ldr	r2, [pc, #156]	@ (80021c4 <TIM_Base_SetConfig+0xd4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00b      	beq.n	8002142 <TIM_Base_SetConfig+0x52>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002130:	d007      	beq.n	8002142 <TIM_Base_SetConfig+0x52>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a24      	ldr	r2, [pc, #144]	@ (80021c8 <TIM_Base_SetConfig+0xd8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_Base_SetConfig+0x52>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a23      	ldr	r2, [pc, #140]	@ (80021cc <TIM_Base_SetConfig+0xdc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <TIM_Base_SetConfig+0xd4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0xa0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <TIM_Base_SetConfig+0xd8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0xa0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a10      	ldr	r2, [pc, #64]	@ (80021cc <TIM_Base_SetConfig+0xdc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d103      	bne.n	8002198 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f023 0201 	bic.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]
  }
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	40014000 	.word	0x40014000
 80021cc:	40014400 	.word	0x40014400

080021d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f023 0201 	bic.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f023 0302 	bic.w	r3, r3, #2
 800221c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a24      	ldr	r2, [pc, #144]	@ (80022bc <TIM_OC1_SetConfig+0xec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TIM_OC1_SetConfig+0x70>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a23      	ldr	r2, [pc, #140]	@ (80022c0 <TIM_OC1_SetConfig+0xf0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_OC1_SetConfig+0x70>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a22      	ldr	r2, [pc, #136]	@ (80022c4 <TIM_OC1_SetConfig+0xf4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d10c      	bne.n	800225a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f023 0308 	bic.w	r3, r3, #8
 8002246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a17      	ldr	r2, [pc, #92]	@ (80022bc <TIM_OC1_SetConfig+0xec>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <TIM_OC1_SetConfig+0xa2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <TIM_OC1_SetConfig+0xf0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_OC1_SetConfig+0xa2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <TIM_OC1_SetConfig+0xf4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	621a      	str	r2, [r3, #32]
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40014000 	.word	0x40014000
 80022c4:	40014400 	.word	0x40014400

080022c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 0210 	bic.w	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f023 0320 	bic.w	r3, r3, #32
 8002316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a22      	ldr	r2, [pc, #136]	@ (80023b0 <TIM_OC2_SetConfig+0xe8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d10d      	bne.n	8002348 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002346:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a19      	ldr	r2, [pc, #100]	@ (80023b0 <TIM_OC2_SetConfig+0xe8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <TIM_OC2_SetConfig+0x98>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a18      	ldr	r2, [pc, #96]	@ (80023b4 <TIM_OC2_SetConfig+0xec>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d003      	beq.n	8002360 <TIM_OC2_SetConfig+0x98>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <TIM_OC2_SetConfig+0xf0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d113      	bne.n	8002388 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800236e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	621a      	str	r2, [r3, #32]
}
 80023a2:	bf00      	nop
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40014000 	.word	0x40014000
 80023b8:	40014400 	.word	0x40014400

080023bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <TIM_OC3_SetConfig+0xe4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10d      	bne.n	800243a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <TIM_OC3_SetConfig+0xe4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <TIM_OC3_SetConfig+0x96>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <TIM_OC3_SetConfig+0xe8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d003      	beq.n	8002452 <TIM_OC3_SetConfig+0x96>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <TIM_OC3_SetConfig+0xec>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d113      	bne.n	800247a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	621a      	str	r2, [r3, #32]
}
 8002494:	bf00      	nop
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400

080024ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	031b      	lsls	r3, r3, #12
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a14      	ldr	r2, [pc, #80]	@ (800255c <TIM_OC4_SetConfig+0xb0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <TIM_OC4_SetConfig+0x74>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a13      	ldr	r2, [pc, #76]	@ (8002560 <TIM_OC4_SetConfig+0xb4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d003      	beq.n	8002520 <TIM_OC4_SetConfig+0x74>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <TIM_OC4_SetConfig+0xb8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d109      	bne.n	8002534 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40014000 	.word	0x40014000
 8002564:	40014400 	.word	0x40014400

08002568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80025ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a13      	ldr	r2, [pc, #76]	@ (800260c <TIM_OC5_SetConfig+0xa4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_OC5_SetConfig+0x6a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <TIM_OC5_SetConfig+0xa8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_OC5_SetConfig+0x6a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a11      	ldr	r2, [pc, #68]	@ (8002614 <TIM_OC5_SetConfig+0xac>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d109      	bne.n	80025e6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	621a      	str	r2, [r3, #32]
}
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40014000 	.word	0x40014000
 8002614:	40014400 	.word	0x40014400

08002618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800264a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800265e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <TIM_OC6_SetConfig+0xa8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <TIM_OC6_SetConfig+0x6c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <TIM_OC6_SetConfig+0xac>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <TIM_OC6_SetConfig+0x6c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <TIM_OC6_SetConfig+0xb0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d109      	bne.n	8002698 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800268a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	029b      	lsls	r3, r3, #10
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400

080026cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 030a 	bic.w	r3, r3, #10
 8002708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	621a      	str	r2, [r3, #32]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800272a:	b480      	push	{r7}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f023 0210 	bic.w	r2, r3, #16
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	031b      	lsls	r3, r3, #12
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002766:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	621a      	str	r2, [r3, #32]
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f043 0307 	orr.w	r3, r3, #7
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	021a      	lsls	r2, r3, #8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_TIMEx_PWMN_Start+0x24>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e022      	b.n	800286a <HAL_TIMEx_PWMN_Start+0x6a>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b04      	cmp	r3, #4
 8002828:	d109      	bne.n	800283e <HAL_TIMEx_PWMN_Start+0x3e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	e015      	b.n	800286a <HAL_TIMEx_PWMN_Start+0x6a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d109      	bne.n	8002858 <HAL_TIMEx_PWMN_Start+0x58>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e008      	b.n	800286a <HAL_TIMEx_PWMN_Start+0x6a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e05a      	b.n	8002928 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <HAL_TIMEx_PWMN_Start+0x82>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002880:	e013      	b.n	80028aa <HAL_TIMEx_PWMN_Start+0xaa>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d104      	bne.n	8002892 <HAL_TIMEx_PWMN_Start+0x92>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002890:	e00b      	b.n	80028aa <HAL_TIMEx_PWMN_Start+0xaa>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d104      	bne.n	80028a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028a0:	e003      	b.n	80028aa <HAL_TIMEx_PWMN_Start+0xaa>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2204      	movs	r2, #4
 80028b0:	6839      	ldr	r1, [r7, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f920 	bl	8002af8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <HAL_TIMEx_PWMN_Start+0x130>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_TIMEx_PWMN_Start+0xe6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028da:	d004      	beq.n	80028e6 <HAL_TIMEx_PWMN_Start+0xe6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <HAL_TIMEx_PWMN_Start+0x134>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_TIMEx_PWMN_Start+0x138>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d015      	beq.n	8002924 <HAL_TIMEx_PWMN_Start+0x124>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fe:	d011      	beq.n	8002924 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	e008      	b.n	8002924 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e000      	b.n	8002926 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40014000 	.word	0x40014000
 8002938:	00010007 	.word	0x00010007

0800293c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002950:	2302      	movs	r3, #2
 8002952:	e04f      	b.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a21      	ldr	r2, [pc, #132]	@ (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d108      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002984:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a14      	ldr	r2, [pc, #80]	@ (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d004      	beq.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10c      	bne.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40014000 	.word	0x40014000

08002a08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e060      	b.n	8002ae6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a14      	ldr	r2, [pc, #80]	@ (8002af4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d115      	bne.n	8002ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	051b      	lsls	r3, r3, #20
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40012c00 	.word	0x40012c00

08002af8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <memset>:
 8002b42:	4402      	add	r2, r0
 8002b44:	4603      	mov	r3, r0
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d100      	bne.n	8002b4c <memset+0xa>
 8002b4a:	4770      	bx	lr
 8002b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8002b50:	e7f9      	b.n	8002b46 <memset+0x4>
	...

08002b54 <__libc_init_array>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4d0d      	ldr	r5, [pc, #52]	@ (8002b8c <__libc_init_array+0x38>)
 8002b58:	4c0d      	ldr	r4, [pc, #52]	@ (8002b90 <__libc_init_array+0x3c>)
 8002b5a:	1b64      	subs	r4, r4, r5
 8002b5c:	10a4      	asrs	r4, r4, #2
 8002b5e:	2600      	movs	r6, #0
 8002b60:	42a6      	cmp	r6, r4
 8002b62:	d109      	bne.n	8002b78 <__libc_init_array+0x24>
 8002b64:	4d0b      	ldr	r5, [pc, #44]	@ (8002b94 <__libc_init_array+0x40>)
 8002b66:	4c0c      	ldr	r4, [pc, #48]	@ (8002b98 <__libc_init_array+0x44>)
 8002b68:	f000 f818 	bl	8002b9c <_init>
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	2600      	movs	r6, #0
 8002b72:	42a6      	cmp	r6, r4
 8002b74:	d105      	bne.n	8002b82 <__libc_init_array+0x2e>
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7c:	4798      	blx	r3
 8002b7e:	3601      	adds	r6, #1
 8002b80:	e7ee      	b.n	8002b60 <__libc_init_array+0xc>
 8002b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b86:	4798      	blx	r3
 8002b88:	3601      	adds	r6, #1
 8002b8a:	e7f2      	b.n	8002b72 <__libc_init_array+0x1e>
 8002b8c:	08002bf4 	.word	0x08002bf4
 8002b90:	08002bf4 	.word	0x08002bf4
 8002b94:	08002bf4 	.word	0x08002bf4
 8002b98:	08002bf8 	.word	0x08002bf8

08002b9c <_init>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr

08002ba8 <_fini>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr
