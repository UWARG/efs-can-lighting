
efs-can-lighting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006590  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08006720  08006720  00007720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00007904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006914  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000068  0800697c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800697c  0000868c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffd7  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a98  00000000  00000000  0001806f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c88  00000000  00000000  0001bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ae7  00000000  00000000  0001c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014105  00000000  00000000  000412df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbe45  00000000  00000000  000553e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e04  00000000  00000000  0013126c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00136070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006708 	.word	0x08006708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006708 	.word	0x08006708

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 80008ea:	222c      	movs	r2, #44	@ 0x2c
 80008ec:	2100      	movs	r1, #0
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f005 f924 	bl	8005b3c <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6a3a      	ldr	r2, [r7, #32]
 8000904:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000924:	d302      	bcc.n	800092c <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8000926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800092a:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	330c      	adds	r3, #12
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	b292      	uxth	r2, r2
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f8dc 	bl	8001af4 <initPoolAllocator>
}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d109      	bne.n	800096c <canardSetLocalNodeID+0x28>
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d006      	beq.n	800096c <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 800095e:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8000962:	2b00      	cmp	r3, #0
 8000964:	db02      	blt.n	800096c <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	78fa      	ldrb	r2, [r7, #3]
 800096a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	@ 0x38
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2228      	movs	r2, #40	@ 0x28
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f005 f8c9 	bl	8005b3c <memset>
 80009aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80009b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80009b6:	843b      	strh	r3, [r7, #32]
 80009b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80009bc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80009c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80009cc:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 f805 	bl	80009e4 <canardBroadcastObj>
 80009da:	4603      	mov	r3, r0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3738      	adds	r7, #56	@ 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d106      	bne.n	8000a04 <canardBroadcastObj+0x20>
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	8c1b      	ldrh	r3, [r3, #32]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80009fe:	f06f 0301 	mvn.w	r3, #1
 8000a02:	e070      	b.n	8000ae6 <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	7e1b      	ldrb	r3, [r3, #24]
 8000a08:	2b1f      	cmp	r3, #31
 8000a0a:	d902      	bls.n	8000a12 <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a0c:	f06f 0301 	mvn.w	r3, #1
 8000a10:	e069      	b.n	8000ae6 <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 8000a16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a1a:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ffab 	bl	8000978 <canardGetLocalNodeID>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d138      	bne.n	8000a9a <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	8c1b      	ldrh	r3, [r3, #32]
 8000a2c:	2b07      	cmp	r3, #7
 8000a2e:	d902      	bls.n	8000a36 <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000a30:	f06f 0303 	mvn.w	r3, #3
 8000a34:	e057      	b.n	8000ae6 <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	8a1a      	ldrh	r2, [r3, #16]
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <canardBroadcastObj+0x10c>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	8a1b      	ldrh	r3, [r3, #16]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d002      	beq.n	8000a50 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a4a:	f06f 0301 	mvn.w	r3, #1
 8000a4e:	e04a      	b.n	8000ae6 <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	69d9      	ldr	r1, [r3, #28]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	8c1b      	ldrh	r3, [r3, #32]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a5e:	f001 f82c 	bl	8001aba <crcAdd>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	7e1b      	ldrb	r3, [r3, #24]
 8000a72:	061a      	lsls	r2, r3, #24
 8000a74:	8a3b      	ldrh	r3, [r7, #16]
 8000a76:	025b      	lsls	r3, r3, #9
 8000a78:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	8a19      	ldrh	r1, [r3, #16]
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <canardBroadcastObj+0x10c>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	400b      	ands	r3, r1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000a88:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff73 	bl	8000978 <canardGetLocalNodeID>
 8000a92:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000a94:	4323      	orrs	r3, r4
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e012      	b.n	8000ac0 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	7e1b      	ldrb	r3, [r3, #24]
 8000a9e:	061a      	lsls	r2, r3, #24
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	8a1b      	ldrh	r3, [r3, #16]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	ea42 0403 	orr.w	r4, r2, r3
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ff64 	bl	8000978 <canardGetLocalNodeID>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4323      	orrs	r3, r4
 8000ab4:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 8000ab6:	6838      	ldr	r0, [r7, #0]
 8000ab8:	f000 f840 	bl	8000b3c <calculateCRC>
 8000abc:	4603      	mov	r3, r0
 8000abe:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000ac0:	8a7a      	ldrh	r2, [r7, #18]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	6979      	ldr	r1, [r7, #20]
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 fbf3 	bl	80012b2 <enqueueTxFrames>
 8000acc:	4603      	mov	r3, r0
 8000ace:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000ad0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dd04      	ble.n	8000ae2 <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fb73 	bl	80011c8 <incrementTransferID>
    }

    return result;
 8000ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	371c      	adds	r7, #28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	0800688c 	.word	0x0800688c

08000af4 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000afe:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8000b16:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8000b2e:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <calculateCRC>:
    return (canard_buffer_idx_t)rx;
#endif
}

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8000b44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b48:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	8c1b      	ldrh	r3, [r3, #32]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d913      	bls.n	8000b7a <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b58:	89f9      	ldrh	r1, [r7, #14]
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	f000 ff7e 	bl	8001a5c <crcAddSignature>
 8000b60:	4603      	mov	r3, r0
 8000b62:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69d9      	ldr	r1, [r3, #28]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	8c1b      	ldrh	r3, [r3, #32]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 ffa2 	bl	8001aba <crcAdd>
 8000b76:	4603      	mov	r3, r0
 8000b78:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	@ 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	e9c7 2300 	strd	r2, r3, [r7]
 8000b90:	460b      	mov	r3, r1
 8000b92:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000b94:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	bf0c      	ite	eq
 8000b9c:	2301      	moveq	r3, #1
 8000b9e:	2300      	movne	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000ba2:	743b      	strb	r3, [r7, #16]
 8000ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ba8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000bac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	843b      	strh	r3, [r7, #32]
 8000bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bb8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000bbc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bc4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000bc8:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8000bca:	f107 0210 	add.w	r2, r7, #16
 8000bce:	7afb      	ldrb	r3, [r7, #11]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f000 f805 	bl	8000be2 <canardRequestOrRespondObj>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3738      	adds	r7, #56	@ 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000be2:	b590      	push	{r4, r7, lr}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	460b      	mov	r3, r1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d106      	bne.n	8000c06 <canardRequestOrRespondObj+0x24>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	8c1b      	ldrh	r3, [r3, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c00:	f06f 0301 	mvn.w	r3, #1
 8000c04:	e042      	b.n	8000c8c <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7e1b      	ldrb	r3, [r3, #24]
 8000c0a:	2b1f      	cmp	r3, #31
 8000c0c:	d902      	bls.n	8000c14 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c0e:	f06f 0301 	mvn.w	r3, #1
 8000c12:	e03b      	b.n	8000c8c <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff feaf 	bl	8000978 <canardGetLocalNodeID>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000c20:	f06f 0303 	mvn.w	r3, #3
 8000c24:	e032      	b.n	8000c8c <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7e1b      	ldrb	r3, [r3, #24]
 8000c2a:	061a      	lsls	r2, r3, #24
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	8a1b      	ldrh	r3, [r3, #16]
 8000c30:	041b      	lsls	r3, r3, #16
 8000c32:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000c3a:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000c3c:	7afb      	ldrb	r3, [r7, #11]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff fe97 	bl	8000978 <canardGetLocalNodeID>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c52:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff71 	bl	8000b3c <calculateCRC>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000c5e:	8a7a      	ldrh	r2, [r7, #18]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6979      	ldr	r1, [r7, #20]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 fb24 	bl	80012b2 <enqueueTxFrames>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8000c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dd08      	ble.n	8000c88 <canardRequestOrRespondObj+0xa6>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d104      	bne.n	8000c88 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 faa0 	bl	80011c8 <incrementTransferID>
    }

    return result;
 8000c88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e002      	b.n	8000cae <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cac:	3304      	adds	r3, #4
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc6:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	330c      	adds	r3, #12
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 ff6c 	bl	8001bb4 <freeBlock>
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <canardCleanupStaleTransfers>:
    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
    return CANARD_OK;
}

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 8000cfc:	e053      	b.n	8000da6 <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0503 	sbc.w	r5, r1, r3
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <canardCleanupStaleTransfers+0xd4>)
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f175 0300 	sbcs.w	r3, r5, #0
 8000d16:	d33a      	bcc.n	8000d8e <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d11c      	bne.n	8000d5c <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 8000d22:	6939      	ldr	r1, [r7, #16]
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f000 fc89 	bl	800163c <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f103 020c 	add.w	r2, r3, #12
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f7ff fef3 	bl	8000b24 <canardRxFromIdx>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	330c      	adds	r3, #12
 8000d48:	6939      	ldr	r1, [r7, #16]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 ff32 	bl	8001bb4 <freeBlock>
                state = ins->rx_states;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	613b      	str	r3, [r7, #16]
                prev = state;
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e024      	b.n	8000da6 <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 fc6c 	bl	800163c <releaseStatePayload>
                prev->next = state->next;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	330c      	adds	r3, #12
 8000d70:	6939      	ldr	r1, [r7, #16]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 ff1e 	bl	8001bb4 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f103 020c 	add.w	r2, r3, #12
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4610      	mov	r0, r2
 8000d86:	f7ff fecd 	bl	8000b24 <canardRxFromIdx>
 8000d8a:	6138      	str	r0, [r7, #16]
 8000d8c:	e00b      	b.n	8000da6 <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f103 020c 	add.w	r2, r3, #12
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4610      	mov	r0, r2
 8000da0:	f7ff fec0 	bl	8000b24 <canardRxFromIdx>
 8000da4:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1a8      	bne.n	8000cfe <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bdb0      	pop	{r4, r5, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	001e8481 	.word	0x001e8481

08000dbc <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8000dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc0:	b08d      	sub	sp, #52	@ 0x34
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	61f8      	str	r0, [r7, #28]
 8000dc6:	61b9      	str	r1, [r7, #24]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	461a      	mov	r2, r3
 8000dcc:	460b      	mov	r3, r1
 8000dce:	75fb      	strb	r3, [r7, #23]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <canardDecodeScalar+0x24>
 8000dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000de0:	f06f 0301 	mvn.w	r3, #1
 8000de4:	e16e      	b.n	80010c4 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <canardDecodeScalar+0x36>
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	2b40      	cmp	r3, #64	@ 0x40
 8000df0:	d902      	bls.n	8000df8 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000df2:	f06f 0301 	mvn.w	r3, #1
 8000df6:	e165      	b.n	80010c4 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d105      	bne.n	8000e0a <canardDecodeScalar+0x4e>
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000e04:	f06f 0301 	mvn.w	r3, #1
 8000e08:	e15c      	b.n	80010c4 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2208      	movs	r2, #8
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 fe92 	bl	8005b3c <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	7dfa      	ldrb	r2, [r7, #23]
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	69f8      	ldr	r0, [r7, #28]
 8000e22:	f000 fcb6 	bl	8001792 <descatterTransferPayload>
 8000e26:	4603      	mov	r3, r0
 8000e28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 8000e2a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	dc02      	bgt.n	8000e38 <canardDecodeScalar+0x7c>
    {
        return result;
 8000e32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000e36:	e145      	b.n	80010c4 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d018      	beq.n	8000e76 <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3320      	adds	r3, #32
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	4413      	add	r3, r2
 8000e52:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000e56:	461a      	mov	r2, r3
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	425b      	negs	r3, r3
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	411a      	asrs	r2, r3
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	3320      	adds	r3, #32
 8000e6c:	f107 0110 	add.w	r1, r7, #16
 8000e70:	440b      	add	r3, r1
 8000e72:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d103      	bne.n	8000e8a <canardDecodeScalar+0xce>
 8000e82:	2301      	movs	r3, #1
 8000e84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e88:	e01e      	b.n	8000ec8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d803      	bhi.n	8000e98 <canardDecodeScalar+0xdc>
 8000e90:	2301      	movs	r3, #1
 8000e92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e96:	e017      	b.n	8000ec8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	2b10      	cmp	r3, #16
 8000e9c:	d803      	bhi.n	8000ea6 <canardDecodeScalar+0xea>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ea4:	e010      	b.n	8000ec8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	d803      	bhi.n	8000eb4 <canardDecodeScalar+0xf8>
 8000eac:	2304      	movs	r3, #4
 8000eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000eb2:	e009      	b.n	8000ec8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	2b40      	cmp	r3, #64	@ 0x40
 8000eb8:	d803      	bhi.n	8000ec2 <canardDecodeScalar+0x106>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ec0:	e002      	b.n	8000ec8 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 8000ec2:	f06f 0308 	mvn.w	r3, #8
 8000ec6:	e0fd      	b.n	80010c4 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8000ec8:	f000 fd58 	bl	800197c <isBigEndian>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8000ed2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fd5e 	bl	800199e <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 8000ee2:	7dbb      	ldrb	r3, [r7, #22]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 809b 	beq.w	8001020 <canardDecodeScalar+0x264>
 8000eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eee:	00da      	lsls	r2, r3, #3
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	f000 8094 	beq.w	8001020 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d819      	bhi.n	8000f32 <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8000efe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f02:	461a      	mov	r2, r3
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 8085 	beq.w	8001020 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8000f16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	425b      	negs	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f887 3020 	strb.w	r3, [r7, #32]
 8000f30:	e076      	b.n	8001020 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	2b10      	cmp	r3, #16
 8000f36:	d815      	bhi.n	8000f64 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8000f38:	8c3b      	ldrh	r3, [r7, #32]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d069      	beq.n	8001020 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8000f4c:	8c3a      	ldrh	r2, [r7, #32]
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2101      	movs	r1, #1
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	425b      	negs	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	843b      	strh	r3, [r7, #32]
 8000f62:	e05d      	b.n	8001020 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b20      	cmp	r3, #32
 8000f68:	d811      	bhi.n	8000f8e <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8000f6a:	6a3a      	ldr	r2, [r7, #32]
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d051      	beq.n	8001020 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	425b      	negs	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	623b      	str	r3, [r7, #32]
 8000f8c:	e048      	b.n	8001020 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f92:	d842      	bhi.n	800101a <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8000f94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f98:	7df9      	ldrb	r1, [r7, #23]
 8000f9a:	1e48      	subs	r0, r1, #1
 8000f9c:	f1c0 0620 	rsb	r6, r0, #32
 8000fa0:	f1a0 0120 	sub.w	r1, r0, #32
 8000fa4:	fa22 f400 	lsr.w	r4, r2, r0
 8000fa8:	fa03 f606 	lsl.w	r6, r3, r6
 8000fac:	4334      	orrs	r4, r6
 8000fae:	fa23 f101 	lsr.w	r1, r3, r1
 8000fb2:	430c      	orrs	r4, r1
 8000fb4:	fa23 f500 	lsr.w	r5, r3, r0
 8000fb8:	f004 0301 	and.w	r3, r4, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	d029      	beq.n	8001020 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8000fcc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000fd0:	7df9      	ldrb	r1, [r7, #23]
 8000fd2:	f04f 0201 	mov.w	r2, #1
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	f1a1 0620 	sub.w	r6, r1, #32
 8000fde:	f1c1 0020 	rsb	r0, r1, #32
 8000fe2:	fa03 f901 	lsl.w	r9, r3, r1
 8000fe6:	fa02 f606 	lsl.w	r6, r2, r6
 8000fea:	ea49 0906 	orr.w	r9, r9, r6
 8000fee:	fa22 f000 	lsr.w	r0, r2, r0
 8000ff2:	ea49 0900 	orr.w	r9, r9, r0
 8000ff6:	fa02 f801 	lsl.w	r8, r2, r1
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f1d8 0a00 	rsbs	sl, r8, #0
 8001000:	eb63 0b09 	sbc.w	fp, r3, r9
 8001004:	ea44 030a 	orr.w	r3, r4, sl
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	ea45 030b 	orr.w	r3, r5, fp
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001014:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001018:	e002      	b.n	8001020 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800101a:	f06f 0308 	mvn.w	r3, #8
 800101e:	e051      	b.n	80010c4 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8001020:	7dbb      	ldrb	r3, [r7, #22]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d022      	beq.n	800106c <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b08      	cmp	r3, #8
 800102a:	d804      	bhi.n	8001036 <canardDecodeScalar+0x27a>
 800102c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e044      	b.n	80010c0 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2b10      	cmp	r3, #16
 800103a:	d804      	bhi.n	8001046 <canardDecodeScalar+0x28a>
 800103c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001040:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001042:	801a      	strh	r2, [r3, #0]
 8001044:	e03c      	b.n	80010c0 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	2b20      	cmp	r3, #32
 800104a:	d803      	bhi.n	8001054 <canardDecodeScalar+0x298>
 800104c:	6a3a      	ldr	r2, [r7, #32]
 800104e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e035      	b.n	80010c0 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b40      	cmp	r3, #64	@ 0x40
 8001058:	d805      	bhi.n	8001066 <canardDecodeScalar+0x2aa>
 800105a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800105e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
 8001064:	e02c      	b.n	80010c0 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001066:	f06f 0308 	mvn.w	r3, #8
 800106a:	e02b      	b.n	80010c4 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d104      	bne.n	800107c <canardDecodeScalar+0x2c0>
 8001072:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e021      	b.n	80010c0 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b08      	cmp	r3, #8
 8001080:	d804      	bhi.n	800108c <canardDecodeScalar+0x2d0>
 8001082:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e019      	b.n	80010c0 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b10      	cmp	r3, #16
 8001090:	d803      	bhi.n	800109a <canardDecodeScalar+0x2de>
 8001092:	8c3a      	ldrh	r2, [r7, #32]
 8001094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	e012      	b.n	80010c0 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b20      	cmp	r3, #32
 800109e:	d803      	bhi.n	80010a8 <canardDecodeScalar+0x2ec>
 80010a0:	6a3a      	ldr	r2, [r7, #32]
 80010a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00b      	b.n	80010c0 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b40      	cmp	r3, #64	@ 0x40
 80010ac:	d805      	bhi.n	80010ba <canardDecodeScalar+0x2fe>
 80010ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80010b4:	e9c1 2300 	strd	r2, r3, [r1]
 80010b8:	e002      	b.n	80010c0 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80010ba:	f06f 0308 	mvn.w	r3, #8
 80010be:	e001      	b.n	80010c4 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 80010c0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3734      	adds	r7, #52	@ 0x34
 80010c8:	46bd      	mov	sp, r7
 80010ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080010ce <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b08a      	sub	sp, #40	@ 0x28
 80010d2:	af02      	add	r7, sp, #8
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4613      	mov	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b40      	cmp	r3, #64	@ 0x40
 80010e2:	d901      	bls.n	80010e8 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	2208      	movs	r2, #8
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fd1e 	bl	8005b3c <memset>

    uint8_t std_byte_length = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d105      	bne.n	8001116 <canardEncodeScalar+0x48>
 800110a:	2301      	movs	r3, #1
 800110c:	77fb      	strb	r3, [r7, #31]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	743b      	strb	r3, [r7, #16]
 8001114:	e024      	b.n	8001160 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b08      	cmp	r3, #8
 800111a:	d805      	bhi.n	8001128 <canardEncodeScalar+0x5a>
 800111c:	2301      	movs	r3, #1
 800111e:	77fb      	strb	r3, [r7, #31]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	743b      	strb	r3, [r7, #16]
 8001126:	e01b      	b.n	8001160 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b10      	cmp	r3, #16
 800112c:	d805      	bhi.n	800113a <canardEncodeScalar+0x6c>
 800112e:	2302      	movs	r3, #2
 8001130:	77fb      	strb	r3, [r7, #31]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	823b      	strh	r3, [r7, #16]
 8001138:	e012      	b.n	8001160 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b20      	cmp	r3, #32
 800113e:	d805      	bhi.n	800114c <canardEncodeScalar+0x7e>
 8001140:	2304      	movs	r3, #4
 8001142:	77fb      	strb	r3, [r7, #31]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	e009      	b.n	8001160 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b40      	cmp	r3, #64	@ 0x40
 8001150:	d806      	bhi.n	8001160 <canardEncodeScalar+0x92>
 8001152:	2308      	movs	r3, #8
 8001154:	77fb      	strb	r3, [r7, #31]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 8001160:	f000 fc0c 	bl	800197c <isBigEndian>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800116a:	7ffa      	ldrb	r2, [r7, #31]
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fc13 	bl	800199e <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d014      	beq.n	80011ae <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3320      	adds	r3, #32
 800118c:	443b      	add	r3, r7
 800118e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001192:	461a      	mov	r2, r3
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	425b      	negs	r3, r3
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	409a      	lsls	r2, r3
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	3320      	adds	r3, #32
 80011a8:	443b      	add	r3, r7
 80011aa:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	f107 0010 	add.w	r0, r7, #16
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2100      	movs	r1, #0
 80011bc:	f000 fa72 	bl	80016a4 <copyBitArray>
}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <incrementTransferID>:
    }
    return d;
}

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b1f      	cmp	r3, #31
 80011e2:	d902      	bls.n	80011ea <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
    }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	2b08      	cmp	r3, #8
 8001204:	d801      	bhi.n	800120a <dlcToDataLength+0x14>
        return dlc;
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	e01e      	b.n	8001248 <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d101      	bne.n	8001214 <dlcToDataLength+0x1e>
        return 12;
 8001210:	230c      	movs	r3, #12
 8001212:	e019      	b.n	8001248 <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d101      	bne.n	800121e <dlcToDataLength+0x28>
        return 16;
 800121a:	2310      	movs	r3, #16
 800121c:	e014      	b.n	8001248 <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	2b0b      	cmp	r3, #11
 8001222:	d101      	bne.n	8001228 <dlcToDataLength+0x32>
        return 20;
 8001224:	2314      	movs	r3, #20
 8001226:	e00f      	b.n	8001248 <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d101      	bne.n	8001232 <dlcToDataLength+0x3c>
        return 24;
 800122e:	2318      	movs	r3, #24
 8001230:	e00a      	b.n	8001248 <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	2b0d      	cmp	r3, #13
 8001236:	d101      	bne.n	800123c <dlcToDataLength+0x46>
        return 32;
 8001238:	2320      	movs	r3, #32
 800123a:	e005      	b.n	8001248 <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	2b0e      	cmp	r3, #14
 8001240:	d101      	bne.n	8001246 <dlcToDataLength+0x50>
        return 48;
 8001242:	2330      	movs	r3, #48	@ 0x30
 8001244:	e000      	b.n	8001248 <dlcToDataLength+0x52>
    }
    return 64;
 8001246:	2340      	movs	r3, #64	@ 0x40
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	2b08      	cmp	r3, #8
 8001262:	d801      	bhi.n	8001268 <dataLengthToDlc+0x14>
        return data_length;
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	e01e      	b.n	80012a6 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d801      	bhi.n	8001272 <dataLengthToDlc+0x1e>
        return 9;
 800126e:	2309      	movs	r3, #9
 8001270:	e019      	b.n	80012a6 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	2b10      	cmp	r3, #16
 8001276:	d801      	bhi.n	800127c <dataLengthToDlc+0x28>
        return 10;
 8001278:	230a      	movs	r3, #10
 800127a:	e014      	b.n	80012a6 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	2b14      	cmp	r3, #20
 8001280:	d801      	bhi.n	8001286 <dataLengthToDlc+0x32>
        return 11;
 8001282:	230b      	movs	r3, #11
 8001284:	e00f      	b.n	80012a6 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	2b18      	cmp	r3, #24
 800128a:	d801      	bhi.n	8001290 <dataLengthToDlc+0x3c>
        return 12;
 800128c:	230c      	movs	r3, #12
 800128e:	e00a      	b.n	80012a6 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	2b20      	cmp	r3, #32
 8001294:	d801      	bhi.n	800129a <dataLengthToDlc+0x46>
        return 13;
 8001296:	230d      	movs	r3, #13
 8001298:	e005      	b.n	80012a6 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	2b30      	cmp	r3, #48	@ 0x30
 800129e:	d801      	bhi.n	80012a4 <dataLengthToDlc+0x50>
        return 14;
 80012a0:	230e      	movs	r3, #14
 80012a2:	e000      	b.n	80012a6 <dataLengthToDlc+0x52>
    }
    return 15;
 80012a4:	230f      	movs	r3, #15
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b08a      	sub	sp, #40	@ 0x28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80012ca:	f06f 0301 	mvn.w	r3, #1
 80012ce:	e0f9      	b.n	80014c4 <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	8c1b      	ldrh	r3, [r3, #32]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <enqueueTxFrames+0x34>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80012e0:	f06f 0301 	mvn.w	r3, #1
 80012e4:	e0ee      	b.n	80014c4 <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 80012ea:	2308      	movs	r3, #8
 80012ec:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	8c1a      	ldrh	r2, [r3, #32]
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d24b      	bcs.n	8001392 <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	330c      	adds	r3, #12
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f929 	bl	8001556 <createTxItem>
 8001304:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800130c:	f06f 0302 	mvn.w	r3, #2
 8001310:	e0d8      	b.n	80014c4 <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f103 0008 	add.w	r0, r3, #8
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	69d9      	ldr	r1, [r3, #28]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	8c1b      	ldrh	r3, [r3, #32]
 8001320:	461a      	mov	r2, r3
 8001322:	f004 fca6 	bl	8005c72 <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	8c1b      	ldrh	r3, [r3, #32]
 800132a:	3301      	adds	r3, #1
 800132c:	b29b      	uxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff90 	bl	8001254 <dataLengthToDlc>
 8001334:	4603      	mov	r3, r0
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff5d 	bl	80011f6 <dlcToDataLength>
 800133c:	4603      	mov	r3, r0
 800133e:	3b01      	subs	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	8c1b      	ldrh	r3, [r3, #32]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2da      	uxtb	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	b2db      	uxtb	r3, r3
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	8c12      	ldrh	r2, [r2, #32]
 8001364:	4611      	mov	r1, r2
 8001366:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800136a:	b2da      	uxtb	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	440b      	add	r3, r1
 8001370:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 800137c:	6979      	ldr	r1, [r7, #20]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f8a4 	bl	80014cc <pushTxQueue>
        result++;
 8001384:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001388:	b29b      	uxth	r3, r3
 800138a:	3301      	adds	r3, #1
 800138c:	b29b      	uxth	r3, r3
 800138e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001390:	e096      	b.n	80014c0 <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t toggle = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t sot_eot = 0x80;
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        CanardTxQueueItem* queue_item = NULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 80013a6:	e085      	b.n	80014b4 <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	330c      	adds	r3, #12
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f8d2 	bl	8001556 <createTxItem>
 80013b2:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 80013ba:	f06f 0302 	mvn.w	r3, #2
 80013be:	e081      	b.n	80014c4 <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 80013c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	725a      	strb	r2, [r3, #9]
                i = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	843b      	strh	r3, [r7, #32]
 80013e2:	e012      	b.n	800140a <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80013e8:	e00f      	b.n	800140a <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	69da      	ldr	r2, [r3, #28]
 80013ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013f0:	441a      	add	r2, r3
 80013f2:	8c3b      	ldrh	r3, [r7, #32]
 80013f4:	7811      	ldrb	r1, [r2, #0]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4413      	add	r3, r2
 80013fa:	460a      	mov	r2, r1
 80013fc:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	3301      	adds	r3, #1
 8001402:	843b      	strh	r3, [r7, #32]
 8001404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001406:	3301      	adds	r3, #1
 8001408:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800140a:	8c3a      	ldrh	r2, [r7, #32]
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	3b01      	subs	r3, #1
 8001410:	429a      	cmp	r2, r3
 8001412:	da04      	bge.n	800141e <enqueueTxFrames+0x16c>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	8c1b      	ldrh	r3, [r3, #32]
 8001418:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800141a:	429a      	cmp	r2, r3
 800141c:	d3e5      	bcc.n	80013ea <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	8c1b      	ldrh	r3, [r3, #32]
 8001422:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001424:	429a      	cmp	r2, r3
 8001426:	d002      	beq.n	800142e <enqueueTxFrames+0x17c>
 8001428:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800142c:	e000      	b.n	8001430 <enqueueTxFrames+0x17e>
 800142e:	2340      	movs	r3, #64	@ 0x40
 8001430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001434:	8c3b      	ldrh	r3, [r7, #32]
 8001436:	3301      	adds	r3, #1
 8001438:	b29b      	uxth	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff0a 	bl	8001254 <dataLengthToDlc>
 8001440:	4603      	mov	r3, r0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fed7 	bl	80011f6 <dlcToDataLength>
 8001448:	4603      	mov	r3, r0
 800144a:	3b01      	subs	r3, #1
 800144c:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 800144e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	b2da      	uxtb	r2, r3
 8001456:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800145a:	4313      	orrs	r3, r2
 800145c:	b2d9      	uxtb	r1, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	b2da      	uxtb	r2, r3
 800146a:	8c3b      	ldrh	r3, [r7, #32]
 800146c:	430a      	orrs	r2, r1
 800146e:	b2d1      	uxtb	r1, r2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4413      	add	r3, r2
 8001474:	460a      	mov	r2, r1
 8001476:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001482:	8c3b      	ldrh	r3, [r7, #32]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b2da      	uxtb	r2, r3
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 f81b 	bl	80014cc <pushTxQueue>

            result++;
 8001496:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800149a:	b29b      	uxth	r3, r3
 800149c:	3301      	adds	r3, #1
 800149e:	b29b      	uxth	r3, r3
 80014a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
            toggle ^= 1;
 80014a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014a6:	f083 0301 	eor.w	r3, r3, #1
 80014aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sot_eot = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while (transfer->payload_len - data_index != 0)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	8c1b      	ldrh	r3, [r3, #32]
 80014b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f47f af74 	bne.w	80013a8 <enqueueTxFrames+0xf6>
        }
    }

    return result;
 80014c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 80014e4:	e034      	b.n	8001550 <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 80014f2:	e02a      	b.n	800154a <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f000 f840 	bl	8001584 <isPriorityHigher>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d012      	beq.n	8001530 <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d106      	bne.n	8001522 <pushTxQueue+0x56>
            {
                item->next = queue;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8001520:	e016      	b.n	8001550 <pushTxQueue+0x84>
                previous->next = item;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]
            return;
 800152e:	e00f      	b.n	8001550 <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <pushTxQueue+0x74>
            {
                queue->next = item;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	601a      	str	r2, [r3, #0]
                return;
 800153e:	e007      	b.n	8001550 <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1d1      	bne.n	80014f4 <pushTxQueue+0x28>
            }
        }
    }
}
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 faff 	bl	8001b62 <allocateBlock>
 8001564:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <createTxItem+0x1a>
    {
        return NULL;
 800156c:	2300      	movs	r3, #0
 800156e:	e005      	b.n	800157c <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8001570:	2214      	movs	r2, #20
 8001572:	2100      	movs	r1, #0
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f004 fae1 	bl	8005b3c <memset>
    return item;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	@ 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001594:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800159c:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	0fdb      	lsrs	r3, r3, #31
 80015a2:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0fdb      	lsrs	r3, r3, #31
 80015a8:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 80015aa:	7dfa      	ldrb	r2, [r7, #23]
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d01d      	beq.n	80015ee <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <isPriorityHigher+0x3a>
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	e000      	b.n	80015c0 <isPriorityHigher+0x3c>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 80015c2:	7dbb      	ldrb	r3, [r7, #22]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <isPriorityHigher+0x4a>
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	e000      	b.n	80015d0 <isPriorityHigher+0x4c>
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d007      	beq.n	80015ea <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	429a      	cmp	r2, r3
 80015e0:	bf34      	ite	cc
 80015e2:	2301      	movcc	r3, #1
 80015e4:	2300      	movcs	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	e022      	b.n	8001630 <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 80015ea:	7dbb      	ldrb	r3, [r7, #22]
 80015ec:	e020      	b.n	8001630 <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	429a      	cmp	r2, r3
 8001614:	d105      	bne.n	8001622 <isPriorityHigher+0x9e>
 8001616:	7d7a      	ldrb	r2, [r7, #21]
 8001618:	7d3b      	ldrb	r3, [r7, #20]
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 800161e:	7d3b      	ldrb	r3, [r7, #20]
 8001620:	e006      	b.n	8001630 <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	429a      	cmp	r2, r3
 8001628:	bf34      	ite	cc
 800162a:	2301      	movcc	r3, #1
 800162c:	2300      	movcs	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3724      	adds	r7, #36	@ 0x24
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <releaseStatePayload>:

    return state;
}

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001646:	e01b      	b.n	8001680 <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 020c 	add.w	r2, r3, #12
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f7ff fa4d 	bl	8000af4 <canardBufferFromIdx>
 800165a:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	330c      	adds	r3, #12
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 faa3 	bl	8001bb4 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	330c      	adds	r3, #12
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fa49 	bl	8000b0c <canardBufferToIdx>
 800167a:	4602      	mov	r2, r0
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1df      	bne.n	8001648 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	8ad3      	ldrh	r3, [r2, #22]
 800168c:	f36f 0309 	bfc	r3, #0, #10
 8001690:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
}
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 80016bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 80016ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 80016de:	e04d      	b.n	800177c <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 80016ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 80016f4:	7eba      	ldrb	r2, [r7, #26]
 80016f6:	7efb      	ldrb	r3, [r7, #27]
 80016f8:	4293      	cmp	r3, r2
 80016fa:	bf38      	it	cc
 80016fc:	4613      	movcc	r3, r2
 80016fe:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8001700:	7e7b      	ldrb	r3, [r7, #25]
 8001702:	f1c3 0208 	rsb	r2, r3, #8
 8001706:	69f9      	ldr	r1, [r7, #28]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1acb      	subs	r3, r1, r3
 800170c:	4293      	cmp	r3, r2
 800170e:	bf28      	it	cs
 8001710:	4613      	movcs	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8001714:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	7ebb      	ldrb	r3, [r7, #26]
 8001724:	fa42 f303 	asr.w	r3, r2, r3
 8001728:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	7efb      	ldrb	r3, [r7, #27]
 8001738:	409a      	lsls	r2, r3
 800173a:	7ebb      	ldrb	r3, [r7, #26]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	7cfb      	ldrb	r3, [r7, #19]
 800174e:	43db      	mvns	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4013      	ands	r3, r2
 8001754:	b2d9      	uxtb	r1, r3
 8001756:	7cba      	ldrb	r2, [r7, #18]
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	4013      	ands	r3, r2
 800175c:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 800175e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	6838      	ldr	r0, [r7, #0]
 8001764:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001766:	430a      	orrs	r2, r1
 8001768:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 800176a:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8001774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	4413      	add	r3, r2
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d1ad      	bne.n	80016e0 <copyBitArray+0x3c>
    }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b090      	sub	sp, #64	@ 0x40
 8001796:	af02      	add	r7, sp, #8
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8a9b      	ldrh	r3, [r3, #20]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	461a      	mov	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d301      	bcc.n	80017b4 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 80017b0:	2300      	movs	r3, #0
 80017b2:	e0df      	b.n	8001974 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 80017b4:	79fa      	ldrb	r2, [r7, #7]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	8a92      	ldrh	r2, [r2, #20]
 80017be:	00d2      	lsls	r2, r2, #3
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d908      	bls.n	80017d6 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8a9b      	ldrh	r3, [r3, #20]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d104      	bne.n	80017e8 <descatterTransferPayload+0x56>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80b9 	beq.w	800195a <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80017f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fa:	2b27      	cmp	r3, #39	@ 0x27
 80017fc:	d82d      	bhi.n	800185a <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80017fe:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001804:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001808:	429a      	cmp	r2, r3
 800180a:	d305      	bcc.n	8001818 <descatterTransferPayload+0x86>
 800180c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001814:	b2db      	uxtb	r3, r3
 8001816:	e001      	b.n	800181c <descatterTransferPayload+0x8a>
 8001818:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800181c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6898      	ldr	r0, [r3, #8]
 8001824:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001830:	f7ff ff38 	bl	80016a4 <copyBitArray>

            input_bit_offset += amount;
 8001834:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800183a:	4413      	add	r3, r2
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800183e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001842:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001846:	4413      	add	r3, r2
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800184c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001850:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8a9b      	ldrh	r3, [r3, #20]
 800185e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001862:	3b05      	subs	r3, #5
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8001868:	2328      	movs	r3, #40	@ 0x28
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8001872:	e044      	b.n	80018fe <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8001874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001876:	2be0      	cmp	r3, #224	@ 0xe0
 8001878:	bf28      	it	cs
 800187a:	23e0      	movcs	r3, #224	@ 0xe0
 800187c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800187e:	4413      	add	r3, r2
 8001880:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001886:	429a      	cmp	r2, r3
 8001888:	d92e      	bls.n	80018e8 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 800188a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800188e:	69f9      	ldr	r1, [r7, #28]
 8001890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001892:	1acb      	subs	r3, r1, r3
 8001894:	429a      	cmp	r2, r3
 8001896:	d306      	bcc.n	80018a6 <descatterTransferPayload+0x114>
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	e001      	b.n	80018aa <descatterTransferPayload+0x118>
 80018a6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80018aa:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 80018ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	1d18      	adds	r0, r3, #4
 80018b8:	7efa      	ldrb	r2, [r7, #27]
 80018ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6979      	ldr	r1, [r7, #20]
 80018c4:	f7ff feee 	bl	80016a4 <copyBitArray>

                input_bit_offset += amount;
 80018c8:	7efb      	ldrb	r3, [r7, #27]
 80018ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018cc:	4413      	add	r3, r2
 80018ce:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80018d0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80018d4:	7efb      	ldrb	r3, [r7, #27]
 80018d6:	4413      	add	r3, r2
 80018d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80018dc:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80018e0:	7efb      	ldrb	r3, [r7, #27]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 80018e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f0:	4413      	add	r3, r2
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <descatterTransferPayload+0x17a>
 8001904:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1b3      	bne.n	8001874 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d02c      	beq.n	800196e <descatterTransferPayload+0x1dc>
 8001914:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001918:	2b00      	cmp	r3, #0
 800191a:	d028      	beq.n	800196e <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 800191c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800191e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6918      	ldr	r0, [r3, #16]
 8001928:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800192c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6939      	ldr	r1, [r7, #16]
 8001936:	f7ff feb5 	bl	80016a4 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 800193a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800193e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001940:	4413      	add	r3, r2
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8001944:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001948:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800194c:	4413      	add	r3, r2
 800194e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 8001958:	e009      	b.n	800196e <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6898      	ldr	r0, [r3, #8]
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	f7ff fe9c 	bl	80016a4 <copyBitArray>
 800196c:	e000      	b.n	8001970 <descatterTransferPayload+0x1de>
    {
 800196e:	bf00      	nop
    }

    return bit_length;
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	b21b      	sxth	r3, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	3738      	adds	r7, #56	@ 0x38
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	2b01      	cmp	r3, #1
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
#endif
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 800199e:	b480      	push	{r7}
 80019a0:	b087      	sub	sp, #28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 80019b6:	e017      	b.n	80019e8 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	441a      	add	r2, r3
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	440b      	add	r3, r1
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4413      	add	r3, r2
 80019d8:	7afa      	ldrb	r2, [r7, #11]
 80019da:	701a      	strb	r2, [r3, #0]
        fwd++;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
        rev--;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d3e3      	bcc.n	80019b8 <swapByteOrder+0x1a>
    }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	460a      	mov	r2, r1
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8001a0e:	797b      	ldrb	r3, [r7, #5]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4053      	eors	r3, r2
 8001a1a:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e012      	b.n	8001a48 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8001a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da08      	bge.n	8001a3c <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001a34:	f083 0301 	eor.w	r3, r3, #1
 8001a38:	80fb      	strh	r3, [r7, #6]
 8001a3a:	e002      	b.n	8001a42 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d9e9      	bls.n	8001a22 <crcAddByte+0x24>
        }
    }
    return crc_val;
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4601      	mov	r1, r0
 8001a64:	e9c7 2300 	strd	r2, r3, [r7]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	82fb      	strh	r3, [r7, #22]
 8001a70:	e01b      	b.n	8001aaa <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8001a72:	8af9      	ldrh	r1, [r7, #22]
 8001a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a78:	f1c1 0620 	rsb	r6, r1, #32
 8001a7c:	f1a1 0020 	sub.w	r0, r1, #32
 8001a80:	fa22 f401 	lsr.w	r4, r2, r1
 8001a84:	fa03 f606 	lsl.w	r6, r3, r6
 8001a88:	4334      	orrs	r4, r6
 8001a8a:	fa23 f000 	lsr.w	r0, r3, r0
 8001a8e:	4304      	orrs	r4, r0
 8001a90:	fa23 f501 	lsr.w	r5, r3, r1
 8001a94:	b2e2      	uxtb	r2, r4
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ffaf 	bl	80019fe <crcAddByte>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001aa4:	8afb      	ldrh	r3, [r7, #22]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	82fb      	strh	r3, [r7, #22]
 8001aaa:	8afb      	ldrh	r3, [r7, #22]
 8001aac:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aae:	d9e0      	bls.n	8001a72 <crcAddSignature+0x16>
    }
    return crc_val;
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aba <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001ac8:	e00a      	b.n	8001ae0 <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	60ba      	str	r2, [r7, #8]
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	89fb      	ldrh	r3, [r7, #14]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff91 	bl	80019fe <crcAddByte>
 8001adc:	4603      	mov	r3, r0
 8001ade:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ef      	bne.n	8001aca <crcAdd+0x10>
    }
    return crc_val;
 8001aea:	89fb      	ldrh	r3, [r7, #14]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	@ 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3304      	adds	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8001b16:	e00b      	b.n	8001b30 <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	015b      	lsls	r3, r3, #5
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	441a      	add	r2, r3
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        current_index++;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3ef      	bcc.n	8001b18 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	3724      	adds	r7, #36	@ 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e018      	b.n	8001ba8 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	895b      	ldrh	r3, [r3, #10]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	899a      	ldrh	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	895b      	ldrh	r3, [r3, #10]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d203      	bcs.n	8001ba6 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	895a      	ldrh	r2, [r3, #10]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	895b      	ldrh	r3, [r3, #10]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <canardSTM32Transmit>:
  *         the configuration information for the specified FDCAN.
  * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
  * 		transmit.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hfdcan->ErrorCode
  */
int16_t canardSTM32Transmit(CAN_HandleTypeDef *hcan, const CanardCANFrame* const tx_frame) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8001bf8:	f06f 0301 	mvn.w	r3, #1
 8001bfc:	e042      	b.n	8001c84 <canardSTM32Transmit+0x9c>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 8001c0a:	f06f 0301 	mvn.w	r3, #1
 8001c0e:	e039      	b.n	8001c84 <canardSTM32Transmit+0x9c>

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da07      	bge.n	8001c28 <canardSTM32Transmit+0x40>
		// TODO: get extended IDs working correctly
		TxHeader.IDE = CAN_ID_EXT;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	61bb      	str	r3, [r7, #24]
		TxHeader.ExtId = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e006      	b.n	8001c36 <canardSTM32Transmit+0x4e>
	} else {
		TxHeader.IDE = CAN_ID_STD;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
		TxHeader.StdId = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c34:	613b      	str	r3, [r7, #16]
	}

	TxHeader.DLC = tx_frame->data_len;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	7b1b      	ldrb	r3, [r3, #12]
 8001c3a:	623b      	str	r3, [r7, #32]

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <canardSTM32Transmit+0x66>
		TxHeader.RTR = CAN_RTR_REMOTE;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	e001      	b.n	8001c52 <canardSTM32Transmit+0x6a>
	} else {
		TxHeader.RTR = CAN_RTR_DATA;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
	}

	TxHeader.TransmitGlobalTime = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	memcpy(TxData, tx_frame->data, TxHeader.DLC);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	1d19      	adds	r1, r3, #4
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f805 	bl	8005c72 <memcpy>

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &canMailBox) == HAL_OK) {
 8001c68:	f107 0208 	add.w	r2, r7, #8
 8001c6c:	f107 0110 	add.w	r1, r7, #16
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <canardSTM32Transmit+0xa4>)
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f001 fcbf 	bl	80035f6 <HAL_CAN_AddTxMessage>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <canardSTM32Transmit+0x9a>
//		printf("Successfully sent message with id: %lu \n", TxHeader.Identifier);
		return 1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <canardSTM32Transmit+0x9c>
	}

//	printf("Failed at adding message with id: %lu to Tx Fifo", TxHeader.Identifier);
	// This might be for many reasons including the Tx Fifo being full, the error can be read from hfdcan->ErrorCode
	return 0;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3728      	adds	r7, #40	@ 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000084 	.word	0x20000084

08001c90 <getUniqueID>:
}

/*
  get a 16 byte unique ID for this node, this should be based on the CPU unique ID or other unique ID
 */
void getUniqueID(uint8_t id[16]){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	uint32_t HALUniqueIDs[3];
// Make Unique ID out of the 96-bit STM32 UID and fill the rest with 0s
	memset(id, 0, 16);
 8001c98:	2210      	movs	r2, #16
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f003 ff4d 	bl	8005b3c <memset>
	HALUniqueIDs[0] = HAL_GetUIDw0();
 8001ca2:	f001 fb89 	bl	80033b8 <HAL_GetUIDw0>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60fb      	str	r3, [r7, #12]
	HALUniqueIDs[1] = HAL_GetUIDw1();
 8001caa:	f001 fb91 	bl	80033d0 <HAL_GetUIDw1>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	613b      	str	r3, [r7, #16]
	HALUniqueIDs[2] = HAL_GetUIDw2();
 8001cb2:	f001 fb99 	bl	80033e8 <HAL_GetUIDw2>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	617b      	str	r3, [r7, #20]
	memcpy(id, HALUniqueIDs, 12);
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f003 ffd5 	bl	8005c72 <memcpy>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <handle_NodeStatus>:
// NOTE: All canard handlers and senders are based on this reference: https://dronecan.github.io/Specification/7._List_of_standard_data_types/
// Alternatively, you can look at the corresponding generated header file in the dsdlc_generated folder

// Canard Handlers ( Many have code copied from libcanard esc_node example: https://github.com/dronecan/libcanard/blob/master/examples/ESCNode/esc_node.c )

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6838      	ldr	r0, [r7, #0]
 8001ce2:	f001 fad1 	bl	8003288 <uavcan_protocol_NodeStatus_decode>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d15d      	bne.n	8001da8 <handle_NodeStatus+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8001cec:	7c3b      	ldrb	r3, [r7, #16]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	7c7b      	ldrb	r3, [r7, #17]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	482e      	ldr	r0, [pc, #184]	@ (8001db0 <handle_NodeStatus+0xe0>)
 8001cf6:	f003 fdd1 	bl	800589c <iprintf>

	printf("Node Health ");
 8001cfa:	482e      	ldr	r0, [pc, #184]	@ (8001db4 <handle_NodeStatus+0xe4>)
 8001cfc:	f003 fdce 	bl	800589c <iprintf>

	switch (nodeStatus.health) {
 8001d00:	7c3b      	ldrb	r3, [r7, #16]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d81a      	bhi.n	8001d3c <handle_NodeStatus+0x6c>
 8001d06:	a201      	add	r2, pc, #4	@ (adr r2, 8001d0c <handle_NodeStatus+0x3c>)
 8001d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0c:	08001d1d 	.word	0x08001d1d
 8001d10:	08001d25 	.word	0x08001d25
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d35 	.word	0x08001d35
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 8001d1c:	4826      	ldr	r0, [pc, #152]	@ (8001db8 <handle_NodeStatus+0xe8>)
 8001d1e:	f003 fe2d 	bl	800597c <puts>
		break;
 8001d22:	e00f      	b.n	8001d44 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 8001d24:	4825      	ldr	r0, [pc, #148]	@ (8001dbc <handle_NodeStatus+0xec>)
 8001d26:	f003 fe29 	bl	800597c <puts>
		break;
 8001d2a:	e00b      	b.n	8001d44 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 8001d2c:	4824      	ldr	r0, [pc, #144]	@ (8001dc0 <handle_NodeStatus+0xf0>)
 8001d2e:	f003 fe25 	bl	800597c <puts>
		break;
 8001d32:	e007      	b.n	8001d44 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 8001d34:	4823      	ldr	r0, [pc, #140]	@ (8001dc4 <handle_NodeStatus+0xf4>)
 8001d36:	f003 fe21 	bl	800597c <puts>
		break;
 8001d3a:	e003      	b.n	8001d44 <handle_NodeStatus+0x74>
	default:
		printf("UNKNOWN?\n");
 8001d3c:	4822      	ldr	r0, [pc, #136]	@ (8001dc8 <handle_NodeStatus+0xf8>)
 8001d3e:	f003 fe1d 	bl	800597c <puts>
		break;
 8001d42:	bf00      	nop
	}

	printf("Node Mode ");
 8001d44:	4821      	ldr	r0, [pc, #132]	@ (8001dcc <handle_NodeStatus+0xfc>)
 8001d46:	f003 fda9 	bl	800589c <iprintf>

	switch(nodeStatus.mode) {
 8001d4a:	7c7b      	ldrb	r3, [r7, #17]
 8001d4c:	2b07      	cmp	r3, #7
 8001d4e:	d827      	bhi.n	8001da0 <handle_NodeStatus+0xd0>
 8001d50:	a201      	add	r2, pc, #4	@ (adr r2, 8001d58 <handle_NodeStatus+0x88>)
 8001d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d56:	bf00      	nop
 8001d58:	08001d79 	.word	0x08001d79
 8001d5c:	08001d81 	.word	0x08001d81
 8001d60:	08001d89 	.word	0x08001d89
 8001d64:	08001d91 	.word	0x08001d91
 8001d68:	08001da1 	.word	0x08001da1
 8001d6c:	08001da1 	.word	0x08001da1
 8001d70:	08001da1 	.word	0x08001da1
 8001d74:	08001d99 	.word	0x08001d99
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 8001d78:	4815      	ldr	r0, [pc, #84]	@ (8001dd0 <handle_NodeStatus+0x100>)
 8001d7a:	f003 fdff 	bl	800597c <puts>
		break;
 8001d7e:	e014      	b.n	8001daa <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 8001d80:	4814      	ldr	r0, [pc, #80]	@ (8001dd4 <handle_NodeStatus+0x104>)
 8001d82:	f003 fdfb 	bl	800597c <puts>
		break;
 8001d86:	e010      	b.n	8001daa <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 8001d88:	4813      	ldr	r0, [pc, #76]	@ (8001dd8 <handle_NodeStatus+0x108>)
 8001d8a:	f003 fdf7 	bl	800597c <puts>
		break;
 8001d8e:	e00c      	b.n	8001daa <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 8001d90:	4812      	ldr	r0, [pc, #72]	@ (8001ddc <handle_NodeStatus+0x10c>)
 8001d92:	f003 fdf3 	bl	800597c <puts>
		break;
 8001d96:	e008      	b.n	8001daa <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8001d98:	4811      	ldr	r0, [pc, #68]	@ (8001de0 <handle_NodeStatus+0x110>)
 8001d9a:	f003 fdef 	bl	800597c <puts>
		break;
 8001d9e:	e004      	b.n	8001daa <handle_NodeStatus+0xda>
	default:
		printf("UNKNOWN?\n");
 8001da0:	4809      	ldr	r0, [pc, #36]	@ (8001dc8 <handle_NodeStatus+0xf8>)
 8001da2:	f003 fdeb 	bl	800597c <puts>
		break;
 8001da6:	e000      	b.n	8001daa <handle_NodeStatus+0xda>
		return;
 8001da8:	bf00      	nop
	}
}
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	08006734 	.word	0x08006734
 8001db4:	08006758 	.word	0x08006758
 8001db8:	08006768 	.word	0x08006768
 8001dbc:	0800676c 	.word	0x0800676c
 8001dc0:	08006774 	.word	0x08006774
 8001dc4:	0800677c 	.word	0x0800677c
 8001dc8:	08006788 	.word	0x08006788
 8001dcc:	08006794 	.word	0x08006794
 8001dd0:	080067a0 	.word	0x080067a0
 8001dd4:	080067ac 	.word	0x080067ac
 8001dd8:	080067bc 	.word	0x080067bc
 8001ddc:	080067c8 	.word	0x080067c8
 8001de0:	080067d8 	.word	0x080067d8

08001de4 <handle_NotifyState>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0c8      	sub	sp, #288	@ 0x120
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001df2:	6018      	str	r0, [r3, #0]
 8001df4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001df8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dfc:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 8001dfe:	f107 0208 	add.w	r2, r7, #8
 8001e02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	f000 feea 	bl	8002be6 <ardupilot_indication_NotifyState_decode>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d13b      	bne.n	8001e90 <handle_NotifyState+0xac>
		return;
	}

	uint32_t nl = notifyState.vehicle_state & 0xFFFFFFFF;  // ignoring the last 32 bits for printing since the highest vehicle_state value right now is 23 even though they're allowed to be up to 64bit unsigned integer
 8001e18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e20:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8001e24:	4613      	mov	r3, r2
 8001e26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	printf("Vehicle State: %lu ", nl);
 8001e2a:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8001e2e:	481b      	ldr	r0, [pc, #108]	@ (8001e9c <handle_NotifyState+0xb8>)
 8001e30:	f003 fd34 	bl	800589c <iprintf>

	if (notifyState.aux_data.len > 0) {
 8001e34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e3c:	785b      	ldrb	r3, [r3, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d022      	beq.n	8001e88 <handle_NotifyState+0xa4>
		printf("Aux Data: 0x");
 8001e42:	4817      	ldr	r0, [pc, #92]	@ (8001ea0 <handle_NotifyState+0xbc>)
 8001e44:	f003 fd2a 	bl	800589c <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e4e:	e011      	b.n	8001e74 <handle_NotifyState+0x90>
			printf("%02x", notifyState.aux_data.data[i]);
 8001e50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e54:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8001e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4619      	mov	r1, r3
 8001e64:	480f      	ldr	r0, [pc, #60]	@ (8001ea4 <handle_NotifyState+0xc0>)
 8001e66:	f003 fd19 	bl	800589c <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8001e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001e84:	4293      	cmp	r3, r2
 8001e86:	dbe3      	blt.n	8001e50 <handle_NotifyState+0x6c>
		}
	}

	printf("\n");
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f003 fd19 	bl	80058c0 <putchar>
 8001e8e:	e000      	b.n	8001e92 <handle_NotifyState+0xae>
		return;
 8001e90:	bf00      	nop

}
 8001e92:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	080067e0 	.word	0x080067e0
 8001ea0:	080067f4 	.word	0x080067f4
 8001ea4:	08006804 	.word	0x08006804

08001ea8 <handle_GetNodeInfo>:

/*
  handle a GetNodeInfo request
*/
// TODO: All the data in here is temporary for testing. If actually need to send valid data, edit accordingly.
void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer) {
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 8001eae:	af06      	add	r7, sp, #24
 8001eb0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001eb4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001eb8:	6018      	str	r0, [r3, #0]
 8001eba:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001ebe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001ec2:	6019      	str	r1, [r3, #0]
	printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 8001ec4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001ec8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	7edb      	ldrb	r3, [r3, #27]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	484f      	ldr	r0, [pc, #316]	@ (8002010 <handle_GetNodeInfo+0x168>)
 8001ed4:	f003 fce2 	bl	800589c <iprintf>

	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
	struct uavcan_protocol_GetNodeInfoResponse pkt;

	memset(&pkt, 0, sizeof(pkt));
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fe2a 	bl	8005b3c <memset>

	node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 8001ee8:	f001 fa5a 	bl	80033a0 <HAL_GetTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <handle_GetNodeInfo+0x16c>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	4a48      	ldr	r2, [pc, #288]	@ (8002018 <handle_GetNodeInfo+0x170>)
 8001ef8:	6013      	str	r3, [r2, #0]
	pkt.status = node_status;
 8001efa:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001efe:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f02:	4a45      	ldr	r2, [pc, #276]	@ (8002018 <handle_GetNodeInfo+0x170>)
 8001f04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// fill in your major and minor firmware version
	pkt.software_version.major = 1;
 8001f0a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001f0e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f12:	2201      	movs	r2, #1
 8001f14:	741a      	strb	r2, [r3, #16]
	pkt.software_version.minor = 0;
 8001f16:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001f1a:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f1e:	2200      	movs	r2, #0
 8001f20:	745a      	strb	r2, [r3, #17]
	pkt.software_version.optional_field_flags = 0;
 8001f22:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001f26:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	749a      	strb	r2, [r3, #18]
	pkt.software_version.vcs_commit = 0; // should put git hash in here
 8001f2e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001f32:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]

	// should fill in hardware version
	pkt.hardware_version.major = 1;
 8001f3a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001f3e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]
	pkt.hardware_version.minor = 0;
 8001f48:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001f4c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// just setting all 16 bytes to 1 for testing
	getUniqueID(pkt.hardware_version.unique_id);
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	3322      	adds	r3, #34	@ 0x22
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fe97 	bl	8001c90 <getUniqueID>

	strncpy((char*)pkt.name.data, "SERVONode", sizeof(pkt.name.data));
 8001f62:	f107 0308 	add.w	r3, r7, #8
 8001f66:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8001f6a:	2250      	movs	r2, #80	@ 0x50
 8001f6c:	492b      	ldr	r1, [pc, #172]	@ (800201c <handle_GetNodeInfo+0x174>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fdec 	bl	8005b4c <strncpy>
	pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8001f7c:	2150      	movs	r1, #80	@ 0x50
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fdf7 	bl	8005b72 <strnlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001f8c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001f90:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132

	uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 8001f94:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 f898 	bl	80030d4 <uavcan_protocol_GetNodeInfoResponse_encode>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

	canardRequestOrRespond(ins,
 8001faa:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001fae:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	7edc      	ldrb	r4, [r3, #27]
 8001fb6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001fba:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3319      	adds	r3, #25
 8001fc2:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 8001fc6:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	7e92      	ldrb	r2, [r2, #26]
 8001fce:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001fd2:	f5a1 7043 	sub.w	r0, r1, #780	@ 0x30c
 8001fd6:	f8b7 130e 	ldrh.w	r1, [r7, #782]	@ 0x30e
 8001fda:	9105      	str	r1, [sp, #20]
 8001fdc:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001fe0:	9104      	str	r1, [sp, #16]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	9103      	str	r1, [sp, #12]
 8001fe6:	9202      	str	r2, [sp, #8]
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	2301      	movs	r3, #1
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	a306      	add	r3, pc, #24	@ (adr r3, 8002008 <handle_GetNodeInfo+0x160>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	6800      	ldr	r0, [r0, #0]
 8001ff8:	f7fe fdc4 	bl	8000b84 <canardRequestOrRespond>
						   &transfer->transfer_id,
						   transfer->priority,
						   CanardResponse,
						   &buffer[0],
						   total_size);
}
 8001ffc:	bf00      	nop
 8001ffe:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	21c46a9e 	.word	0x21c46a9e
 800200c:	ee468a81 	.word	0xee468a81
 8002010:	0800680c 	.word	0x0800680c
 8002014:	10624dd3 	.word	0x10624dd3
 8002018:	20000528 	.word	0x20000528
 800201c:	0800682c 	.word	0x0800682c

08002020 <send_NodeStatus>:

/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
void send_NodeStatus(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b0e6      	sub	sp, #408	@ 0x198
 8002024:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000UL;
 8002026:	f001 f9bb 	bl	80033a0 <HAL_GetTick>
 800202a:	4603      	mov	r3, r0
 800202c:	4a1a      	ldr	r2, [pc, #104]	@ (8002098 <send_NodeStatus+0x78>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	4a19      	ldr	r2, [pc, #100]	@ (800209c <send_NodeStatus+0x7c>)
 8002036:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8002038:	4b18      	ldr	r3, [pc, #96]	@ (800209c <send_NodeStatus+0x7c>)
 800203a:	2200      	movs	r2, #0
 800203c:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 800203e:	4b17      	ldr	r3, [pc, #92]	@ (800209c <send_NodeStatus+0x7c>)
 8002040:	2200      	movs	r2, #0
 8002042:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 8002044:	4b15      	ldr	r3, [pc, #84]	@ (800209c <send_NodeStatus+0x7c>)
 8002046:	2200      	movs	r2, #0
 8002048:	719a      	strb	r2, [r3, #6]

    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 800204a:	4b14      	ldr	r3, [pc, #80]	@ (800209c <send_NodeStatus+0x7c>)
 800204c:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8002050:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 8002052:	463b      	mov	r3, r7
 8002054:	4619      	mov	r1, r3
 8002056:	4811      	ldr	r0, [pc, #68]	@ (800209c <send_NodeStatus+0x7c>)
 8002058:	f001 f8fc 	bl	8003254 <uavcan_protocol_NodeStatus_encode>
 800205c:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 8002060:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002064:	b29b      	uxth	r3, r3
 8002066:	9304      	str	r3, [sp, #16]
 8002068:	463b      	mov	r3, r7
 800206a:	9303      	str	r3, [sp, #12]
 800206c:	2318      	movs	r3, #24
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <send_NodeStatus+0x80>)
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	f240 1355 	movw	r3, #341	@ 0x155
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	a305      	add	r3, pc, #20	@ (adr r3, 8002090 <send_NodeStatus+0x70>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	4808      	ldr	r0, [pc, #32]	@ (80020a4 <send_NodeStatus+0x84>)
 8002082:	f7fe fc85 	bl	8000990 <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 8002086:	bf00      	nop
 8002088:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	c1a7c6f1 	.word	0xc1a7c6f1
 8002094:	0f0868d0 	.word	0x0f0868d0
 8002098:	10624dd3 	.word	0x10624dd3
 800209c:	20000528 	.word	0x20000528
 80020a0:	20000534 	.word	0x20000534
 80020a4:	200000fc 	.word	0x200000fc

080020a8 <onTransferReceived>:

// Implement Ardupilot can lighting protocol

void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  switch (transfer->data_type_id) {
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	8adb      	ldrh	r3, [r3, #22]
 80020b6:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01c      	beq.n	80020f8 <onTransferReceived+0x50>
 80020be:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80020c2:	4293      	cmp	r3, r2
 80020c4:	dc22      	bgt.n	800210c <onTransferReceived+0x64>
 80020c6:	f240 4239 	movw	r2, #1081	@ 0x439
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <onTransferReceived+0x5a>
 80020ce:	f240 4239 	movw	r2, #1081	@ 0x439
 80020d2:	4293      	cmp	r3, r2
 80020d4:	dc1a      	bgt.n	800210c <onTransferReceived+0x64>
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d004      	beq.n	80020e4 <onTransferReceived+0x3c>
 80020da:	f240 1255 	movw	r2, #341	@ 0x155
 80020de:	4293      	cmp	r3, r2
 80020e0:	d005      	beq.n	80020ee <onTransferReceived+0x46>
  }
	// Specific efs-can-lighting functional
	case UAVCAN_EQUIPMENT_INDICATION_LIGHTSCOMMAND_ID:
	  handle_lights_command(ins, transfer);
	}
}
 80020e2:	e013      	b.n	800210c <onTransferReceived+0x64>
    handle_GetNodeInfo(ins, transfer);
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fede 	bl	8001ea8 <handle_GetNodeInfo>
    break;
 80020ec:	e00e      	b.n	800210c <onTransferReceived+0x64>
    handle_NodeStatus(ins, transfer);
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fded 	bl	8001cd0 <handle_NodeStatus>
    break;
 80020f6:	e009      	b.n	800210c <onTransferReceived+0x64>
    handle_NotifyState(ins, transfer);
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fe72 	bl	8001de4 <handle_NotifyState>
    break;
 8002100:	e004      	b.n	800210c <onTransferReceived+0x64>
	  handle_lights_command(ins, transfer);
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f8c7 	bl	8002298 <handle_lights_command>
}
 800210a:	e7ff      	b.n	800210c <onTransferReceived+0x64>
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	0000      	movs	r0, r0
	...

08002118 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                            uint64_t *out_data_type_signature,
                            uint16_t data_type_id,
                            CanardTransferType transfer_type,
                            uint8_t source_node_id)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	460b      	mov	r3, r1
 8002128:	80fb      	strh	r3, [r7, #6]
 800212a:	4613      	mov	r3, r2
 800212c:	717b      	strb	r3, [r7, #5]
  
  switch (data_type_id) {
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <shouldAcceptTransfer+0x66>
 8002138:	f644 6227 	movw	r2, #20007	@ 0x4e27
 800213c:	4293      	cmp	r3, r2
 800213e:	dc2f      	bgt.n	80021a0 <shouldAcceptTransfer+0x88>
 8002140:	f240 4239 	movw	r2, #1081	@ 0x439
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <shouldAcceptTransfer+0x76>
 8002148:	f240 4239 	movw	r2, #1081	@ 0x439
 800214c:	4293      	cmp	r3, r2
 800214e:	dc27      	bgt.n	80021a0 <shouldAcceptTransfer+0x88>
 8002150:	2b01      	cmp	r3, #1
 8002152:	d004      	beq.n	800215e <shouldAcceptTransfer+0x46>
 8002154:	f240 1255 	movw	r2, #341	@ 0x155
 8002158:	4293      	cmp	r3, r2
 800215a:	d008      	beq.n	800216e <shouldAcceptTransfer+0x56>
 800215c:	e020      	b.n	80021a0 <shouldAcceptTransfer+0x88>
  // General CAN node functionality
  case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
    *out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	a313      	add	r3, pc, #76	@ (adr r3, 80021b0 <shouldAcceptTransfer+0x98>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 800216a:	2301      	movs	r3, #1
 800216c:	e019      	b.n	80021a2 <shouldAcceptTransfer+0x8a>
  }
  case UAVCAN_PROTOCOL_NODESTATUS_ID: {
    *out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	a311      	add	r3, pc, #68	@ (adr r3, 80021b8 <shouldAcceptTransfer+0xa0>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 800217a:	2301      	movs	r3, #1
 800217c:	e011      	b.n	80021a2 <shouldAcceptTransfer+0x8a>
  }
  case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
    *out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	a30f      	add	r3, pc, #60	@ (adr r3, 80021c0 <shouldAcceptTransfer+0xa8>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 800218a:	2301      	movs	r3, #1
 800218c:	e009      	b.n	80021a2 <shouldAcceptTransfer+0x8a>
  }
	// Specific efs-can-lighting functionality
	case UAVCAN_EQUIPMENT_INDICATION_LIGHTSCOMMAND_ID:
	  *out_data_type_signature = UAVCAN_EQUIPMENT_INDICATION_LIGHTSCOMMAND_ID;
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	f240 4239 	movw	r2, #1081	@ 0x439
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9c1 2300 	strd	r2, r3, [r1]
	  return true;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <shouldAcceptTransfer+0x8a>
	}

	// ignore all other kinds of messages
	return false;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	21c46a9e 	.word	0x21c46a9e
 80021b4:	ee468a81 	.word	0xee468a81
 80021b8:	c1a7c6f1 	.word	0xc1a7c6f1
 80021bc:	0f0868d0 	.word	0x0f0868d0
 80021c0:	1651fdec 	.word	0x1651fdec
 80021c4:	631f2a9c 	.word	0x631f2a9c

080021c8 <processCanardTxQueue>:

void processCanardTxQueue(CAN_HandleTypeDef *hfdcan) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 80021d0:	e01a      	b.n	8002208 <processCanardTxQueue+0x40>
		const int16_t tx_res = canardSTM32Transmit(hfdcan, tx_frame);
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fd07 	bl	8001be8 <canardSTM32Transmit>
 80021da:	4603      	mov	r3, r0
 80021dc:	817b      	strh	r3, [r7, #10]

		if (tx_res < 0) {
 80021de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da06      	bge.n	80021f4 <processCanardTxQueue+0x2c>
			printf("Transmit error %d\n", tx_res);
 80021e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <processCanardTxQueue+0x58>)
 80021ee:	f003 fb55 	bl	800589c <iprintf>
 80021f2:	e006      	b.n	8002202 <processCanardTxQueue+0x3a>
		} else if (tx_res > 0) {
 80021f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	dd02      	ble.n	8002202 <processCanardTxQueue+0x3a>
			printf("Successfully transmitted message\n");
 80021fc:	4809      	ldr	r0, [pc, #36]	@ (8002224 <processCanardTxQueue+0x5c>)
 80021fe:	f003 fbbd 	bl	800597c <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 8002202:	4809      	ldr	r0, [pc, #36]	@ (8002228 <processCanardTxQueue+0x60>)
 8002204:	f7fe fd59 	bl	8000cba <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8002208:	4807      	ldr	r0, [pc, #28]	@ (8002228 <processCanardTxQueue+0x60>)
 800220a:	f7fe fd43 	bl	8000c94 <canardPeekTxQueue>
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1dd      	bne.n	80021d2 <processCanardTxQueue+0xa>
	}
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	08006838 	.word	0x08006838
 8002224:	0800684c 	.word	0x0800684c
 8002228:	200000fc 	.word	0x200000fc

0800222c <process1HzTasks>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
void process1HzTasks(uint64_t timestamp_usec) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 8002236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800223a:	4804      	ldr	r0, [pc, #16]	@ (800224c <process1HzTasks+0x20>)
 800223c:	f7fe fd52 	bl	8000ce4 <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 8002240:	f7ff feee 	bl	8002020 <send_NodeStatus>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200000fc 	.word	0x200000fc

08002250 <constrain_int16>:

int16_t constrain_int16(int16_t value, int16_t min, int16_t max) {
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
 800225a:	460b      	mov	r3, r1
 800225c:	80bb      	strh	r3, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	807b      	strh	r3, [r7, #2]
  if (value < min) {
 8002262:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002266:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	da02      	bge.n	8002274 <constrain_int16+0x24>
    return min;
 800226e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002272:	e00a      	b.n	800228a <constrain_int16+0x3a>
  }
  if (value > max) {
 8002274:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002278:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800227c:	429a      	cmp	r2, r3
 800227e:	dd02      	ble.n	8002286 <constrain_int16+0x36>
    return max;
 8002280:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002284:	e001      	b.n	800228a <constrain_int16+0x3a>
  }
  return value;
 8002286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <handle_lights_command>:

// TODO: implement these
void handle_lights_command(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b09c      	sub	sp, #112	@ 0x70
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  struct uavcan_equipment_indication_LightsCommand req;
  if (uavcan_equipment_indication_LightsCommand_decode(transfer, &req)) {
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4619      	mov	r1, r3
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f000 fd86 	bl	8002dba <uavcan_equipment_indication_LightsCommand_decode>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 8093 	bne.w	80023dc <handle_lights_command+0x144>
    return;
  }
  for (uint8_t i = 0; i < req.commands.len; i++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80022bc:	e087      	b.n	80023ce <handle_lights_command+0x136>
    struct uavcan_equipment_indication_SingleLightCommand cmd = req.commands.data[i];
 80022be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	3370      	adds	r3, #112	@ 0x70
 80022c6:	443b      	add	r3, r7
 80022c8:	f107 020c 	add.w	r2, r7, #12
 80022cc:	3b5f      	subs	r3, #95	@ 0x5f
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	6010      	str	r0, [r2, #0]
    // green needs extra scaling so that it is in the same format as red and blue
    uint8_t red = cmd.color.red << 3U;
 80022d2:	7b7b      	ldrb	r3, [r7, #13]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    uint8_t green = (cmd.color.green >> 1U) << 3U;
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    uint8_t blue = cmd.color.blue << 3U;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

    // TODO: properly find brightness, depends on whether we want to use LED_NOTIFY or not
    int8_t brightness = 99;
 80022ee:	2363      	movs	r3, #99	@ 0x63
 80022f0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    if (brightness != 100 && brightness >= 0) {
 80022f4:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 80022f8:	2b64      	cmp	r3, #100	@ 0x64
 80022fa:	d05a      	beq.n	80023b2 <handle_lights_command+0x11a>
 80022fc:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 8002300:	2b00      	cmp	r3, #0
 8002302:	db56      	blt.n	80023b2 <handle_lights_command+0x11a>
      const float scale = brightness * 0.01;
 8002304:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fa2d 	bl	8000768 <__aeabi_i2d>
 800230e:	a336      	add	r3, pc, #216	@ (adr r3, 80023e8 <handle_lights_command+0x150>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fd ffac 	bl	8000270 <__aeabi_dmul>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fa8c 	bl	800083c <__aeabi_d2f>
 8002324:	4603      	mov	r3, r0
 8002326:	667b      	str	r3, [r7, #100]	@ 0x64
      red = constrain_int16(red * scale, 0, 255);
 8002328:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002334:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002340:	ee17 3a90 	vmov	r3, s15
 8002344:	b21b      	sxth	r3, r3
 8002346:	22ff      	movs	r2, #255	@ 0xff
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff80 	bl	8002250 <constrain_int16>
 8002350:	4603      	mov	r3, r0
 8002352:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      green = constrain_int16(green * scale, 0, 255);
 8002356:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002362:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800236e:	ee17 3a90 	vmov	r3, s15
 8002372:	b21b      	sxth	r3, r3
 8002374:	22ff      	movs	r2, #255	@ 0xff
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff69 	bl	8002250 <constrain_int16>
 800237e:	4603      	mov	r3, r0
 8002380:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
      blue = constrain_int16(blue * scale, 0, 255);
 8002384:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002390:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239c:	ee17 3a90 	vmov	r3, s15
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	22ff      	movs	r2, #255	@ 0xff
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff52 	bl	8002250 <constrain_int16>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    }
    set_rgb_led(red, green, blue);
 80023b2:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80023b6:	f897 106d 	ldrb.w	r1, [r7, #109]	@ 0x6d
 80023ba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f816 	bl	80023f0 <set_rgb_led>
  for (uint8_t i = 0; i < req.commands.len; i++) {
 80023c4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80023c8:	3301      	adds	r3, #1
 80023ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80023ce:	7c3b      	ldrb	r3, [r7, #16]
 80023d0:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f4ff af72 	bcc.w	80022be <handle_lights_command+0x26>
 80023da:	e000      	b.n	80023de <handle_lights_command+0x146>
    return;
 80023dc:	bf00      	nop
  }
}
 80023de:	3770      	adds	r7, #112	@ 0x70
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	f3af 8000 	nop.w
 80023e8:	47ae147b 	.word	0x47ae147b
 80023ec:	3f847ae1 	.word	0x3f847ae1

080023f0 <set_rgb_led>:

void set_rgb_led(uint8_t red, uint8_t green, uint8_t blue) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	460b      	mov	r3, r1
 80023fc:	71bb      	strb	r3, [r7, #6]
 80023fe:	4613      	mov	r3, r2
 8002400:	717b      	strb	r3, [r7, #5]
  printf("set led to r=%u g=%u b=%u\n", red, green, blue);
 8002402:	79f9      	ldrb	r1, [r7, #7]
 8002404:	79ba      	ldrb	r2, [r7, #6]
 8002406:	797b      	ldrb	r3, [r7, #5]
 8002408:	4803      	ldr	r0, [pc, #12]	@ (8002418 <set_rgb_led+0x28>)
 800240a:	f003 fa47 	bl	800589c <iprintf>
  // TODO: set the leds :)
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	08006870 	.word	0x08006870

0800241c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800241c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002420:	b08c      	sub	sp, #48	@ 0x30
 8002422:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002424:	f000 ff54 	bl	80032d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002428:	f000 f866 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800242c:	f000 f98a 	bl	8002744 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002430:	f000 f8a8 	bl	8002584 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002434:	f000 f8da 	bl	80025ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  canardInit(&canard, memory_pool, sizeof(memory_pool), onTransferReceived, shouldAcceptTransfer, NULL);
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	4b29      	ldr	r3, [pc, #164]	@ (80024e4 <main+0xc8>)
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <main+0xcc>)
 8002442:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002446:	4929      	ldr	r1, [pc, #164]	@ (80024ec <main+0xd0>)
 8002448:	4829      	ldr	r0, [pc, #164]	@ (80024f0 <main+0xd4>)
 800244a:	f7fe fa47 	bl	80008dc <canardInit>
  uint64_t next_1hz_service_at = HAL_GetTick();
 800244e:	f000 ffa7 	bl	80033a0 <HAL_GetTick>
 8002452:	4603      	mov	r3, r0
 8002454:	2200      	movs	r2, #0
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	60fa      	str	r2, [r7, #12]
 800245a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800245e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  uint64_t next_50hz_service_at = HAL_GetTick();
 8002462:	f000 ff9d 	bl	80033a0 <HAL_GetTick>
 8002466:	4603      	mov	r3, r0
 8002468:	2200      	movs	r2, #0
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002472:	e9c7 2306 	strd	r2, r3, [r7, #24]

  // static node allocation
  if (NODE_ID > 0) {
	  canardSetLocalNodeID(&canard, NODE_ID);
 8002476:	2165      	movs	r1, #101	@ 0x65
 8002478:	481d      	ldr	r0, [pc, #116]	@ (80024f0 <main+0xd4>)
 800247a:	f7fe fa63 	bl	8000944 <canardSetLocalNodeID>
  while (1)
  {
    /* USER CODE END WHILE */
  
    /* USER CODE BEGIN 3 */
    processCanardTxQueue(&hcan1);
 800247e:	481d      	ldr	r0, [pc, #116]	@ (80024f4 <main+0xd8>)
 8002480:	f7ff fea2 	bl	80021c8 <processCanardTxQueue>

    const uint64_t ts = HAL_GetTick();
 8002484:	f000 ff8c 	bl	80033a0 <HAL_GetTick>
 8002488:	4603      	mov	r3, r0
 800248a:	2200      	movs	r2, #0
 800248c:	469a      	mov	sl, r3
 800248e:	4693      	mov	fp, r2
 8002490:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    if (ts >= next_1hz_service_at) {
 8002494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002498:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800249c:	4290      	cmp	r0, r2
 800249e:	eb71 0303 	sbcs.w	r3, r1, r3
 80024a2:	d30b      	bcc.n	80024bc <main+0xa0>
      next_1hz_service_at += 1000ULL;
 80024a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024a8:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 80024ac:	f143 0500 	adc.w	r5, r3, #0
 80024b0:	e9c7 4508 	strd	r4, r5, [r7, #32]
      process1HzTasks(ts);
 80024b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b8:	f7ff feb8 	bl	800222c <process1HzTasks>
    }
    if (ts >= next_50hz_service_at) {
 80024bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	4290      	cmp	r0, r2
 80024c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80024ca:	d3d8      	bcc.n	800247e <main+0x62>
      next_50hz_service_at += 1000000ULL/50U;
 80024cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d0:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80024d4:	eb12 0801 	adds.w	r8, r2, r1
 80024d8:	f143 0900 	adc.w	r9, r3, #0
 80024dc:	e9c7 8906 	strd	r8, r9, [r7, #24]
  {
 80024e0:	e7cd      	b.n	800247e <main+0x62>
 80024e2:	bf00      	nop
 80024e4:	08002119 	.word	0x08002119
 80024e8:	080020a9 	.word	0x080020a9
 80024ec:	20000128 	.word	0x20000128
 80024f0:	200000fc 	.word	0x200000fc
 80024f4:	20000088 	.word	0x20000088

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b096      	sub	sp, #88	@ 0x58
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	2244      	movs	r2, #68	@ 0x44
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fb18 	bl	8005b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	463b      	mov	r3, r7
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800251a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800251e:	f001 fba9 	bl	8003c74 <HAL_PWREx_ControlVoltageScaling>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002528:	f000 f930 	bl	800278c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800252c:	2310      	movs	r3, #16
 800252e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002530:	2301      	movs	r3, #1
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002538:	2360      	movs	r3, #96	@ 0x60
 800253a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800253c:	2300      	movs	r3, #0
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4618      	mov	r0, r3
 8002546:	f001 fbeb 	bl	8003d20 <HAL_RCC_OscConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002550:	f000 f91c 	bl	800278c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002554:	230f      	movs	r3, #15
 8002556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f001 ffeb 	bl	8004548 <HAL_RCC_ClockConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002578:	f000 f908 	bl	800278c <Error_Handler>
  }
}
 800257c:	bf00      	nop
 800257e:	3758      	adds	r7, #88	@ 0x58
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002588:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <MX_CAN1_Init+0x60>)
 800258a:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <MX_CAN1_Init+0x64>)
 800258c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <MX_CAN1_Init+0x60>)
 8002590:	2210      	movs	r2, #16
 8002592:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002594:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <MX_CAN1_Init+0x60>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800259a:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <MX_CAN1_Init+0x60>)
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80025a0:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80025a6:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80025ac:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80025b2:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80025d0:	4804      	ldr	r0, [pc, #16]	@ (80025e4 <MX_CAN1_Init+0x60>)
 80025d2:	f000 ff15 	bl	8003400 <HAL_CAN_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80025dc:	f000 f8d6 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000088 	.word	0x20000088
 80025e8:	40006400 	.word	0x40006400

080025ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b09a      	sub	sp, #104	@ 0x68
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
 800261c:	615a      	str	r2, [r3, #20]
 800261e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	222c      	movs	r2, #44	@ 0x2c
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fa88 	bl	8005b3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800262c:	4b43      	ldr	r3, [pc, #268]	@ (800273c <MX_TIM1_Init+0x150>)
 800262e:	4a44      	ldr	r2, [pc, #272]	@ (8002740 <MX_TIM1_Init+0x154>)
 8002630:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002632:	4b42      	ldr	r3, [pc, #264]	@ (800273c <MX_TIM1_Init+0x150>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b40      	ldr	r3, [pc, #256]	@ (800273c <MX_TIM1_Init+0x150>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800263e:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <MX_TIM1_Init+0x150>)
 8002640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002644:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <MX_TIM1_Init+0x150>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800264c:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <MX_TIM1_Init+0x150>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002652:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <MX_TIM1_Init+0x150>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002658:	4838      	ldr	r0, [pc, #224]	@ (800273c <MX_TIM1_Init+0x150>)
 800265a:	f002 f961 	bl	8004920 <HAL_TIM_Base_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002664:	f000 f892 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800266c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800266e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002672:	4619      	mov	r1, r3
 8002674:	4831      	ldr	r0, [pc, #196]	@ (800273c <MX_TIM1_Init+0x150>)
 8002676:	f002 fb1f 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002680:	f000 f884 	bl	800278c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002684:	482d      	ldr	r0, [pc, #180]	@ (800273c <MX_TIM1_Init+0x150>)
 8002686:	f002 f9a2 	bl	80049ce <HAL_TIM_PWM_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002690:	f000 f87c 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026a4:	4619      	mov	r1, r3
 80026a6:	4825      	ldr	r0, [pc, #148]	@ (800273c <MX_TIM1_Init+0x150>)
 80026a8:	f002 ff58 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80026b2:	f000 f86b 	bl	800278c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026b6:	2360      	movs	r3, #96	@ 0x60
 80026b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026be:	2300      	movs	r3, #0
 80026c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c2:	2300      	movs	r3, #0
 80026c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026d6:	2204      	movs	r2, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4818      	ldr	r0, [pc, #96]	@ (800273c <MX_TIM1_Init+0x150>)
 80026dc:	f002 f9d8 	bl	8004a90 <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80026e6:	f000 f851 	bl	800278c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002702:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800270c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4807      	ldr	r0, [pc, #28]	@ (800273c <MX_TIM1_Init+0x150>)
 8002720:	f002 ff82 	bl	8005628 <HAL_TIMEx_ConfigBreakDeadTime>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800272a:	f000 f82f 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800272e:	4803      	ldr	r0, [pc, #12]	@ (800273c <MX_TIM1_Init+0x150>)
 8002730:	f000 f8ba 	bl	80028a8 <HAL_TIM_MspPostInit>

}
 8002734:	bf00      	nop
 8002736:	3768      	adds	r7, #104	@ 0x68
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200000b0 	.word	0x200000b0
 8002740:	40012c00 	.word	0x40012c00

08002744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <MX_GPIO_Init+0x44>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	4a0e      	ldr	r2, [pc, #56]	@ (8002788 <MX_GPIO_Init+0x44>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002756:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <MX_GPIO_Init+0x44>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <MX_GPIO_Init+0x44>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <MX_GPIO_Init+0x44>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <MX_GPIO_Init+0x44>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <Error_Handler+0x8>

08002798 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <HAL_MspInit+0x44>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	4a0e      	ldr	r2, [pc, #56]	@ (80027dc <HAL_MspInit+0x44>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_MspInit+0x44>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_MspInit+0x44>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <HAL_MspInit+0x44>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_MspInit+0x44>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <HAL_CAN_MspInit+0x80>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d129      	bne.n	8002856 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002802:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <HAL_CAN_MspInit+0x84>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <HAL_CAN_MspInit+0x84>)
 8002808:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800280c:	6593      	str	r3, [r2, #88]	@ 0x58
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <HAL_CAN_MspInit+0x84>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_CAN_MspInit+0x84>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281e:	4a11      	ldr	r2, [pc, #68]	@ (8002864 <HAL_CAN_MspInit+0x84>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002826:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <HAL_CAN_MspInit+0x84>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002832:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002844:	2309      	movs	r3, #9
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002852:	f001 f887 	bl	8003964 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002856:	bf00      	nop
 8002858:	3728      	adds	r7, #40	@ 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40006400 	.word	0x40006400
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_TIM_Base_MspInit+0x38>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10b      	bne.n	8002892 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800287a:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <HAL_TIM_Base_MspInit+0x3c>)
 800287c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002880:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002884:	6613      	str	r3, [r2, #96]	@ 0x60
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a11      	ldr	r2, [pc, #68]	@ (800290c <HAL_TIM_MspPostInit+0x64>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d11b      	bne.n	8002902 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_TIM_MspPostInit+0x68>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	4a10      	ldr	r2, [pc, #64]	@ (8002910 <HAL_TIM_MspPostInit+0x68>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <HAL_TIM_MspPostInit+0x68>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028e2:	2301      	movs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	@ (8002914 <HAL_TIM_MspPostInit+0x6c>)
 80028fe:	f001 f831 	bl	8003964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002902:	bf00      	nop
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40021000 	.word	0x40021000
 8002914:	48000400 	.word	0x48000400

08002918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <NMI_Handler+0x4>

08002920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <MemManage_Handler+0x4>

08002930 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <BusFault_Handler+0x4>

08002938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <UsageFault_Handler+0x4>

08002940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296e:	f000 fd03 	bl	8003378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}

08002976 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e00a      	b.n	800299e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002988:	f3af 8000 	nop.w
 800298c:	4601      	mov	r1, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	60ba      	str	r2, [r7, #8]
 8002994:	b2ca      	uxtb	r2, r1
 8002996:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dbf0      	blt.n	8002988 <_read+0x12>
  }

  return len;
 80029a6:	687b      	ldr	r3, [r7, #4]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e009      	b.n	80029d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	60ba      	str	r2, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3301      	adds	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	dbf1      	blt.n	80029c2 <_write+0x12>
  }
  return len;
 80029de:	687b      	ldr	r3, [r7, #4]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_close>:

int _close(int file)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a10:	605a      	str	r2, [r3, #4]
  return 0;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_isatty>:

int _isatty(int file)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a28:	2301      	movs	r3, #1
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <_sbrk+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <_sbrk+0x60>)
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <_sbrk+0x64>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	@ (8002ab8 <_sbrk+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a80:	f003 f8ca 	bl	8005c18 <__errno>
 8002a84:	4603      	mov	r3, r0
 8002a86:	220c      	movs	r2, #12
 8002a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	e009      	b.n	8002aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a90:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a96:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a05      	ldr	r2, [pc, #20]	@ (8002ab4 <_sbrk+0x64>)
 8002aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20010000 	.word	0x20010000
 8002ab0:	00000400 	.word	0x00000400
 8002ab4:	20000538 	.word	0x20000538
 8002ab8:	20000690 	.word	0x20000690

08002abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae4:	f7ff ffea 	bl	8002abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002aea:	490d      	ldr	r1, [pc, #52]	@ (8002b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aec:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <LoopForever+0xe>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b00:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <LoopForever+0x16>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f003 f889 	bl	8005c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b12:	f7ff fc83 	bl	800241c <main>

08002b16 <LoopForever>:

LoopForever:
    b LoopForever
 8002b16:	e7fe      	b.n	8002b16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002b24:	08006914 	.word	0x08006914
  ldr r2, =_sbss
 8002b28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002b2c:	2000068c 	.word	0x2000068c

08002b30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <ADC1_IRQHandler>

08002b32 <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af02      	add	r7, sp, #8
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7fe f935 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 8;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f103 0208 	add.w	r2, r3, #8
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3301      	adds	r3, #1
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7fe f925 	bl	8000dbc <canardDecodeScalar>
    *bit_ofs += 8;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f103 0208 	add.w	r2, r3, #8
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e014      	b.n	8002bae <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2300      	movs	r3, #0
 8002b94:	2208      	movs	r2, #8
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7fe f910 	bl	8000dbc <canardDecodeScalar>

        *bit_ofs += 8;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f103 0208 	add.w	r2, r3, #8
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3301      	adds	r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d3e4      	bcc.n	8002b84 <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2240      	movs	r2, #64	@ 0x40
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7fe f8f6 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 64;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8002bdc:	2300      	movs	r3, #0

}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 8002bf4:	f107 0108 	add.w	r1, r7, #8
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff98 	bl	8002b32 <_ardupilot_indication_NotifyState_decode>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e00c      	b.n	8002c26 <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	3307      	adds	r3, #7
 8002c10:	08db      	lsrs	r3, r3, #3
 8002c12:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8a9b      	ldrh	r3, [r3, #20]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_uavcan_equipment_indication_RGB565_decode>:
}

/*
 decode uavcan_equipment_indication_RGB565, return true on failure, false on success
*/
bool _uavcan_equipment_indication_RGB565_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_indication_RGB565* msg, bool tao) {
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af02      	add	r7, sp, #8
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->red);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6819      	ldr	r1, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2300      	movs	r3, #0
 8002c46:	2205      	movs	r2, #5
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7fe f8b7 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 5;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1d5a      	adds	r2, r3, #5
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 6, false, &msg->green);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2300      	movs	r3, #0
 8002c64:	2206      	movs	r2, #6
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7fe f8a8 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 6;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1d9a      	adds	r2, r3, #6
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->blue);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2300      	movs	r3, #0
 8002c82:	2205      	movs	r2, #5
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7fe f899 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 5;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1d5a      	adds	r2, r3, #5
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8002c94:	2300      	movs	r3, #0

}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <_uavcan_equipment_indication_SingleLightCommand_decode>:
}

/*
 decode uavcan_equipment_indication_SingleLightCommand, return true on failure, false on success
*/
bool _uavcan_equipment_indication_SingleLightCommand_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_indication_SingleLightCommand* msg, bool tao) {
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af02      	add	r7, sp, #8
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->light_id);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7fe f87f 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 8;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f103 0208 	add.w	r2, r3, #8
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	601a      	str	r2, [r3, #0]





    if (_uavcan_equipment_indication_RGB565_decode(transfer, bit_ofs, &msg->color, tao)) {return true;}
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff ffab 	bl	8002c2e <_uavcan_equipment_indication_RGB565_decode>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <_uavcan_equipment_indication_SingleLightCommand_decode+0x44>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <_uavcan_equipment_indication_SingleLightCommand_decode+0x46>





    return false; /* success */
 8002ce2:	2300      	movs	r3, #0

}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_uavcan_equipment_indication_LightsCommand_decode>:
}

/*
 decode uavcan_equipment_indication_LightsCommand, return true on failure, false on success
*/
bool _uavcan_equipment_indication_LightsCommand_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_indication_LightsCommand* msg, bool tao) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	70fb      	strb	r3, [r7, #3]





    if (!tao) {
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <_uavcan_equipment_indication_LightsCommand_decode+0x36>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->commands.len);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2205      	movs	r2, #5
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7fe f852 	bl	8000dbc <canardDecodeScalar>
        *bit_ofs += 5;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1d5a      	adds	r2, r3, #5
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	601a      	str	r2, [r3, #0]





    if (tao) {
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d022      	beq.n	8002d6e <_uavcan_equipment_indication_LightsCommand_decode+0x82>

        msg->commands.len = 0;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 8002d2e:	e015      	b.n	8002d5c <_uavcan_equipment_indication_LightsCommand_decode+0x70>

            if (_uavcan_equipment_indication_SingleLightCommand_decode(transfer, bit_ofs, &msg->commands.data[msg->commands.len], false)) {return true;}
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff ffac 	bl	8002c9e <_uavcan_equipment_indication_SingleLightCommand_decode>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <_uavcan_equipment_indication_LightsCommand_decode+0x64>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e030      	b.n	8002db2 <_uavcan_equipment_indication_LightsCommand_decode+0xc6>
            msg->commands.len++;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8a9b      	ldrh	r3, [r3, #20]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d8e1      	bhi.n	8002d30 <_uavcan_equipment_indication_LightsCommand_decode+0x44>
 8002d6c:	e020      	b.n	8002db0 <_uavcan_equipment_indication_LightsCommand_decode+0xc4>



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
        if (msg->commands.len > 20) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b14      	cmp	r3, #20
 8002d74:	d901      	bls.n	8002d7a <_uavcan_equipment_indication_LightsCommand_decode+0x8e>
            return true; /* invalid value */
 8002d76:	2301      	movs	r3, #1
 8002d78:	e01b      	b.n	8002db2 <_uavcan_equipment_indication_LightsCommand_decode+0xc6>
        }
#pragma GCC diagnostic pop
        for (size_t i=0; i < msg->commands.len; i++) {
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e011      	b.n	8002da4 <_uavcan_equipment_indication_LightsCommand_decode+0xb8>



            if (_uavcan_equipment_indication_SingleLightCommand_decode(transfer, bit_ofs, &msg->commands.data[i], false)) {return true;}
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff ff85 	bl	8002c9e <_uavcan_equipment_indication_SingleLightCommand_decode>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <_uavcan_equipment_indication_LightsCommand_decode+0xb2>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e009      	b.n	8002db2 <_uavcan_equipment_indication_LightsCommand_decode+0xc6>
        for (size_t i=0; i < msg->commands.len; i++) {
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d3e7      	bcc.n	8002d80 <_uavcan_equipment_indication_LightsCommand_decode+0x94>





    return false; /* success */
 8002db0:	2300      	movs	r3, #0

}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <uavcan_equipment_indication_LightsCommand_decode>:
}

/*
  return true if the decode is invalid
 */
bool uavcan_equipment_indication_LightsCommand_decode(const CanardRxTransfer* transfer, struct uavcan_equipment_indication_LightsCommand* msg) {
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_EQUIPMENT_INDICATION_LIGHTSCOMMAND_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]
    if (_uavcan_equipment_indication_LightsCommand_decode(transfer, &bit_ofs, msg,
 8002dc8:	f107 0108 	add.w	r1, r7, #8
 8002dcc:	2301      	movs	r3, #1
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff8b 	bl	8002cec <_uavcan_equipment_indication_LightsCommand_decode>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <uavcan_equipment_indication_LightsCommand_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e00c      	b.n	8002dfa <uavcan_equipment_indication_LightsCommand_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3307      	adds	r3, #7
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8a9b      	ldrh	r3, [r3, #20]
 8002dec:	461a      	mov	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b088      	sub	sp, #32
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2208      	movs	r2, #8
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fe f958 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 8;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f103 0208 	add.w	r2, r3, #8
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3301      	adds	r3, #1
 8002e32:	2208      	movs	r2, #8
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7fe f94a 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 8;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f103 0208 	add.w	r2, r3, #8
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e012      	b.n	8002e72 <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	3302      	adds	r3, #2
 8002e58:	2208      	movs	r2, #8
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7fe f937 	bl	80010ce <canardEncodeScalar>

        *bit_ofs += 8;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f103 0208 	add.w	r2, r3, #8
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d9e9      	bls.n	8002e4c <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f083 0301 	eor.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3312      	adds	r3, #18
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7fe f91d 	bl	80010ce <canardEncodeScalar>
        *bit_ofs += 8;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f103 0208 	add.w	r2, r3, #8
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7c9b      	ldrb	r3, [r3, #18]
 8002ea4:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	e013      	b.n	8002ed4 <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	3310      	adds	r3, #16
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3303      	adds	r3, #3
 8002eba:	2208      	movs	r2, #8
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7fe f906 	bl	80010ce <canardEncodeScalar>

        *bit_ofs += 8;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f103 0208 	add.w	r2, r3, #8
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3e7      	bcc.n	8002eac <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7fe f8e6 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 32;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f103 0220 	add.w	r2, r3, #32
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2202      	movs	r2, #2
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7fe f8d8 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 2;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3305      	adds	r3, #5
 8002f30:	2203      	movs	r2, #3
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7fe f8cb 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 3;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1cda      	adds	r2, r3, #3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3306      	adds	r3, #6
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7fe f8be 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 3;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	1cda      	adds	r2, r3, #3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3308      	adds	r3, #8
 8002f64:	2210      	movs	r2, #16
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7fe f8b1 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 16;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f103 0210 	add.w	r2, r3, #16
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	601a      	str	r2, [r3, #0]





}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2208      	movs	r2, #8
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7fe f899 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 8;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f103 0208 	add.w	r2, r3, #8
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7fe f88b 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 8;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f103 0208 	add.w	r2, r3, #8
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3302      	adds	r3, #2
 8002fcc:	2208      	movs	r2, #8
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7fe f87d 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 8;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f103 0208 	add.w	r2, r3, #8
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	2220      	movs	r2, #32
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7fe f86f 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 32;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f103 0220 	add.w	r2, r3, #32
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3308      	adds	r3, #8
 8003004:	2240      	movs	r2, #64	@ 0x40
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7fe f861 	bl	80010ce <canardEncodeScalar>

    *bit_ofs += 64;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	601a      	str	r2, [r3, #0]





}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	2300      	movs	r3, #0
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff ff56 	bl	8002ee6 <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f103 0210 	add.w	r2, r3, #16
 8003040:	2300      	movs	r3, #0
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff ff9b 	bl	8002f80 <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f103 0220 	add.w	r2, r3, #32
 8003050:	2300      	movs	r3, #0
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff fed4 	bl	8002e02 <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003070:	2207      	movs	r2, #7
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7fe f82b 	bl	80010ce <canardEncodeScalar>
        *bit_ofs += 7;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1dda      	adds	r2, r3, #7
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003088:	2b50      	cmp	r3, #80	@ 0x50
 800308a:	bf28      	it	cs
 800308c:	2350      	movcs	r3, #80	@ 0x50
 800308e:	b2db      	uxtb	r3, r3
 8003090:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e014      	b.n	80030c2 <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	3303      	adds	r3, #3
 80030a8:	2208      	movs	r2, #8
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7fe f80f 	bl	80010ce <canardEncodeScalar>

        *bit_ofs += 8;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f103 0208 	add.w	r2, r3, #8
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3301      	adds	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d3e6      	bcc.n	8003098 <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 80030e2:	f240 1279 	movw	r2, #377	@ 0x179
 80030e6:	2100      	movs	r1, #0
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	f002 fd27 	bl	8005b3c <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 80030ee:	f107 010c 	add.w	r1, r7, #12
 80030f2:	2301      	movs	r3, #1
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	f7ff ff92 	bl	8003020 <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3307      	adds	r3, #7
 8003100:	08db      	lsrs	r3, r3, #3
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_uavcan_protocol_NodeStatus_encode>:
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	70fb      	strb	r3, [r7, #3]
    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7fd ffd4 	bl	80010ce <canardEncodeScalar>
    *bit_ofs += 32;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f103 0220 	add.w	r2, r3, #32
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2202      	movs	r2, #2
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7fd ffc6 	bl	80010ce <canardEncodeScalar>
    *bit_ofs += 2;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1c9a      	adds	r2, r3, #2
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3305      	adds	r3, #5
 8003154:	2203      	movs	r2, #3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7fd ffb9 	bl	80010ce <canardEncodeScalar>
    *bit_ofs += 3;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	1cda      	adds	r2, r3, #3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3306      	adds	r3, #6
 800316e:	2203      	movs	r2, #3
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7fd ffac 	bl	80010ce <canardEncodeScalar>
    *bit_ofs += 3;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1cda      	adds	r2, r3, #3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3308      	adds	r3, #8
 8003188:	2210      	movs	r2, #16
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7fd ff9f 	bl	80010ce <canardEncodeScalar>
    *bit_ofs += 16;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f103 0210 	add.w	r2, r3, #16
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	601a      	str	r2, [r3, #0]
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	2220      	movs	r2, #32
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7fd fdfc 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 32;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f103 0220 	add.w	r2, r3, #32
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	2202      	movs	r2, #2
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7fd fdec 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 2;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c9a      	adds	r2, r3, #2
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3305      	adds	r3, #5
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2300      	movs	r3, #0
 80031fa:	2203      	movs	r2, #3
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7fd fddd 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 3;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1cda      	adds	r2, r3, #3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3306      	adds	r3, #6
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	2203      	movs	r2, #3
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7fd fdce 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 3;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	1cda      	adds	r2, r3, #3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3308      	adds	r3, #8
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2300      	movs	r3, #0
 8003236:	2210      	movs	r2, #16
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7fd fdbf 	bl	8000dbc <canardDecodeScalar>

    *bit_ofs += 16;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f103 0210 	add.w	r2, r3, #16
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	601a      	str	r2, [r3, #0]





    return false; /* success */
 800324a:	2300      	movs	r3, #0

}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8003262:	2207      	movs	r2, #7
 8003264:	2100      	movs	r1, #0
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f002 fc68 	bl	8005b3c <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 800326c:	f107 010c 	add.w	r1, r7, #12
 8003270:	2301      	movs	r3, #1
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6838      	ldr	r0, [r7, #0]
 8003276:	f7ff ff48 	bl	800310a <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3307      	adds	r3, #7
 800327e:	08db      	lsrs	r3, r3, #3
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 8003296:	f107 0108 	add.w	r1, r7, #8
 800329a:	2301      	movs	r3, #1
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff80 	bl	80031a4 <_uavcan_protocol_NodeStatus_decode>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00c      	b.n	80032c8 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3307      	adds	r3, #7
 80032b2:	08db      	lsrs	r3, r3, #3
 80032b4:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8a9b      	ldrh	r3, [r3, #20]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4293      	cmp	r3, r2
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032da:	2003      	movs	r0, #3
 80032dc:	f000 fb0e 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032e0:	200f      	movs	r0, #15
 80032e2:	f000 f80d 	bl	8003300 <HAL_InitTick>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	71fb      	strb	r3, [r7, #7]
 80032f0:	e001      	b.n	80032f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032f2:	f7ff fa51 	bl	8002798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032f6:	79fb      	ldrb	r3, [r7, #7]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800330c:	4b17      	ldr	r3, [pc, #92]	@ (800336c <HAL_InitTick+0x6c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d023      	beq.n	800335c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003314:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <HAL_InitTick+0x70>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b14      	ldr	r3, [pc, #80]	@ (800336c <HAL_InitTick+0x6c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003322:	fbb3 f3f1 	udiv	r3, r3, r1
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fb0d 	bl	800394a <HAL_SYSTICK_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d809      	bhi.n	8003350 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800333c:	2200      	movs	r2, #0
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f000 fae5 	bl	8003912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003348:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <HAL_InitTick+0x74>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e007      	b.n	8003360 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e004      	b.n	8003360 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e001      	b.n	8003360 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000008 	.word	0x20000008
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_IncTick+0x20>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_IncTick+0x24>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4413      	add	r3, r2
 8003388:	4a04      	ldr	r2, [pc, #16]	@ (800339c <HAL_IncTick+0x24>)
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008
 800339c:	2000053c 	.word	0x2000053c

080033a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return uwTick;
 80033a4:	4b03      	ldr	r3, [pc, #12]	@ (80033b4 <HAL_GetTick+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000053c 	.word	0x2000053c

080033b8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <HAL_GetUIDw0+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	1fff7590 	.word	0x1fff7590

080033d0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <HAL_GetUIDw1+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	1fff7594 	.word	0x1fff7594

080033e8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <HAL_GetUIDw2+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	1fff7598 	.word	0x1fff7598

08003400 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0ed      	b.n	80035ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff f9de 	bl	80027e0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003434:	f7ff ffb4 	bl	80033a0 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800343a:	e012      	b.n	8003462 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800343c:	f7ff ffb0 	bl	80033a0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b0a      	cmp	r3, #10
 8003448:	d90b      	bls.n	8003462 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2205      	movs	r2, #5
 800345a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e0c5      	b.n	80035ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0e5      	beq.n	800343c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0202 	bic.w	r2, r2, #2
 800347e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003480:	f7ff ff8e 	bl	80033a0 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003486:	e012      	b.n	80034ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003488:	f7ff ff8a 	bl	80033a0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b0a      	cmp	r3, #10
 8003494:	d90b      	bls.n	80034ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2205      	movs	r2, #5
 80034a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e09f      	b.n	80035ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e1b      	ldrb	r3, [r3, #24]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d108      	bne.n	80034d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e007      	b.n	80034e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7e5b      	ldrb	r3, [r3, #25]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d108      	bne.n	8003500 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7e9b      	ldrb	r3, [r3, #26]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d108      	bne.n	800352a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0220 	orr.w	r2, r2, #32
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e007      	b.n	800353a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0220 	bic.w	r2, r2, #32
 8003538:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7edb      	ldrb	r3, [r3, #27]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0210 	bic.w	r2, r2, #16
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e007      	b.n	8003564 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0210 	orr.w	r2, r2, #16
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7f1b      	ldrb	r3, [r3, #28]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d108      	bne.n	800357e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0208 	orr.w	r2, r2, #8
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e007      	b.n	800358e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0208 	bic.w	r2, r2, #8
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7f5b      	ldrb	r3, [r3, #29]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0204 	orr.w	r2, r2, #4
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e007      	b.n	80035b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0204 	bic.w	r2, r2, #4
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	ea42 0103 	orr.w	r1, r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b089      	sub	sp, #36	@ 0x24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800360a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003614:	7ffb      	ldrb	r3, [r7, #31]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d003      	beq.n	8003622 <HAL_CAN_AddTxMessage+0x2c>
 800361a:	7ffb      	ldrb	r3, [r7, #31]
 800361c:	2b02      	cmp	r3, #2
 800361e:	f040 80ad 	bne.w	800377c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8095 	beq.w	800376c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800364c:	2201      	movs	r2, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	409a      	lsls	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	6809      	ldr	r1, [r1, #0]
 800366c:	431a      	orrs	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3318      	adds	r3, #24
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	440b      	add	r3, r1
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e00f      	b.n	800369a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003684:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800368a:	68f9      	ldr	r1, [r7, #12]
 800368c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800368e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3318      	adds	r3, #24
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	440b      	add	r3, r1
 8003698:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3318      	adds	r3, #24
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	440b      	add	r3, r1
 80036aa:	3304      	adds	r3, #4
 80036ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	7d1b      	ldrb	r3, [r3, #20]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d111      	bne.n	80036da <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3318      	adds	r3, #24
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6811      	ldr	r1, [r2, #0]
 80036ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3318      	adds	r3, #24
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	440b      	add	r3, r1
 80036d6:	3304      	adds	r3, #4
 80036d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3307      	adds	r3, #7
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	061a      	lsls	r2, r3, #24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3306      	adds	r3, #6
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3305      	adds	r3, #5
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	4313      	orrs	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	3204      	adds	r2, #4
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	4610      	mov	r0, r2
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	6811      	ldr	r1, [r2, #0]
 8003702:	ea43 0200 	orr.w	r2, r3, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	440b      	add	r3, r1
 800370c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003710:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3303      	adds	r3, #3
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	061a      	lsls	r2, r3, #24
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3302      	adds	r3, #2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	4610      	mov	r0, r2
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	6811      	ldr	r1, [r2, #0]
 8003738:	ea43 0200 	orr.w	r2, r3, r0
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	440b      	add	r3, r1
 8003742:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003746:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3318      	adds	r3, #24
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	4413      	add	r3, r2
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6811      	ldr	r1, [r2, #0]
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3318      	adds	r3, #24
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	440b      	add	r3, r1
 8003766:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e00e      	b.n	800378a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e006      	b.n	800378a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	@ 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ca:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	60d3      	str	r3, [r2, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <__NVIC_GetPriorityGrouping+0x18>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	@ (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	@ (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff47 	bl	8003798 <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff5c 	bl	80037e0 <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff8e 	bl	8003850 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5d 	bl	80037fc <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ffb0 	bl	80038b8 <SysTick_Config>
 8003958:	4603      	mov	r3, r0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003972:	e154      	b.n	8003c1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8146 	beq.w	8003c18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d005      	beq.n	80039a4 <HAL_GPIO_Init+0x40>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d130      	bne.n	8003a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039da:	2201      	movs	r2, #1
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0201 	and.w	r2, r3, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d017      	beq.n	8003a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d123      	bne.n	8003a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	08da      	lsrs	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3208      	adds	r2, #8
 8003a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	220f      	movs	r2, #15
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	08da      	lsrs	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3208      	adds	r2, #8
 8003a90:	6939      	ldr	r1, [r7, #16]
 8003a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0203 	and.w	r2, r3, #3
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a0 	beq.w	8003c18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad8:	4b58      	ldr	r3, [pc, #352]	@ (8003c3c <HAL_GPIO_Init+0x2d8>)
 8003ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003adc:	4a57      	ldr	r2, [pc, #348]	@ (8003c3c <HAL_GPIO_Init+0x2d8>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ae4:	4b55      	ldr	r3, [pc, #340]	@ (8003c3c <HAL_GPIO_Init+0x2d8>)
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003af0:	4a53      	ldr	r2, [pc, #332]	@ (8003c40 <HAL_GPIO_Init+0x2dc>)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	3302      	adds	r3, #2
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	220f      	movs	r2, #15
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b1a:	d019      	beq.n	8003b50 <HAL_GPIO_Init+0x1ec>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a49      	ldr	r2, [pc, #292]	@ (8003c44 <HAL_GPIO_Init+0x2e0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_GPIO_Init+0x1e8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a48      	ldr	r2, [pc, #288]	@ (8003c48 <HAL_GPIO_Init+0x2e4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00d      	beq.n	8003b48 <HAL_GPIO_Init+0x1e4>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a47      	ldr	r2, [pc, #284]	@ (8003c4c <HAL_GPIO_Init+0x2e8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <HAL_GPIO_Init+0x1e0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a46      	ldr	r2, [pc, #280]	@ (8003c50 <HAL_GPIO_Init+0x2ec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <HAL_GPIO_Init+0x1dc>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e008      	b.n	8003b52 <HAL_GPIO_Init+0x1ee>
 8003b40:	2307      	movs	r3, #7
 8003b42:	e006      	b.n	8003b52 <HAL_GPIO_Init+0x1ee>
 8003b44:	2303      	movs	r3, #3
 8003b46:	e004      	b.n	8003b52 <HAL_GPIO_Init+0x1ee>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e002      	b.n	8003b52 <HAL_GPIO_Init+0x1ee>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_GPIO_Init+0x1ee>
 8003b50:	2300      	movs	r3, #0
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	f002 0203 	and.w	r2, r2, #3
 8003b58:	0092      	lsls	r2, r2, #2
 8003b5a:	4093      	lsls	r3, r2
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b62:	4937      	ldr	r1, [pc, #220]	@ (8003c40 <HAL_GPIO_Init+0x2dc>)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	3302      	adds	r3, #2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b70:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b94:	4a2f      	ldr	r2, [pc, #188]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bbe:	4a25      	ldr	r2, [pc, #148]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bc4:	4b23      	ldr	r3, [pc, #140]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003be8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bee:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c12:	4a10      	ldr	r2, [pc, #64]	@ (8003c54 <HAL_GPIO_Init+0x2f0>)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f aea3 	bne.w	8003974 <HAL_GPIO_Init+0x10>
  }
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40010000 	.word	0x40010000
 8003c44:	48000400 	.word	0x48000400
 8003c48:	48000800 	.word	0x48000800
 8003c4c:	48000c00 	.word	0x48000c00
 8003c50:	48001000 	.word	0x48001000
 8003c54:	40010400 	.word	0x40010400

08003c58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c5c:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40007000 	.word	0x40007000

08003c74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c82:	d130      	bne.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c84:	4b23      	ldr	r3, [pc, #140]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c90:	d038      	beq.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c92:	4b20      	ldr	r3, [pc, #128]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ca0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2232      	movs	r2, #50	@ 0x32
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	4a1b      	ldr	r2, [pc, #108]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	0c9b      	lsrs	r3, r3, #18
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cb8:	e002      	b.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc0:	4b14      	ldr	r3, [pc, #80]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ccc:	d102      	bne.n	8003cd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f2      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce0:	d110      	bne.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e00f      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf2:	d007      	beq.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cf4:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cfc:	4a05      	ldr	r2, [pc, #20]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40007000 	.word	0x40007000
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	431bde83 	.word	0x431bde83

08003d20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f000 bc02 	b.w	8004538 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d34:	4b96      	ldr	r3, [pc, #600]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d3e:	4b94      	ldr	r3, [pc, #592]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80e4 	beq.w	8003f1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4c>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	f040 808b 	bne.w	8003e7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	f040 8087 	bne.w	8003e7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d6c:	4b88      	ldr	r3, [pc, #544]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_OscConfig+0x64>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e3d9      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	4b81      	ldr	r3, [pc, #516]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_RCC_OscConfig+0x7e>
 8003d94:	4b7e      	ldr	r3, [pc, #504]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d9c:	e005      	b.n	8003daa <HAL_RCC_OscConfig+0x8a>
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d223      	bcs.n	8003df6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fd54 	bl	8004860 <RCC_SetFlashLatencyFromMSIRange>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e3ba      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc2:	4b73      	ldr	r3, [pc, #460]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a72      	ldr	r2, [pc, #456]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b70      	ldr	r3, [pc, #448]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	496d      	ldr	r1, [pc, #436]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	4968      	ldr	r1, [pc, #416]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
 8003df4:	e025      	b.n	8003e42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df6:	4b66      	ldr	r3, [pc, #408]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a65      	ldr	r2, [pc, #404]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	f043 0308 	orr.w	r3, r3, #8
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b63      	ldr	r3, [pc, #396]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4960      	ldr	r1, [pc, #384]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e14:	4b5e      	ldr	r3, [pc, #376]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	495b      	ldr	r1, [pc, #364]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fd14 	bl	8004860 <RCC_SetFlashLatencyFromMSIRange>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e37a      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e42:	f000 fc81 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8003e46:	4602      	mov	r2, r0
 8003e48:	4b51      	ldr	r3, [pc, #324]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	4950      	ldr	r1, [pc, #320]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e54:	5ccb      	ldrb	r3, [r1, r3]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8003f98 <HAL_RCC_OscConfig+0x278>)
 8003e60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e62:	4b4e      	ldr	r3, [pc, #312]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fa4a 	bl	8003300 <HAL_InitTick>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d052      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	e35e      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d032      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e82:	4b43      	ldr	r3, [pc, #268]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a42      	ldr	r2, [pc, #264]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e8e:	f7ff fa87 	bl	80033a0 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e96:	f7ff fa83 	bl	80033a0 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e347      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea8:	4b39      	ldr	r3, [pc, #228]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb4:	4b36      	ldr	r3, [pc, #216]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a35      	ldr	r2, [pc, #212]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b33      	ldr	r3, [pc, #204]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4930      	ldr	r1, [pc, #192]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	492b      	ldr	r1, [pc, #172]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
 8003ee6:	e01a      	b.n	8003f1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ee8:	4b29      	ldr	r3, [pc, #164]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a28      	ldr	r2, [pc, #160]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ef4:	f7ff fa54 	bl	80033a0 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003efc:	f7ff fa50 	bl	80033a0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e314      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1dc>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d073      	beq.n	8004012 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_OscConfig+0x21c>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d10e      	bne.n	8003f54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3c:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d063      	beq.n	8004010 <HAL_RCC_OscConfig+0x2f0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d15f      	bne.n	8004010 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e2f1      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCC_OscConfig+0x24c>
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e025      	b.n	8003fb8 <HAL_RCC_OscConfig+0x298>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f74:	d114      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x280>
 8003f76:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a05      	ldr	r2, [pc, #20]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b03      	ldr	r3, [pc, #12]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a02      	ldr	r2, [pc, #8]	@ (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e013      	b.n	8003fb8 <HAL_RCC_OscConfig+0x298>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	08006890 	.word	0x08006890
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000004 	.word	0x20000004
 8003fa0:	4ba0      	ldr	r3, [pc, #640]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a9f      	ldr	r2, [pc, #636]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b9d      	ldr	r3, [pc, #628]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a9c      	ldr	r2, [pc, #624]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7ff f9ee 	bl	80033a0 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7ff f9ea 	bl	80033a0 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e2ae      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	4b92      	ldr	r3, [pc, #584]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2a8>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7ff f9da 	bl	80033a0 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7ff f9d6 	bl	80033a0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e29a      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	4b88      	ldr	r3, [pc, #544]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2d0>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d060      	beq.n	80040e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d005      	beq.n	8004030 <HAL_RCC_OscConfig+0x310>
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d119      	bne.n	800405e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d116      	bne.n	800405e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004030:	4b7c      	ldr	r3, [pc, #496]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x328>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e277      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b76      	ldr	r3, [pc, #472]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	4973      	ldr	r1, [pc, #460]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405c:	e040      	b.n	80040e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d023      	beq.n	80040ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004066:	4b6f      	ldr	r3, [pc, #444]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6e      	ldr	r2, [pc, #440]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7ff f995 	bl	80033a0 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7ff f991 	bl	80033a0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e255      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408c:	4b65      	ldr	r3, [pc, #404]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b62      	ldr	r3, [pc, #392]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	495f      	ldr	r1, [pc, #380]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	e018      	b.n	80040e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a5c      	ldr	r2, [pc, #368]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80040b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7ff f971 	bl	80033a0 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c2:	f7ff f96d 	bl	80033a0 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e231      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d4:	4b53      	ldr	r3, [pc, #332]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03c      	beq.n	8004166 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01c      	beq.n	800412e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7ff f94c 	bl	80033a0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410c:	f7ff f948 	bl	80033a0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e20c      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800411e:	4b41      	ldr	r3, [pc, #260]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ef      	beq.n	800410c <HAL_RCC_OscConfig+0x3ec>
 800412c:	e01b      	b.n	8004166 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412e:	4b3d      	ldr	r3, [pc, #244]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004134:	4a3b      	ldr	r2, [pc, #236]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7ff f92f 	bl	80033a0 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004146:	f7ff f92b 	bl	80033a0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1ef      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004158:	4b32      	ldr	r3, [pc, #200]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ef      	bne.n	8004146 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80a6 	beq.w	80042c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004178:	4b2a      	ldr	r3, [pc, #168]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004188:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004190:	4b24      	ldr	r3, [pc, #144]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419c:	2301      	movs	r3, #1
 800419e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a0:	4b21      	ldr	r3, [pc, #132]	@ (8004228 <HAL_RCC_OscConfig+0x508>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d118      	bne.n	80041de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004228 <HAL_RCC_OscConfig+0x508>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004228 <HAL_RCC_OscConfig+0x508>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b8:	f7ff f8f2 	bl	80033a0 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7ff f8ee 	bl	80033a0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1b2      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d2:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <HAL_RCC_OscConfig+0x508>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4d8>
 80041e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041f6:	e029      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d115      	bne.n	800422c <HAL_RCC_OscConfig+0x50c>
 8004200:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	4a07      	ldr	r2, [pc, #28]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004208:	f043 0304 	orr.w	r3, r3, #4
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004210:	4b04      	ldr	r3, [pc, #16]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004216:	4a03      	ldr	r2, [pc, #12]	@ (8004224 <HAL_RCC_OscConfig+0x504>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004220:	e014      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	40007000 	.word	0x40007000
 800422c:	4b9a      	ldr	r3, [pc, #616]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004232:	4a99      	ldr	r2, [pc, #612]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800423c:	4b96      	ldr	r3, [pc, #600]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	4a95      	ldr	r2, [pc, #596]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7ff f8a4 	bl	80033a0 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7ff f8a0 	bl	80033a0 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e162      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004272:	4b89      	ldr	r3, [pc, #548]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ed      	beq.n	800425c <HAL_RCC_OscConfig+0x53c>
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004282:	f7ff f88d 	bl	80033a0 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7ff f889 	bl	80033a0 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e14b      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ed      	bne.n	800428a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	4b78      	ldr	r3, [pc, #480]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	4a77      	ldr	r2, [pc, #476]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d03c      	beq.n	8004346 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01c      	beq.n	800430e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042d4:	4b70      	ldr	r3, [pc, #448]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80042d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042da:	4a6f      	ldr	r2, [pc, #444]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7ff f85c 	bl	80033a0 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ec:	f7ff f858 	bl	80033a0 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e11c      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042fe:	4b66      	ldr	r3, [pc, #408]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004300:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ef      	beq.n	80042ec <HAL_RCC_OscConfig+0x5cc>
 800430c:	e01b      	b.n	8004346 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800430e:	4b62      	ldr	r3, [pc, #392]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004314:	4a60      	ldr	r2, [pc, #384]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7ff f83f 	bl	80033a0 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004326:	f7ff f83b 	bl	80033a0 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e0ff      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004338:	4b57      	ldr	r3, [pc, #348]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 800433a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ef      	bne.n	8004326 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80f3 	beq.w	8004536 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	2b02      	cmp	r3, #2
 8004356:	f040 80c9 	bne.w	80044ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800435a:	4b4f      	ldr	r3, [pc, #316]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0203 	and.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	429a      	cmp	r2, r3
 800436c:	d12c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004378:	3b01      	subs	r3, #1
 800437a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d123      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d11b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d113      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	3b01      	subs	r3, #1
 80043ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d109      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d06b      	beq.n	80044a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d062      	beq.n	8004494 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043ce:	4b32      	ldr	r3, [pc, #200]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0ac      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043de:	4b2e      	ldr	r3, [pc, #184]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 80043e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ea:	f7fe ffd9 	bl	80033a0 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fe ffd5 	bl	80033a0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e099      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004404:	4b24      	ldr	r3, [pc, #144]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004410:	4b21      	ldr	r3, [pc, #132]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4b21      	ldr	r3, [pc, #132]	@ (800449c <HAL_RCC_OscConfig+0x77c>)
 8004416:	4013      	ands	r3, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004420:	3a01      	subs	r2, #1
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	4311      	orrs	r1, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800442a:	0212      	lsls	r2, r2, #8
 800442c:	4311      	orrs	r1, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004432:	0852      	lsrs	r2, r2, #1
 8004434:	3a01      	subs	r2, #1
 8004436:	0552      	lsls	r2, r2, #21
 8004438:	4311      	orrs	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800443e:	0852      	lsrs	r2, r2, #1
 8004440:	3a01      	subs	r2, #1
 8004442:	0652      	lsls	r2, r2, #25
 8004444:	4311      	orrs	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800444a:	06d2      	lsls	r2, r2, #27
 800444c:	430a      	orrs	r2, r1
 800444e:	4912      	ldr	r1, [pc, #72]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004450:	4313      	orrs	r3, r2
 8004452:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004454:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a0f      	ldr	r2, [pc, #60]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800445e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004460:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a0c      	ldr	r2, [pc, #48]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800446a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800446c:	f7fe ff98 	bl	80033a0 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7fe ff94 	bl	80033a0 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e058      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <HAL_RCC_OscConfig+0x778>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004492:	e050      	b.n	8004536 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e04f      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
 8004498:	40021000 	.word	0x40021000
 800449c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a0:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d144      	bne.n	8004536 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044ac:	4b24      	ldr	r3, [pc, #144]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a23      	ldr	r2, [pc, #140]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044b8:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a20      	ldr	r2, [pc, #128]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044c4:	f7fe ff6c 	bl	80033a0 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fe ff68 	bl	80033a0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e02c      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x7ac>
 80044ea:	e024      	b.n	8004536 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d01f      	beq.n	8004532 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f2:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a12      	ldr	r2, [pc, #72]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fe ff4f 	bl	80033a0 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fe ff4b 	bl	80033a0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e00f      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4905      	ldr	r1, [pc, #20]	@ (8004540 <HAL_RCC_OscConfig+0x820>)
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_OscConfig+0x824>)
 800452c:	4013      	ands	r3, r2
 800452e:	60cb      	str	r3, [r1, #12]
 8004530:	e001      	b.n	8004536 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	feeefffc 	.word	0xfeeefffc

08004548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0e7      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	4b75      	ldr	r3, [pc, #468]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d910      	bls.n	800458c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b72      	ldr	r3, [pc, #456]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 0207 	bic.w	r2, r3, #7
 8004572:	4970      	ldr	r1, [pc, #448]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b6e      	ldr	r3, [pc, #440]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0cf      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4b66      	ldr	r3, [pc, #408]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d908      	bls.n	80045ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b63      	ldr	r3, [pc, #396]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4960      	ldr	r1, [pc, #384]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d04c      	beq.n	8004660 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d121      	bne.n	800461e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0a6      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e6:	4b54      	ldr	r3, [pc, #336]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e09a      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e08e      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460e:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e086      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b46      	ldr	r3, [pc, #280]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4943      	ldr	r1, [pc, #268]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004630:	f7fe feb6 	bl	80033a0 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fe feb2 	bl	80033a0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e06e      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b3a      	ldr	r3, [pc, #232]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	4b31      	ldr	r3, [pc, #196]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004678:	429a      	cmp	r2, r3
 800467a:	d208      	bcs.n	800468e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b2e      	ldr	r3, [pc, #184]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	492b      	ldr	r1, [pc, #172]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468e:	4b29      	ldr	r3, [pc, #164]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d210      	bcs.n	80046be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469c:	4b25      	ldr	r3, [pc, #148]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 0207 	bic.w	r2, r3, #7
 80046a4:	4923      	ldr	r1, [pc, #140]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ac:	4b21      	ldr	r3, [pc, #132]	@ (8004734 <HAL_RCC_ClockConfig+0x1ec>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d001      	beq.n	80046be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e036      	b.n	800472c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4918      	ldr	r1, [pc, #96]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e8:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4910      	ldr	r1, [pc, #64]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046fc:	f000 f824 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	490b      	ldr	r1, [pc, #44]	@ (800473c <HAL_RCC_ClockConfig+0x1f4>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	4a09      	ldr	r2, [pc, #36]	@ (8004740 <HAL_RCC_ClockConfig+0x1f8>)
 800471a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800471c:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <HAL_RCC_ClockConfig+0x1fc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fded 	bl	8003300 <HAL_InitTick>
 8004726:	4603      	mov	r3, r0
 8004728:	72fb      	strb	r3, [r7, #11]

  return status;
 800472a:	7afb      	ldrb	r3, [r7, #11]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40022000 	.word	0x40022000
 8004738:	40021000 	.word	0x40021000
 800473c:	08006890 	.word	0x08006890
 8004740:	20000000 	.word	0x20000000
 8004744:	20000004 	.word	0x20000004

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	@ 0x24
 800474c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004756:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004760:	4b3b      	ldr	r3, [pc, #236]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x34>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d121      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d11e      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800477c:	4b34      	ldr	r3, [pc, #208]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004788:	4b31      	ldr	r3, [pc, #196]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e005      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004798:	4b2d      	ldr	r3, [pc, #180]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c0:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x110>)
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	e004      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047cc:	4b23      	ldr	r3, [pc, #140]	@ (800485c <HAL_RCC_GetSysClockFreq+0x114>)
 80047ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d134      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d003      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0xa6>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d003      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0xac>
 80047ec:	e005      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x110>)
 80047f0:	617b      	str	r3, [r7, #20]
      break;
 80047f2:	e005      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047f4:	4b19      	ldr	r3, [pc, #100]	@ (800485c <HAL_RCC_GetSysClockFreq+0x114>)
 80047f6:	617b      	str	r3, [r7, #20]
      break;
 80047f8:	e002      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	617b      	str	r3, [r7, #20]
      break;
 80047fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004800:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	3301      	adds	r3, #1
 800480c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800480e:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	fb03 f202 	mul.w	r2, r3, r2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	0e5b      	lsrs	r3, r3, #25
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	3301      	adds	r3, #1
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004840:	69bb      	ldr	r3, [r7, #24]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3724      	adds	r7, #36	@ 0x24
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	080068a0 	.word	0x080068a0
 8004858:	00f42400 	.word	0x00f42400
 800485c:	007a1200 	.word	0x007a1200

08004860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800486c:	4b2a      	ldr	r3, [pc, #168]	@ (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004878:	f7ff f9ee 	bl	8003c58 <HAL_PWREx_GetVoltageRange>
 800487c:	6178      	str	r0, [r7, #20]
 800487e:	e014      	b.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004880:	4b25      	ldr	r3, [pc, #148]	@ (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004884:	4a24      	ldr	r2, [pc, #144]	@ (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488a:	6593      	str	r3, [r2, #88]	@ 0x58
 800488c:	4b22      	ldr	r3, [pc, #136]	@ (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800488e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004898:	f7ff f9de 	bl	8003c58 <HAL_PWREx_GetVoltageRange>
 800489c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800489e:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b0:	d10b      	bne.n	80048ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b80      	cmp	r3, #128	@ 0x80
 80048b6:	d919      	bls.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80048bc:	d902      	bls.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048be:	2302      	movs	r3, #2
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e013      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c4:	2301      	movs	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	e010      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b80      	cmp	r3, #128	@ 0x80
 80048ce:	d902      	bls.n	80048d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048d0:	2303      	movs	r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	e00a      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b80      	cmp	r3, #128	@ 0x80
 80048da:	d102      	bne.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048dc:	2302      	movs	r3, #2
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e004      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b70      	cmp	r3, #112	@ 0x70
 80048e6:	d101      	bne.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048e8:	2301      	movs	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 0207 	bic.w	r2, r3, #7
 80048f4:	4909      	ldr	r1, [pc, #36]	@ (800491c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048fc:	4b07      	ldr	r3, [pc, #28]	@ (800491c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	40022000 	.word	0x40022000

08004920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e049      	b.n	80049c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd ff8e 	bl	8002868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f000 fa74 	bl	8004e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e049      	b.n	8004a74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f841 	bl	8004a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f000 fa1d 	bl	8004e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0ff      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b14      	cmp	r3, #20
 8004aba:	f200 80f0 	bhi.w	8004c9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004abe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004c9f 	.word	0x08004c9f
 8004acc:	08004c9f 	.word	0x08004c9f
 8004ad0:	08004c9f 	.word	0x08004c9f
 8004ad4:	08004b59 	.word	0x08004b59
 8004ad8:	08004c9f 	.word	0x08004c9f
 8004adc:	08004c9f 	.word	0x08004c9f
 8004ae0:	08004c9f 	.word	0x08004c9f
 8004ae4:	08004b9b 	.word	0x08004b9b
 8004ae8:	08004c9f 	.word	0x08004c9f
 8004aec:	08004c9f 	.word	0x08004c9f
 8004af0:	08004c9f 	.word	0x08004c9f
 8004af4:	08004bdb 	.word	0x08004bdb
 8004af8:	08004c9f 	.word	0x08004c9f
 8004afc:	08004c9f 	.word	0x08004c9f
 8004b00:	08004c9f 	.word	0x08004c9f
 8004b04:	08004c1d 	.word	0x08004c1d
 8004b08:	08004c9f 	.word	0x08004c9f
 8004b0c:	08004c9f 	.word	0x08004c9f
 8004b10:	08004c9f 	.word	0x08004c9f
 8004b14:	08004c5d 	.word	0x08004c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa04 	bl	8004f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
      break;
 8004b56:	e0a5      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fa60 	bl	8005024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6999      	ldr	r1, [r3, #24]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
      break;
 8004b98:	e084      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fab9 	bl	8005118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0208 	orr.w	r2, r2, #8
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0204 	bic.w	r2, r2, #4
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      break;
 8004bd8:	e064      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fb11 	bl	8005208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	61da      	str	r2, [r3, #28]
      break;
 8004c1a:	e043      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb4e 	bl	80052c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0204 	bic.w	r2, r2, #4
 8004c46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c5a:	e023      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fb86 	bl	8005374 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	021a      	lsls	r2, r3, #8
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop

08004cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0b6      	b.n	8004e42 <HAL_TIM_ConfigClockSource+0x18a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d10:	d03e      	beq.n	8004d90 <HAL_TIM_ConfigClockSource+0xd8>
 8004d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d16:	f200 8087 	bhi.w	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1e:	f000 8086 	beq.w	8004e2e <HAL_TIM_ConfigClockSource+0x176>
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d26:	d87f      	bhi.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d28:	2b70      	cmp	r3, #112	@ 0x70
 8004d2a:	d01a      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0xaa>
 8004d2c:	2b70      	cmp	r3, #112	@ 0x70
 8004d2e:	d87b      	bhi.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d30:	2b60      	cmp	r3, #96	@ 0x60
 8004d32:	d050      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x11e>
 8004d34:	2b60      	cmp	r3, #96	@ 0x60
 8004d36:	d877      	bhi.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d38:	2b50      	cmp	r3, #80	@ 0x50
 8004d3a:	d03c      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0xfe>
 8004d3c:	2b50      	cmp	r3, #80	@ 0x50
 8004d3e:	d873      	bhi.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d40:	2b40      	cmp	r3, #64	@ 0x40
 8004d42:	d058      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x13e>
 8004d44:	2b40      	cmp	r3, #64	@ 0x40
 8004d46:	d86f      	bhi.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d48:	2b30      	cmp	r3, #48	@ 0x30
 8004d4a:	d064      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x15e>
 8004d4c:	2b30      	cmp	r3, #48	@ 0x30
 8004d4e:	d86b      	bhi.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d060      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x15e>
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d867      	bhi.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d05c      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x15e>
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d05a      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x15e>
 8004d60:	e062      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d72:	f000 fbd3 	bl	800551c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	609a      	str	r2, [r3, #8]
      break;
 8004d8e:	e04f      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004da0:	f000 fbbc 	bl	800551c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004db2:	609a      	str	r2, [r3, #8]
      break;
 8004db4:	e03c      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f000 fb30 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2150      	movs	r1, #80	@ 0x50
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fb89 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004dd4:	e02c      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de2:	461a      	mov	r2, r3
 8004de4:	f000 fb4f 	bl	8005486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2160      	movs	r1, #96	@ 0x60
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fb79 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004df4:	e01c      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	461a      	mov	r2, r3
 8004e04:	f000 fb10 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2140      	movs	r1, #64	@ 0x40
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fb69 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004e14:	e00c      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f000 fb60 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004e26:	e003      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2c:	e000      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a30      	ldr	r2, [pc, #192]	@ (8004f20 <TIM_Base_SetConfig+0xd4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0x20>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6a:	d108      	bne.n	8004e7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a27      	ldr	r2, [pc, #156]	@ (8004f20 <TIM_Base_SetConfig+0xd4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0x52>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0x52>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <TIM_Base_SetConfig+0xd8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0x52>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a23      	ldr	r2, [pc, #140]	@ (8004f28 <TIM_Base_SetConfig+0xdc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	@ (8004f20 <TIM_Base_SetConfig+0xd4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0xa0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <TIM_Base_SetConfig+0xd8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0xa0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a10      	ldr	r2, [pc, #64]	@ (8004f28 <TIM_Base_SetConfig+0xdc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]
  }
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400

08004f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f023 0201 	bic.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0302 	bic.w	r3, r3, #2
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a24      	ldr	r2, [pc, #144]	@ (8005018 <TIM_OC1_SetConfig+0xec>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d007      	beq.n	8004f9c <TIM_OC1_SetConfig+0x70>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a23      	ldr	r2, [pc, #140]	@ (800501c <TIM_OC1_SetConfig+0xf0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_OC1_SetConfig+0x70>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a22      	ldr	r2, [pc, #136]	@ (8005020 <TIM_OC1_SetConfig+0xf4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10c      	bne.n	8004fb6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0308 	bic.w	r3, r3, #8
 8004fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a17      	ldr	r2, [pc, #92]	@ (8005018 <TIM_OC1_SetConfig+0xec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_OC1_SetConfig+0xa2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a16      	ldr	r2, [pc, #88]	@ (800501c <TIM_OC1_SetConfig+0xf0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_OC1_SetConfig+0xa2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	@ (8005020 <TIM_OC1_SetConfig+0xf4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d111      	bne.n	8004ff2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	621a      	str	r2, [r3, #32]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400

08005024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f023 0210 	bic.w	r2, r3, #16
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0320 	bic.w	r3, r3, #32
 8005072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a22      	ldr	r2, [pc, #136]	@ (800510c <TIM_OC2_SetConfig+0xe8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d10d      	bne.n	80050a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800508e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a19      	ldr	r2, [pc, #100]	@ (800510c <TIM_OC2_SetConfig+0xe8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_OC2_SetConfig+0x98>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a18      	ldr	r2, [pc, #96]	@ (8005110 <TIM_OC2_SetConfig+0xec>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC2_SetConfig+0x98>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a17      	ldr	r2, [pc, #92]	@ (8005114 <TIM_OC2_SetConfig+0xf0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d113      	bne.n	80050e4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400

08005118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a21      	ldr	r2, [pc, #132]	@ (80051fc <TIM_OC3_SetConfig+0xe4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10d      	bne.n	8005196 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a18      	ldr	r2, [pc, #96]	@ (80051fc <TIM_OC3_SetConfig+0xe4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_OC3_SetConfig+0x96>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a17      	ldr	r2, [pc, #92]	@ (8005200 <TIM_OC3_SetConfig+0xe8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC3_SetConfig+0x96>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a16      	ldr	r2, [pc, #88]	@ (8005204 <TIM_OC3_SetConfig+0xec>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d113      	bne.n	80051d6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400

08005208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a14      	ldr	r2, [pc, #80]	@ (80052b8 <TIM_OC4_SetConfig+0xb0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_OC4_SetConfig+0x74>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <TIM_OC4_SetConfig+0xb4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC4_SetConfig+0x74>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a12      	ldr	r2, [pc, #72]	@ (80052c0 <TIM_OC4_SetConfig+0xb8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d109      	bne.n	8005290 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400

080052c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	041b      	lsls	r3, r3, #16
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <TIM_OC5_SetConfig+0xa4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_OC5_SetConfig+0x6a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a12      	ldr	r2, [pc, #72]	@ (800536c <TIM_OC5_SetConfig+0xa8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_OC5_SetConfig+0x6a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a11      	ldr	r2, [pc, #68]	@ (8005370 <TIM_OC5_SetConfig+0xac>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d109      	bne.n	8005342 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	621a      	str	r2, [r3, #32]
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400

08005374 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	051b      	lsls	r3, r3, #20
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a14      	ldr	r2, [pc, #80]	@ (800541c <TIM_OC6_SetConfig+0xa8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_OC6_SetConfig+0x6c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a13      	ldr	r2, [pc, #76]	@ (8005420 <TIM_OC6_SetConfig+0xac>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC6_SetConfig+0x6c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a12      	ldr	r2, [pc, #72]	@ (8005424 <TIM_OC6_SetConfig+0xb0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d109      	bne.n	80053f4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40014000 	.word	0x40014000
 8005424:	40014400 	.word	0x40014400

08005428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 030a 	bic.w	r3, r3, #10
 8005464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005486:	b480      	push	{r7}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f023 0210 	bic.w	r2, r3, #16
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	031b      	lsls	r3, r3, #12
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	f043 0307 	orr.w	r3, r3, #7
 8005508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	431a      	orrs	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4313      	orrs	r3, r2
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	609a      	str	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005570:	2302      	movs	r3, #2
 8005572:	e04f      	b.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a21      	ldr	r2, [pc, #132]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d108      	bne.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a14      	ldr	r2, [pc, #80]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055dc:	d004      	beq.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a10      	ldr	r2, [pc, #64]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10c      	bne.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000

08005628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005640:	2302      	movs	r3, #2
 8005642:	e060      	b.n	8005706 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a14      	ldr	r2, [pc, #80]	@ (8005714 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d115      	bne.n	80056f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	051b      	lsls	r3, r3, #20
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40012c00 	.word	0x40012c00

08005718 <std>:
 8005718:	2300      	movs	r3, #0
 800571a:	b510      	push	{r4, lr}
 800571c:	4604      	mov	r4, r0
 800571e:	e9c0 3300 	strd	r3, r3, [r0]
 8005722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005726:	6083      	str	r3, [r0, #8]
 8005728:	8181      	strh	r1, [r0, #12]
 800572a:	6643      	str	r3, [r0, #100]	@ 0x64
 800572c:	81c2      	strh	r2, [r0, #14]
 800572e:	6183      	str	r3, [r0, #24]
 8005730:	4619      	mov	r1, r3
 8005732:	2208      	movs	r2, #8
 8005734:	305c      	adds	r0, #92	@ 0x5c
 8005736:	f000 fa01 	bl	8005b3c <memset>
 800573a:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <std+0x58>)
 800573c:	6263      	str	r3, [r4, #36]	@ 0x24
 800573e:	4b0d      	ldr	r3, [pc, #52]	@ (8005774 <std+0x5c>)
 8005740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005742:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <std+0x60>)
 8005744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <std+0x64>)
 8005748:	6323      	str	r3, [r4, #48]	@ 0x30
 800574a:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <std+0x68>)
 800574c:	6224      	str	r4, [r4, #32]
 800574e:	429c      	cmp	r4, r3
 8005750:	d006      	beq.n	8005760 <std+0x48>
 8005752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005756:	4294      	cmp	r4, r2
 8005758:	d002      	beq.n	8005760 <std+0x48>
 800575a:	33d0      	adds	r3, #208	@ 0xd0
 800575c:	429c      	cmp	r4, r3
 800575e:	d105      	bne.n	800576c <std+0x54>
 8005760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005768:	f000 ba80 	b.w	8005c6c <__retarget_lock_init_recursive>
 800576c:	bd10      	pop	{r4, pc}
 800576e:	bf00      	nop
 8005770:	0800598d 	.word	0x0800598d
 8005774:	080059af 	.word	0x080059af
 8005778:	080059e7 	.word	0x080059e7
 800577c:	08005a0b 	.word	0x08005a0b
 8005780:	20000540 	.word	0x20000540

08005784 <stdio_exit_handler>:
 8005784:	4a02      	ldr	r2, [pc, #8]	@ (8005790 <stdio_exit_handler+0xc>)
 8005786:	4903      	ldr	r1, [pc, #12]	@ (8005794 <stdio_exit_handler+0x10>)
 8005788:	4803      	ldr	r0, [pc, #12]	@ (8005798 <stdio_exit_handler+0x14>)
 800578a:	f000 b869 	b.w	8005860 <_fwalk_sglue>
 800578e:	bf00      	nop
 8005790:	2000000c 	.word	0x2000000c
 8005794:	08006529 	.word	0x08006529
 8005798:	2000001c 	.word	0x2000001c

0800579c <cleanup_stdio>:
 800579c:	6841      	ldr	r1, [r0, #4]
 800579e:	4b0c      	ldr	r3, [pc, #48]	@ (80057d0 <cleanup_stdio+0x34>)
 80057a0:	4299      	cmp	r1, r3
 80057a2:	b510      	push	{r4, lr}
 80057a4:	4604      	mov	r4, r0
 80057a6:	d001      	beq.n	80057ac <cleanup_stdio+0x10>
 80057a8:	f000 febe 	bl	8006528 <_fflush_r>
 80057ac:	68a1      	ldr	r1, [r4, #8]
 80057ae:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <cleanup_stdio+0x38>)
 80057b0:	4299      	cmp	r1, r3
 80057b2:	d002      	beq.n	80057ba <cleanup_stdio+0x1e>
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 feb7 	bl	8006528 <_fflush_r>
 80057ba:	68e1      	ldr	r1, [r4, #12]
 80057bc:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <cleanup_stdio+0x3c>)
 80057be:	4299      	cmp	r1, r3
 80057c0:	d004      	beq.n	80057cc <cleanup_stdio+0x30>
 80057c2:	4620      	mov	r0, r4
 80057c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c8:	f000 beae 	b.w	8006528 <_fflush_r>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	bf00      	nop
 80057d0:	20000540 	.word	0x20000540
 80057d4:	200005a8 	.word	0x200005a8
 80057d8:	20000610 	.word	0x20000610

080057dc <global_stdio_init.part.0>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	4b0b      	ldr	r3, [pc, #44]	@ (800580c <global_stdio_init.part.0+0x30>)
 80057e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005810 <global_stdio_init.part.0+0x34>)
 80057e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005814 <global_stdio_init.part.0+0x38>)
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	4620      	mov	r0, r4
 80057e8:	2200      	movs	r2, #0
 80057ea:	2104      	movs	r1, #4
 80057ec:	f7ff ff94 	bl	8005718 <std>
 80057f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057f4:	2201      	movs	r2, #1
 80057f6:	2109      	movs	r1, #9
 80057f8:	f7ff ff8e 	bl	8005718 <std>
 80057fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005800:	2202      	movs	r2, #2
 8005802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005806:	2112      	movs	r1, #18
 8005808:	f7ff bf86 	b.w	8005718 <std>
 800580c:	20000678 	.word	0x20000678
 8005810:	20000540 	.word	0x20000540
 8005814:	08005785 	.word	0x08005785

08005818 <__sfp_lock_acquire>:
 8005818:	4801      	ldr	r0, [pc, #4]	@ (8005820 <__sfp_lock_acquire+0x8>)
 800581a:	f000 ba28 	b.w	8005c6e <__retarget_lock_acquire_recursive>
 800581e:	bf00      	nop
 8005820:	20000681 	.word	0x20000681

08005824 <__sfp_lock_release>:
 8005824:	4801      	ldr	r0, [pc, #4]	@ (800582c <__sfp_lock_release+0x8>)
 8005826:	f000 ba23 	b.w	8005c70 <__retarget_lock_release_recursive>
 800582a:	bf00      	nop
 800582c:	20000681 	.word	0x20000681

08005830 <__sinit>:
 8005830:	b510      	push	{r4, lr}
 8005832:	4604      	mov	r4, r0
 8005834:	f7ff fff0 	bl	8005818 <__sfp_lock_acquire>
 8005838:	6a23      	ldr	r3, [r4, #32]
 800583a:	b11b      	cbz	r3, 8005844 <__sinit+0x14>
 800583c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005840:	f7ff bff0 	b.w	8005824 <__sfp_lock_release>
 8005844:	4b04      	ldr	r3, [pc, #16]	@ (8005858 <__sinit+0x28>)
 8005846:	6223      	str	r3, [r4, #32]
 8005848:	4b04      	ldr	r3, [pc, #16]	@ (800585c <__sinit+0x2c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f5      	bne.n	800583c <__sinit+0xc>
 8005850:	f7ff ffc4 	bl	80057dc <global_stdio_init.part.0>
 8005854:	e7f2      	b.n	800583c <__sinit+0xc>
 8005856:	bf00      	nop
 8005858:	0800579d 	.word	0x0800579d
 800585c:	20000678 	.word	0x20000678

08005860 <_fwalk_sglue>:
 8005860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005864:	4607      	mov	r7, r0
 8005866:	4688      	mov	r8, r1
 8005868:	4614      	mov	r4, r2
 800586a:	2600      	movs	r6, #0
 800586c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005870:	f1b9 0901 	subs.w	r9, r9, #1
 8005874:	d505      	bpl.n	8005882 <_fwalk_sglue+0x22>
 8005876:	6824      	ldr	r4, [r4, #0]
 8005878:	2c00      	cmp	r4, #0
 800587a:	d1f7      	bne.n	800586c <_fwalk_sglue+0xc>
 800587c:	4630      	mov	r0, r6
 800587e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d907      	bls.n	8005898 <_fwalk_sglue+0x38>
 8005888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800588c:	3301      	adds	r3, #1
 800588e:	d003      	beq.n	8005898 <_fwalk_sglue+0x38>
 8005890:	4629      	mov	r1, r5
 8005892:	4638      	mov	r0, r7
 8005894:	47c0      	blx	r8
 8005896:	4306      	orrs	r6, r0
 8005898:	3568      	adds	r5, #104	@ 0x68
 800589a:	e7e9      	b.n	8005870 <_fwalk_sglue+0x10>

0800589c <iprintf>:
 800589c:	b40f      	push	{r0, r1, r2, r3}
 800589e:	b507      	push	{r0, r1, r2, lr}
 80058a0:	4906      	ldr	r1, [pc, #24]	@ (80058bc <iprintf+0x20>)
 80058a2:	ab04      	add	r3, sp, #16
 80058a4:	6808      	ldr	r0, [r1, #0]
 80058a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058aa:	6881      	ldr	r1, [r0, #8]
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	f000 fb11 	bl	8005ed4 <_vfiprintf_r>
 80058b2:	b003      	add	sp, #12
 80058b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058b8:	b004      	add	sp, #16
 80058ba:	4770      	bx	lr
 80058bc:	20000018 	.word	0x20000018

080058c0 <putchar>:
 80058c0:	4b02      	ldr	r3, [pc, #8]	@ (80058cc <putchar+0xc>)
 80058c2:	4601      	mov	r1, r0
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	6882      	ldr	r2, [r0, #8]
 80058c8:	f000 beb8 	b.w	800663c <_putc_r>
 80058cc:	20000018 	.word	0x20000018

080058d0 <_puts_r>:
 80058d0:	6a03      	ldr	r3, [r0, #32]
 80058d2:	b570      	push	{r4, r5, r6, lr}
 80058d4:	6884      	ldr	r4, [r0, #8]
 80058d6:	4605      	mov	r5, r0
 80058d8:	460e      	mov	r6, r1
 80058da:	b90b      	cbnz	r3, 80058e0 <_puts_r+0x10>
 80058dc:	f7ff ffa8 	bl	8005830 <__sinit>
 80058e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058e2:	07db      	lsls	r3, r3, #31
 80058e4:	d405      	bmi.n	80058f2 <_puts_r+0x22>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	0598      	lsls	r0, r3, #22
 80058ea:	d402      	bmi.n	80058f2 <_puts_r+0x22>
 80058ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058ee:	f000 f9be 	bl	8005c6e <__retarget_lock_acquire_recursive>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	0719      	lsls	r1, r3, #28
 80058f6:	d502      	bpl.n	80058fe <_puts_r+0x2e>
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d135      	bne.n	800596a <_puts_r+0x9a>
 80058fe:	4621      	mov	r1, r4
 8005900:	4628      	mov	r0, r5
 8005902:	f000 f8c5 	bl	8005a90 <__swsetup_r>
 8005906:	b380      	cbz	r0, 800596a <_puts_r+0x9a>
 8005908:	f04f 35ff 	mov.w	r5, #4294967295
 800590c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800590e:	07da      	lsls	r2, r3, #31
 8005910:	d405      	bmi.n	800591e <_puts_r+0x4e>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	059b      	lsls	r3, r3, #22
 8005916:	d402      	bmi.n	800591e <_puts_r+0x4e>
 8005918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800591a:	f000 f9a9 	bl	8005c70 <__retarget_lock_release_recursive>
 800591e:	4628      	mov	r0, r5
 8005920:	bd70      	pop	{r4, r5, r6, pc}
 8005922:	2b00      	cmp	r3, #0
 8005924:	da04      	bge.n	8005930 <_puts_r+0x60>
 8005926:	69a2      	ldr	r2, [r4, #24]
 8005928:	429a      	cmp	r2, r3
 800592a:	dc17      	bgt.n	800595c <_puts_r+0x8c>
 800592c:	290a      	cmp	r1, #10
 800592e:	d015      	beq.n	800595c <_puts_r+0x8c>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	6022      	str	r2, [r4, #0]
 8005936:	7019      	strb	r1, [r3, #0]
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800593e:	3b01      	subs	r3, #1
 8005940:	60a3      	str	r3, [r4, #8]
 8005942:	2900      	cmp	r1, #0
 8005944:	d1ed      	bne.n	8005922 <_puts_r+0x52>
 8005946:	2b00      	cmp	r3, #0
 8005948:	da11      	bge.n	800596e <_puts_r+0x9e>
 800594a:	4622      	mov	r2, r4
 800594c:	210a      	movs	r1, #10
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f85f 	bl	8005a12 <__swbuf_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d0d7      	beq.n	8005908 <_puts_r+0x38>
 8005958:	250a      	movs	r5, #10
 800595a:	e7d7      	b.n	800590c <_puts_r+0x3c>
 800595c:	4622      	mov	r2, r4
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f857 	bl	8005a12 <__swbuf_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d1e7      	bne.n	8005938 <_puts_r+0x68>
 8005968:	e7ce      	b.n	8005908 <_puts_r+0x38>
 800596a:	3e01      	subs	r6, #1
 800596c:	e7e4      	b.n	8005938 <_puts_r+0x68>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	6022      	str	r2, [r4, #0]
 8005974:	220a      	movs	r2, #10
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e7ee      	b.n	8005958 <_puts_r+0x88>
	...

0800597c <puts>:
 800597c:	4b02      	ldr	r3, [pc, #8]	@ (8005988 <puts+0xc>)
 800597e:	4601      	mov	r1, r0
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	f7ff bfa5 	b.w	80058d0 <_puts_r>
 8005986:	bf00      	nop
 8005988:	20000018 	.word	0x20000018

0800598c <__sread>:
 800598c:	b510      	push	{r4, lr}
 800598e:	460c      	mov	r4, r1
 8005990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005994:	f000 f91c 	bl	8005bd0 <_read_r>
 8005998:	2800      	cmp	r0, #0
 800599a:	bfab      	itete	ge
 800599c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800599e:	89a3      	ldrhlt	r3, [r4, #12]
 80059a0:	181b      	addge	r3, r3, r0
 80059a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059a6:	bfac      	ite	ge
 80059a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059aa:	81a3      	strhlt	r3, [r4, #12]
 80059ac:	bd10      	pop	{r4, pc}

080059ae <__swrite>:
 80059ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	461f      	mov	r7, r3
 80059b4:	898b      	ldrh	r3, [r1, #12]
 80059b6:	05db      	lsls	r3, r3, #23
 80059b8:	4605      	mov	r5, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	4616      	mov	r6, r2
 80059be:	d505      	bpl.n	80059cc <__swrite+0x1e>
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	2302      	movs	r3, #2
 80059c6:	2200      	movs	r2, #0
 80059c8:	f000 f8f0 	bl	8005bac <_lseek_r>
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059d6:	81a3      	strh	r3, [r4, #12]
 80059d8:	4632      	mov	r2, r6
 80059da:	463b      	mov	r3, r7
 80059dc:	4628      	mov	r0, r5
 80059de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	f000 b907 	b.w	8005bf4 <_write_r>

080059e6 <__sseek>:
 80059e6:	b510      	push	{r4, lr}
 80059e8:	460c      	mov	r4, r1
 80059ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ee:	f000 f8dd 	bl	8005bac <_lseek_r>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	bf15      	itete	ne
 80059f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a02:	81a3      	strheq	r3, [r4, #12]
 8005a04:	bf18      	it	ne
 8005a06:	81a3      	strhne	r3, [r4, #12]
 8005a08:	bd10      	pop	{r4, pc}

08005a0a <__sclose>:
 8005a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0e:	f000 b8bd 	b.w	8005b8c <_close_r>

08005a12 <__swbuf_r>:
 8005a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a14:	460e      	mov	r6, r1
 8005a16:	4614      	mov	r4, r2
 8005a18:	4605      	mov	r5, r0
 8005a1a:	b118      	cbz	r0, 8005a24 <__swbuf_r+0x12>
 8005a1c:	6a03      	ldr	r3, [r0, #32]
 8005a1e:	b90b      	cbnz	r3, 8005a24 <__swbuf_r+0x12>
 8005a20:	f7ff ff06 	bl	8005830 <__sinit>
 8005a24:	69a3      	ldr	r3, [r4, #24]
 8005a26:	60a3      	str	r3, [r4, #8]
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	071a      	lsls	r2, r3, #28
 8005a2c:	d501      	bpl.n	8005a32 <__swbuf_r+0x20>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	b943      	cbnz	r3, 8005a44 <__swbuf_r+0x32>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f82b 	bl	8005a90 <__swsetup_r>
 8005a3a:	b118      	cbz	r0, 8005a44 <__swbuf_r+0x32>
 8005a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a40:	4638      	mov	r0, r7
 8005a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	6922      	ldr	r2, [r4, #16]
 8005a48:	1a98      	subs	r0, r3, r2
 8005a4a:	6963      	ldr	r3, [r4, #20]
 8005a4c:	b2f6      	uxtb	r6, r6
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	4637      	mov	r7, r6
 8005a52:	dc05      	bgt.n	8005a60 <__swbuf_r+0x4e>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fd66 	bl	8006528 <_fflush_r>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d1ed      	bne.n	8005a3c <__swbuf_r+0x2a>
 8005a60:	68a3      	ldr	r3, [r4, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	60a3      	str	r3, [r4, #8]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	6022      	str	r2, [r4, #0]
 8005a6c:	701e      	strb	r6, [r3, #0]
 8005a6e:	6962      	ldr	r2, [r4, #20]
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d004      	beq.n	8005a80 <__swbuf_r+0x6e>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	07db      	lsls	r3, r3, #31
 8005a7a:	d5e1      	bpl.n	8005a40 <__swbuf_r+0x2e>
 8005a7c:	2e0a      	cmp	r6, #10
 8005a7e:	d1df      	bne.n	8005a40 <__swbuf_r+0x2e>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4628      	mov	r0, r5
 8005a84:	f000 fd50 	bl	8006528 <_fflush_r>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d0d9      	beq.n	8005a40 <__swbuf_r+0x2e>
 8005a8c:	e7d6      	b.n	8005a3c <__swbuf_r+0x2a>
	...

08005a90 <__swsetup_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4b29      	ldr	r3, [pc, #164]	@ (8005b38 <__swsetup_r+0xa8>)
 8005a94:	4605      	mov	r5, r0
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	460c      	mov	r4, r1
 8005a9a:	b118      	cbz	r0, 8005aa4 <__swsetup_r+0x14>
 8005a9c:	6a03      	ldr	r3, [r0, #32]
 8005a9e:	b90b      	cbnz	r3, 8005aa4 <__swsetup_r+0x14>
 8005aa0:	f7ff fec6 	bl	8005830 <__sinit>
 8005aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa8:	0719      	lsls	r1, r3, #28
 8005aaa:	d422      	bmi.n	8005af2 <__swsetup_r+0x62>
 8005aac:	06da      	lsls	r2, r3, #27
 8005aae:	d407      	bmi.n	8005ac0 <__swsetup_r+0x30>
 8005ab0:	2209      	movs	r2, #9
 8005ab2:	602a      	str	r2, [r5, #0]
 8005ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	e033      	b.n	8005b28 <__swsetup_r+0x98>
 8005ac0:	0758      	lsls	r0, r3, #29
 8005ac2:	d512      	bpl.n	8005aea <__swsetup_r+0x5a>
 8005ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ac6:	b141      	cbz	r1, 8005ada <__swsetup_r+0x4a>
 8005ac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005acc:	4299      	cmp	r1, r3
 8005ace:	d002      	beq.n	8005ad6 <__swsetup_r+0x46>
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f8dd 	bl	8005c90 <_free_r>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ae0:	81a3      	strh	r3, [r4, #12]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6063      	str	r3, [r4, #4]
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	f043 0308 	orr.w	r3, r3, #8
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	b94b      	cbnz	r3, 8005b0a <__swsetup_r+0x7a>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b00:	d003      	beq.n	8005b0a <__swsetup_r+0x7a>
 8005b02:	4621      	mov	r1, r4
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 fd5d 	bl	80065c4 <__smakebuf_r>
 8005b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b0e:	f013 0201 	ands.w	r2, r3, #1
 8005b12:	d00a      	beq.n	8005b2a <__swsetup_r+0x9a>
 8005b14:	2200      	movs	r2, #0
 8005b16:	60a2      	str	r2, [r4, #8]
 8005b18:	6962      	ldr	r2, [r4, #20]
 8005b1a:	4252      	negs	r2, r2
 8005b1c:	61a2      	str	r2, [r4, #24]
 8005b1e:	6922      	ldr	r2, [r4, #16]
 8005b20:	b942      	cbnz	r2, 8005b34 <__swsetup_r+0xa4>
 8005b22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b26:	d1c5      	bne.n	8005ab4 <__swsetup_r+0x24>
 8005b28:	bd38      	pop	{r3, r4, r5, pc}
 8005b2a:	0799      	lsls	r1, r3, #30
 8005b2c:	bf58      	it	pl
 8005b2e:	6962      	ldrpl	r2, [r4, #20]
 8005b30:	60a2      	str	r2, [r4, #8]
 8005b32:	e7f4      	b.n	8005b1e <__swsetup_r+0x8e>
 8005b34:	2000      	movs	r0, #0
 8005b36:	e7f7      	b.n	8005b28 <__swsetup_r+0x98>
 8005b38:	20000018 	.word	0x20000018

08005b3c <memset>:
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <strncpy>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	3901      	subs	r1, #1
 8005b50:	4603      	mov	r3, r0
 8005b52:	b132      	cbz	r2, 8005b62 <strncpy+0x16>
 8005b54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b58:	f803 4b01 	strb.w	r4, [r3], #1
 8005b5c:	3a01      	subs	r2, #1
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d1f7      	bne.n	8005b52 <strncpy+0x6>
 8005b62:	441a      	add	r2, r3
 8005b64:	2100      	movs	r1, #0
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d100      	bne.n	8005b6c <strncpy+0x20>
 8005b6a:	bd10      	pop	{r4, pc}
 8005b6c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b70:	e7f9      	b.n	8005b66 <strncpy+0x1a>

08005b72 <strnlen>:
 8005b72:	b510      	push	{r4, lr}
 8005b74:	4602      	mov	r2, r0
 8005b76:	4401      	add	r1, r0
 8005b78:	428a      	cmp	r2, r1
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <strnlen+0x14>
 8005b7e:	781c      	ldrb	r4, [r3, #0]
 8005b80:	3201      	adds	r2, #1
 8005b82:	2c00      	cmp	r4, #0
 8005b84:	d1f8      	bne.n	8005b78 <strnlen+0x6>
 8005b86:	1a18      	subs	r0, r3, r0
 8005b88:	bd10      	pop	{r4, pc}
	...

08005b8c <_close_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	@ (8005ba8 <_close_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fc ff26 	bl	80029e8 <_close>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_close_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_close_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	2000067c 	.word	0x2000067c

08005bac <_lseek_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d07      	ldr	r5, [pc, #28]	@ (8005bcc <_lseek_r+0x20>)
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	602a      	str	r2, [r5, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f7fc ff3b 	bl	8002a36 <_lseek>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_lseek_r+0x1e>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_lseek_r+0x1e>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	2000067c 	.word	0x2000067c

08005bd0 <_read_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d07      	ldr	r5, [pc, #28]	@ (8005bf0 <_read_r+0x20>)
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	4611      	mov	r1, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f7fc fec9 	bl	8002976 <_read>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_read_r+0x1e>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_read_r+0x1e>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	2000067c 	.word	0x2000067c

08005bf4 <_write_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d07      	ldr	r5, [pc, #28]	@ (8005c14 <_write_r+0x20>)
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	2200      	movs	r2, #0
 8005c00:	602a      	str	r2, [r5, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f7fc fed4 	bl	80029b0 <_write>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_write_r+0x1e>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_write_r+0x1e>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	2000067c 	.word	0x2000067c

08005c18 <__errno>:
 8005c18:	4b01      	ldr	r3, [pc, #4]	@ (8005c20 <__errno+0x8>)
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000018 	.word	0x20000018

08005c24 <__libc_init_array>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	4d0d      	ldr	r5, [pc, #52]	@ (8005c5c <__libc_init_array+0x38>)
 8005c28:	4c0d      	ldr	r4, [pc, #52]	@ (8005c60 <__libc_init_array+0x3c>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	2600      	movs	r6, #0
 8005c30:	42a6      	cmp	r6, r4
 8005c32:	d109      	bne.n	8005c48 <__libc_init_array+0x24>
 8005c34:	4d0b      	ldr	r5, [pc, #44]	@ (8005c64 <__libc_init_array+0x40>)
 8005c36:	4c0c      	ldr	r4, [pc, #48]	@ (8005c68 <__libc_init_array+0x44>)
 8005c38:	f000 fd66 	bl	8006708 <_init>
 8005c3c:	1b64      	subs	r4, r4, r5
 8005c3e:	10a4      	asrs	r4, r4, #2
 8005c40:	2600      	movs	r6, #0
 8005c42:	42a6      	cmp	r6, r4
 8005c44:	d105      	bne.n	8005c52 <__libc_init_array+0x2e>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4c:	4798      	blx	r3
 8005c4e:	3601      	adds	r6, #1
 8005c50:	e7ee      	b.n	8005c30 <__libc_init_array+0xc>
 8005c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c56:	4798      	blx	r3
 8005c58:	3601      	adds	r6, #1
 8005c5a:	e7f2      	b.n	8005c42 <__libc_init_array+0x1e>
 8005c5c:	0800690c 	.word	0x0800690c
 8005c60:	0800690c 	.word	0x0800690c
 8005c64:	0800690c 	.word	0x0800690c
 8005c68:	08006910 	.word	0x08006910

08005c6c <__retarget_lock_init_recursive>:
 8005c6c:	4770      	bx	lr

08005c6e <__retarget_lock_acquire_recursive>:
 8005c6e:	4770      	bx	lr

08005c70 <__retarget_lock_release_recursive>:
 8005c70:	4770      	bx	lr

08005c72 <memcpy>:
 8005c72:	440a      	add	r2, r1
 8005c74:	4291      	cmp	r1, r2
 8005c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c7a:	d100      	bne.n	8005c7e <memcpy+0xc>
 8005c7c:	4770      	bx	lr
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c88:	4291      	cmp	r1, r2
 8005c8a:	d1f9      	bne.n	8005c80 <memcpy+0xe>
 8005c8c:	bd10      	pop	{r4, pc}
	...

08005c90 <_free_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4605      	mov	r5, r0
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d041      	beq.n	8005d1c <_free_r+0x8c>
 8005c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9c:	1f0c      	subs	r4, r1, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfb8      	it	lt
 8005ca2:	18e4      	addlt	r4, r4, r3
 8005ca4:	f000 f8e0 	bl	8005e68 <__malloc_lock>
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d20 <_free_r+0x90>)
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	b933      	cbnz	r3, 8005cbc <_free_r+0x2c>
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	6014      	str	r4, [r2, #0]
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb8:	f000 b8dc 	b.w	8005e74 <__malloc_unlock>
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	d908      	bls.n	8005cd2 <_free_r+0x42>
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	1821      	adds	r1, r4, r0
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	bf01      	itttt	eq
 8005cc8:	6819      	ldreq	r1, [r3, #0]
 8005cca:	685b      	ldreq	r3, [r3, #4]
 8005ccc:	1809      	addeq	r1, r1, r0
 8005cce:	6021      	streq	r1, [r4, #0]
 8005cd0:	e7ed      	b.n	8005cae <_free_r+0x1e>
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b10b      	cbz	r3, 8005cdc <_free_r+0x4c>
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d9fa      	bls.n	8005cd2 <_free_r+0x42>
 8005cdc:	6811      	ldr	r1, [r2, #0]
 8005cde:	1850      	adds	r0, r2, r1
 8005ce0:	42a0      	cmp	r0, r4
 8005ce2:	d10b      	bne.n	8005cfc <_free_r+0x6c>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	4401      	add	r1, r0
 8005ce8:	1850      	adds	r0, r2, r1
 8005cea:	4283      	cmp	r3, r0
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	d1e0      	bne.n	8005cb2 <_free_r+0x22>
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	6053      	str	r3, [r2, #4]
 8005cf6:	4408      	add	r0, r1
 8005cf8:	6010      	str	r0, [r2, #0]
 8005cfa:	e7da      	b.n	8005cb2 <_free_r+0x22>
 8005cfc:	d902      	bls.n	8005d04 <_free_r+0x74>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	e7d6      	b.n	8005cb2 <_free_r+0x22>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	1821      	adds	r1, r4, r0
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	bf04      	itt	eq
 8005d0c:	6819      	ldreq	r1, [r3, #0]
 8005d0e:	685b      	ldreq	r3, [r3, #4]
 8005d10:	6063      	str	r3, [r4, #4]
 8005d12:	bf04      	itt	eq
 8005d14:	1809      	addeq	r1, r1, r0
 8005d16:	6021      	streq	r1, [r4, #0]
 8005d18:	6054      	str	r4, [r2, #4]
 8005d1a:	e7ca      	b.n	8005cb2 <_free_r+0x22>
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000688 	.word	0x20000688

08005d24 <sbrk_aligned>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4e0f      	ldr	r6, [pc, #60]	@ (8005d64 <sbrk_aligned+0x40>)
 8005d28:	460c      	mov	r4, r1
 8005d2a:	6831      	ldr	r1, [r6, #0]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	b911      	cbnz	r1, 8005d36 <sbrk_aligned+0x12>
 8005d30:	f000 fcda 	bl	80066e8 <_sbrk_r>
 8005d34:	6030      	str	r0, [r6, #0]
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 fcd5 	bl	80066e8 <_sbrk_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d103      	bne.n	8005d4a <sbrk_aligned+0x26>
 8005d42:	f04f 34ff 	mov.w	r4, #4294967295
 8005d46:	4620      	mov	r0, r4
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
 8005d4a:	1cc4      	adds	r4, r0, #3
 8005d4c:	f024 0403 	bic.w	r4, r4, #3
 8005d50:	42a0      	cmp	r0, r4
 8005d52:	d0f8      	beq.n	8005d46 <sbrk_aligned+0x22>
 8005d54:	1a21      	subs	r1, r4, r0
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 fcc6 	bl	80066e8 <_sbrk_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1f2      	bne.n	8005d46 <sbrk_aligned+0x22>
 8005d60:	e7ef      	b.n	8005d42 <sbrk_aligned+0x1e>
 8005d62:	bf00      	nop
 8005d64:	20000684 	.word	0x20000684

08005d68 <_malloc_r>:
 8005d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d904      	bls.n	8005d8e <_malloc_r+0x26>
 8005d84:	230c      	movs	r3, #12
 8005d86:	6033      	str	r3, [r6, #0]
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e64 <_malloc_r+0xfc>
 8005d92:	f000 f869 	bl	8005e68 <__malloc_lock>
 8005d96:	f8d8 3000 	ldr.w	r3, [r8]
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	bb44      	cbnz	r4, 8005df0 <_malloc_r+0x88>
 8005d9e:	4629      	mov	r1, r5
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff ffbf 	bl	8005d24 <sbrk_aligned>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	4604      	mov	r4, r0
 8005daa:	d158      	bne.n	8005e5e <_malloc_r+0xf6>
 8005dac:	f8d8 4000 	ldr.w	r4, [r8]
 8005db0:	4627      	mov	r7, r4
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	d143      	bne.n	8005e3e <_malloc_r+0xd6>
 8005db6:	2c00      	cmp	r4, #0
 8005db8:	d04b      	beq.n	8005e52 <_malloc_r+0xea>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	eb04 0903 	add.w	r9, r4, r3
 8005dc4:	f000 fc90 	bl	80066e8 <_sbrk_r>
 8005dc8:	4581      	cmp	r9, r0
 8005dca:	d142      	bne.n	8005e52 <_malloc_r+0xea>
 8005dcc:	6821      	ldr	r1, [r4, #0]
 8005dce:	1a6d      	subs	r5, r5, r1
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff ffa6 	bl	8005d24 <sbrk_aligned>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d03a      	beq.n	8005e52 <_malloc_r+0xea>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	442b      	add	r3, r5
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	f8d8 3000 	ldr.w	r3, [r8]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	bb62      	cbnz	r2, 8005e44 <_malloc_r+0xdc>
 8005dea:	f8c8 7000 	str.w	r7, [r8]
 8005dee:	e00f      	b.n	8005e10 <_malloc_r+0xa8>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	1b52      	subs	r2, r2, r5
 8005df4:	d420      	bmi.n	8005e38 <_malloc_r+0xd0>
 8005df6:	2a0b      	cmp	r2, #11
 8005df8:	d917      	bls.n	8005e2a <_malloc_r+0xc2>
 8005dfa:	1961      	adds	r1, r4, r5
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	6025      	str	r5, [r4, #0]
 8005e00:	bf18      	it	ne
 8005e02:	6059      	strne	r1, [r3, #4]
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	bf08      	it	eq
 8005e08:	f8c8 1000 	streq.w	r1, [r8]
 8005e0c:	5162      	str	r2, [r4, r5]
 8005e0e:	604b      	str	r3, [r1, #4]
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 f82f 	bl	8005e74 <__malloc_unlock>
 8005e16:	f104 000b 	add.w	r0, r4, #11
 8005e1a:	1d23      	adds	r3, r4, #4
 8005e1c:	f020 0007 	bic.w	r0, r0, #7
 8005e20:	1ac2      	subs	r2, r0, r3
 8005e22:	bf1c      	itt	ne
 8005e24:	1a1b      	subne	r3, r3, r0
 8005e26:	50a3      	strne	r3, [r4, r2]
 8005e28:	e7af      	b.n	8005d8a <_malloc_r+0x22>
 8005e2a:	6862      	ldr	r2, [r4, #4]
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	bf0c      	ite	eq
 8005e30:	f8c8 2000 	streq.w	r2, [r8]
 8005e34:	605a      	strne	r2, [r3, #4]
 8005e36:	e7eb      	b.n	8005e10 <_malloc_r+0xa8>
 8005e38:	4623      	mov	r3, r4
 8005e3a:	6864      	ldr	r4, [r4, #4]
 8005e3c:	e7ae      	b.n	8005d9c <_malloc_r+0x34>
 8005e3e:	463c      	mov	r4, r7
 8005e40:	687f      	ldr	r7, [r7, #4]
 8005e42:	e7b6      	b.n	8005db2 <_malloc_r+0x4a>
 8005e44:	461a      	mov	r2, r3
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	d1fb      	bne.n	8005e44 <_malloc_r+0xdc>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6053      	str	r3, [r2, #4]
 8005e50:	e7de      	b.n	8005e10 <_malloc_r+0xa8>
 8005e52:	230c      	movs	r3, #12
 8005e54:	6033      	str	r3, [r6, #0]
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 f80c 	bl	8005e74 <__malloc_unlock>
 8005e5c:	e794      	b.n	8005d88 <_malloc_r+0x20>
 8005e5e:	6005      	str	r5, [r0, #0]
 8005e60:	e7d6      	b.n	8005e10 <_malloc_r+0xa8>
 8005e62:	bf00      	nop
 8005e64:	20000688 	.word	0x20000688

08005e68 <__malloc_lock>:
 8005e68:	4801      	ldr	r0, [pc, #4]	@ (8005e70 <__malloc_lock+0x8>)
 8005e6a:	f7ff bf00 	b.w	8005c6e <__retarget_lock_acquire_recursive>
 8005e6e:	bf00      	nop
 8005e70:	20000680 	.word	0x20000680

08005e74 <__malloc_unlock>:
 8005e74:	4801      	ldr	r0, [pc, #4]	@ (8005e7c <__malloc_unlock+0x8>)
 8005e76:	f7ff befb 	b.w	8005c70 <__retarget_lock_release_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	20000680 	.word	0x20000680

08005e80 <__sfputc_r>:
 8005e80:	6893      	ldr	r3, [r2, #8]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	b410      	push	{r4}
 8005e88:	6093      	str	r3, [r2, #8]
 8005e8a:	da08      	bge.n	8005e9e <__sfputc_r+0x1e>
 8005e8c:	6994      	ldr	r4, [r2, #24]
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	db01      	blt.n	8005e96 <__sfputc_r+0x16>
 8005e92:	290a      	cmp	r1, #10
 8005e94:	d103      	bne.n	8005e9e <__sfputc_r+0x1e>
 8005e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e9a:	f7ff bdba 	b.w	8005a12 <__swbuf_r>
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	1c58      	adds	r0, r3, #1
 8005ea2:	6010      	str	r0, [r2, #0]
 8005ea4:	7019      	strb	r1, [r3, #0]
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <__sfputs_r>:
 8005eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	18d5      	adds	r5, r2, r3
 8005eb8:	42ac      	cmp	r4, r5
 8005eba:	d101      	bne.n	8005ec0 <__sfputs_r+0x12>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e007      	b.n	8005ed0 <__sfputs_r+0x22>
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	463a      	mov	r2, r7
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ffda 	bl	8005e80 <__sfputc_r>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d1f3      	bne.n	8005eb8 <__sfputs_r+0xa>
 8005ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ed4 <_vfiprintf_r>:
 8005ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	460d      	mov	r5, r1
 8005eda:	b09d      	sub	sp, #116	@ 0x74
 8005edc:	4614      	mov	r4, r2
 8005ede:	4698      	mov	r8, r3
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	b118      	cbz	r0, 8005eec <_vfiprintf_r+0x18>
 8005ee4:	6a03      	ldr	r3, [r0, #32]
 8005ee6:	b90b      	cbnz	r3, 8005eec <_vfiprintf_r+0x18>
 8005ee8:	f7ff fca2 	bl	8005830 <__sinit>
 8005eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eee:	07d9      	lsls	r1, r3, #31
 8005ef0:	d405      	bmi.n	8005efe <_vfiprintf_r+0x2a>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	059a      	lsls	r2, r3, #22
 8005ef6:	d402      	bmi.n	8005efe <_vfiprintf_r+0x2a>
 8005ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005efa:	f7ff feb8 	bl	8005c6e <__retarget_lock_acquire_recursive>
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	071b      	lsls	r3, r3, #28
 8005f02:	d501      	bpl.n	8005f08 <_vfiprintf_r+0x34>
 8005f04:	692b      	ldr	r3, [r5, #16]
 8005f06:	b99b      	cbnz	r3, 8005f30 <_vfiprintf_r+0x5c>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f7ff fdc0 	bl	8005a90 <__swsetup_r>
 8005f10:	b170      	cbz	r0, 8005f30 <_vfiprintf_r+0x5c>
 8005f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f14:	07dc      	lsls	r4, r3, #31
 8005f16:	d504      	bpl.n	8005f22 <_vfiprintf_r+0x4e>
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	b01d      	add	sp, #116	@ 0x74
 8005f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f22:	89ab      	ldrh	r3, [r5, #12]
 8005f24:	0598      	lsls	r0, r3, #22
 8005f26:	d4f7      	bmi.n	8005f18 <_vfiprintf_r+0x44>
 8005f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f2a:	f7ff fea1 	bl	8005c70 <__retarget_lock_release_recursive>
 8005f2e:	e7f3      	b.n	8005f18 <_vfiprintf_r+0x44>
 8005f30:	2300      	movs	r3, #0
 8005f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f34:	2320      	movs	r3, #32
 8005f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f3e:	2330      	movs	r3, #48	@ 0x30
 8005f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060f0 <_vfiprintf_r+0x21c>
 8005f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f48:	f04f 0901 	mov.w	r9, #1
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	469a      	mov	sl, r3
 8005f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f54:	b10a      	cbz	r2, 8005f5a <_vfiprintf_r+0x86>
 8005f56:	2a25      	cmp	r2, #37	@ 0x25
 8005f58:	d1f9      	bne.n	8005f4e <_vfiprintf_r+0x7a>
 8005f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f5e:	d00b      	beq.n	8005f78 <_vfiprintf_r+0xa4>
 8005f60:	465b      	mov	r3, fp
 8005f62:	4622      	mov	r2, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff ffa1 	bl	8005eae <__sfputs_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	f000 80a7 	beq.w	80060c0 <_vfiprintf_r+0x1ec>
 8005f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f74:	445a      	add	r2, fp
 8005f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f78:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 809f 	beq.w	80060c0 <_vfiprintf_r+0x1ec>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f8c:	f10a 0a01 	add.w	sl, sl, #1
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	9307      	str	r3, [sp, #28]
 8005f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f9a:	4654      	mov	r4, sl
 8005f9c:	2205      	movs	r2, #5
 8005f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa2:	4853      	ldr	r0, [pc, #332]	@ (80060f0 <_vfiprintf_r+0x21c>)
 8005fa4:	f7fa f914 	bl	80001d0 <memchr>
 8005fa8:	9a04      	ldr	r2, [sp, #16]
 8005faa:	b9d8      	cbnz	r0, 8005fe4 <_vfiprintf_r+0x110>
 8005fac:	06d1      	lsls	r1, r2, #27
 8005fae:	bf44      	itt	mi
 8005fb0:	2320      	movmi	r3, #32
 8005fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb6:	0713      	lsls	r3, r2, #28
 8005fb8:	bf44      	itt	mi
 8005fba:	232b      	movmi	r3, #43	@ 0x2b
 8005fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc6:	d015      	beq.n	8005ff4 <_vfiprintf_r+0x120>
 8005fc8:	9a07      	ldr	r2, [sp, #28]
 8005fca:	4654      	mov	r4, sl
 8005fcc:	2000      	movs	r0, #0
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fd8:	3b30      	subs	r3, #48	@ 0x30
 8005fda:	2b09      	cmp	r3, #9
 8005fdc:	d94b      	bls.n	8006076 <_vfiprintf_r+0x1a2>
 8005fde:	b1b0      	cbz	r0, 800600e <_vfiprintf_r+0x13a>
 8005fe0:	9207      	str	r2, [sp, #28]
 8005fe2:	e014      	b.n	800600e <_vfiprintf_r+0x13a>
 8005fe4:	eba0 0308 	sub.w	r3, r0, r8
 8005fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8005fec:	4313      	orrs	r3, r2
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	46a2      	mov	sl, r4
 8005ff2:	e7d2      	b.n	8005f9a <_vfiprintf_r+0xc6>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	1d19      	adds	r1, r3, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	9103      	str	r1, [sp, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfbb      	ittet	lt
 8006000:	425b      	neglt	r3, r3
 8006002:	f042 0202 	orrlt.w	r2, r2, #2
 8006006:	9307      	strge	r3, [sp, #28]
 8006008:	9307      	strlt	r3, [sp, #28]
 800600a:	bfb8      	it	lt
 800600c:	9204      	strlt	r2, [sp, #16]
 800600e:	7823      	ldrb	r3, [r4, #0]
 8006010:	2b2e      	cmp	r3, #46	@ 0x2e
 8006012:	d10a      	bne.n	800602a <_vfiprintf_r+0x156>
 8006014:	7863      	ldrb	r3, [r4, #1]
 8006016:	2b2a      	cmp	r3, #42	@ 0x2a
 8006018:	d132      	bne.n	8006080 <_vfiprintf_r+0x1ac>
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	9203      	str	r2, [sp, #12]
 8006022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006026:	3402      	adds	r4, #2
 8006028:	9305      	str	r3, [sp, #20]
 800602a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006100 <_vfiprintf_r+0x22c>
 800602e:	7821      	ldrb	r1, [r4, #0]
 8006030:	2203      	movs	r2, #3
 8006032:	4650      	mov	r0, sl
 8006034:	f7fa f8cc 	bl	80001d0 <memchr>
 8006038:	b138      	cbz	r0, 800604a <_vfiprintf_r+0x176>
 800603a:	9b04      	ldr	r3, [sp, #16]
 800603c:	eba0 000a 	sub.w	r0, r0, sl
 8006040:	2240      	movs	r2, #64	@ 0x40
 8006042:	4082      	lsls	r2, r0
 8006044:	4313      	orrs	r3, r2
 8006046:	3401      	adds	r4, #1
 8006048:	9304      	str	r3, [sp, #16]
 800604a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604e:	4829      	ldr	r0, [pc, #164]	@ (80060f4 <_vfiprintf_r+0x220>)
 8006050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006054:	2206      	movs	r2, #6
 8006056:	f7fa f8bb 	bl	80001d0 <memchr>
 800605a:	2800      	cmp	r0, #0
 800605c:	d03f      	beq.n	80060de <_vfiprintf_r+0x20a>
 800605e:	4b26      	ldr	r3, [pc, #152]	@ (80060f8 <_vfiprintf_r+0x224>)
 8006060:	bb1b      	cbnz	r3, 80060aa <_vfiprintf_r+0x1d6>
 8006062:	9b03      	ldr	r3, [sp, #12]
 8006064:	3307      	adds	r3, #7
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	3308      	adds	r3, #8
 800606c:	9303      	str	r3, [sp, #12]
 800606e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006070:	443b      	add	r3, r7
 8006072:	9309      	str	r3, [sp, #36]	@ 0x24
 8006074:	e76a      	b.n	8005f4c <_vfiprintf_r+0x78>
 8006076:	fb0c 3202 	mla	r2, ip, r2, r3
 800607a:	460c      	mov	r4, r1
 800607c:	2001      	movs	r0, #1
 800607e:	e7a8      	b.n	8005fd2 <_vfiprintf_r+0xfe>
 8006080:	2300      	movs	r3, #0
 8006082:	3401      	adds	r4, #1
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	4619      	mov	r1, r3
 8006088:	f04f 0c0a 	mov.w	ip, #10
 800608c:	4620      	mov	r0, r4
 800608e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006092:	3a30      	subs	r2, #48	@ 0x30
 8006094:	2a09      	cmp	r2, #9
 8006096:	d903      	bls.n	80060a0 <_vfiprintf_r+0x1cc>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0c6      	beq.n	800602a <_vfiprintf_r+0x156>
 800609c:	9105      	str	r1, [sp, #20]
 800609e:	e7c4      	b.n	800602a <_vfiprintf_r+0x156>
 80060a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80060a4:	4604      	mov	r4, r0
 80060a6:	2301      	movs	r3, #1
 80060a8:	e7f0      	b.n	800608c <_vfiprintf_r+0x1b8>
 80060aa:	ab03      	add	r3, sp, #12
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	462a      	mov	r2, r5
 80060b0:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <_vfiprintf_r+0x228>)
 80060b2:	a904      	add	r1, sp, #16
 80060b4:	4630      	mov	r0, r6
 80060b6:	f3af 8000 	nop.w
 80060ba:	4607      	mov	r7, r0
 80060bc:	1c78      	adds	r0, r7, #1
 80060be:	d1d6      	bne.n	800606e <_vfiprintf_r+0x19a>
 80060c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060c2:	07d9      	lsls	r1, r3, #31
 80060c4:	d405      	bmi.n	80060d2 <_vfiprintf_r+0x1fe>
 80060c6:	89ab      	ldrh	r3, [r5, #12]
 80060c8:	059a      	lsls	r2, r3, #22
 80060ca:	d402      	bmi.n	80060d2 <_vfiprintf_r+0x1fe>
 80060cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ce:	f7ff fdcf 	bl	8005c70 <__retarget_lock_release_recursive>
 80060d2:	89ab      	ldrh	r3, [r5, #12]
 80060d4:	065b      	lsls	r3, r3, #25
 80060d6:	f53f af1f 	bmi.w	8005f18 <_vfiprintf_r+0x44>
 80060da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060dc:	e71e      	b.n	8005f1c <_vfiprintf_r+0x48>
 80060de:	ab03      	add	r3, sp, #12
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	462a      	mov	r2, r5
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <_vfiprintf_r+0x228>)
 80060e6:	a904      	add	r1, sp, #16
 80060e8:	4630      	mov	r0, r6
 80060ea:	f000 f879 	bl	80061e0 <_printf_i>
 80060ee:	e7e4      	b.n	80060ba <_vfiprintf_r+0x1e6>
 80060f0:	080068d0 	.word	0x080068d0
 80060f4:	080068da 	.word	0x080068da
 80060f8:	00000000 	.word	0x00000000
 80060fc:	08005eaf 	.word	0x08005eaf
 8006100:	080068d6 	.word	0x080068d6

08006104 <_printf_common>:
 8006104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	4616      	mov	r6, r2
 800610a:	4698      	mov	r8, r3
 800610c:	688a      	ldr	r2, [r1, #8]
 800610e:	690b      	ldr	r3, [r1, #16]
 8006110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006114:	4293      	cmp	r3, r2
 8006116:	bfb8      	it	lt
 8006118:	4613      	movlt	r3, r2
 800611a:	6033      	str	r3, [r6, #0]
 800611c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006120:	4607      	mov	r7, r0
 8006122:	460c      	mov	r4, r1
 8006124:	b10a      	cbz	r2, 800612a <_printf_common+0x26>
 8006126:	3301      	adds	r3, #1
 8006128:	6033      	str	r3, [r6, #0]
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	0699      	lsls	r1, r3, #26
 800612e:	bf42      	ittt	mi
 8006130:	6833      	ldrmi	r3, [r6, #0]
 8006132:	3302      	addmi	r3, #2
 8006134:	6033      	strmi	r3, [r6, #0]
 8006136:	6825      	ldr	r5, [r4, #0]
 8006138:	f015 0506 	ands.w	r5, r5, #6
 800613c:	d106      	bne.n	800614c <_printf_common+0x48>
 800613e:	f104 0a19 	add.w	sl, r4, #25
 8006142:	68e3      	ldr	r3, [r4, #12]
 8006144:	6832      	ldr	r2, [r6, #0]
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	42ab      	cmp	r3, r5
 800614a:	dc26      	bgt.n	800619a <_printf_common+0x96>
 800614c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	3b00      	subs	r3, #0
 8006154:	bf18      	it	ne
 8006156:	2301      	movne	r3, #1
 8006158:	0692      	lsls	r2, r2, #26
 800615a:	d42b      	bmi.n	80061b4 <_printf_common+0xb0>
 800615c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006160:	4641      	mov	r1, r8
 8006162:	4638      	mov	r0, r7
 8006164:	47c8      	blx	r9
 8006166:	3001      	adds	r0, #1
 8006168:	d01e      	beq.n	80061a8 <_printf_common+0xa4>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	6922      	ldr	r2, [r4, #16]
 800616e:	f003 0306 	and.w	r3, r3, #6
 8006172:	2b04      	cmp	r3, #4
 8006174:	bf02      	ittt	eq
 8006176:	68e5      	ldreq	r5, [r4, #12]
 8006178:	6833      	ldreq	r3, [r6, #0]
 800617a:	1aed      	subeq	r5, r5, r3
 800617c:	68a3      	ldr	r3, [r4, #8]
 800617e:	bf0c      	ite	eq
 8006180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006184:	2500      	movne	r5, #0
 8006186:	4293      	cmp	r3, r2
 8006188:	bfc4      	itt	gt
 800618a:	1a9b      	subgt	r3, r3, r2
 800618c:	18ed      	addgt	r5, r5, r3
 800618e:	2600      	movs	r6, #0
 8006190:	341a      	adds	r4, #26
 8006192:	42b5      	cmp	r5, r6
 8006194:	d11a      	bne.n	80061cc <_printf_common+0xc8>
 8006196:	2000      	movs	r0, #0
 8006198:	e008      	b.n	80061ac <_printf_common+0xa8>
 800619a:	2301      	movs	r3, #1
 800619c:	4652      	mov	r2, sl
 800619e:	4641      	mov	r1, r8
 80061a0:	4638      	mov	r0, r7
 80061a2:	47c8      	blx	r9
 80061a4:	3001      	adds	r0, #1
 80061a6:	d103      	bne.n	80061b0 <_printf_common+0xac>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b0:	3501      	adds	r5, #1
 80061b2:	e7c6      	b.n	8006142 <_printf_common+0x3e>
 80061b4:	18e1      	adds	r1, r4, r3
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	2030      	movs	r0, #48	@ 0x30
 80061ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061be:	4422      	add	r2, r4
 80061c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061c8:	3302      	adds	r3, #2
 80061ca:	e7c7      	b.n	800615c <_printf_common+0x58>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4622      	mov	r2, r4
 80061d0:	4641      	mov	r1, r8
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c8      	blx	r9
 80061d6:	3001      	adds	r0, #1
 80061d8:	d0e6      	beq.n	80061a8 <_printf_common+0xa4>
 80061da:	3601      	adds	r6, #1
 80061dc:	e7d9      	b.n	8006192 <_printf_common+0x8e>
	...

080061e0 <_printf_i>:
 80061e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	7e0f      	ldrb	r7, [r1, #24]
 80061e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061e8:	2f78      	cmp	r7, #120	@ 0x78
 80061ea:	4691      	mov	r9, r2
 80061ec:	4680      	mov	r8, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	469a      	mov	sl, r3
 80061f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061f6:	d807      	bhi.n	8006208 <_printf_i+0x28>
 80061f8:	2f62      	cmp	r7, #98	@ 0x62
 80061fa:	d80a      	bhi.n	8006212 <_printf_i+0x32>
 80061fc:	2f00      	cmp	r7, #0
 80061fe:	f000 80d2 	beq.w	80063a6 <_printf_i+0x1c6>
 8006202:	2f58      	cmp	r7, #88	@ 0x58
 8006204:	f000 80b9 	beq.w	800637a <_printf_i+0x19a>
 8006208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800620c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006210:	e03a      	b.n	8006288 <_printf_i+0xa8>
 8006212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006216:	2b15      	cmp	r3, #21
 8006218:	d8f6      	bhi.n	8006208 <_printf_i+0x28>
 800621a:	a101      	add	r1, pc, #4	@ (adr r1, 8006220 <_printf_i+0x40>)
 800621c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006220:	08006279 	.word	0x08006279
 8006224:	0800628d 	.word	0x0800628d
 8006228:	08006209 	.word	0x08006209
 800622c:	08006209 	.word	0x08006209
 8006230:	08006209 	.word	0x08006209
 8006234:	08006209 	.word	0x08006209
 8006238:	0800628d 	.word	0x0800628d
 800623c:	08006209 	.word	0x08006209
 8006240:	08006209 	.word	0x08006209
 8006244:	08006209 	.word	0x08006209
 8006248:	08006209 	.word	0x08006209
 800624c:	0800638d 	.word	0x0800638d
 8006250:	080062b7 	.word	0x080062b7
 8006254:	08006347 	.word	0x08006347
 8006258:	08006209 	.word	0x08006209
 800625c:	08006209 	.word	0x08006209
 8006260:	080063af 	.word	0x080063af
 8006264:	08006209 	.word	0x08006209
 8006268:	080062b7 	.word	0x080062b7
 800626c:	08006209 	.word	0x08006209
 8006270:	08006209 	.word	0x08006209
 8006274:	0800634f 	.word	0x0800634f
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6032      	str	r2, [r6, #0]
 8006280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006288:	2301      	movs	r3, #1
 800628a:	e09d      	b.n	80063c8 <_printf_i+0x1e8>
 800628c:	6833      	ldr	r3, [r6, #0]
 800628e:	6820      	ldr	r0, [r4, #0]
 8006290:	1d19      	adds	r1, r3, #4
 8006292:	6031      	str	r1, [r6, #0]
 8006294:	0606      	lsls	r6, r0, #24
 8006296:	d501      	bpl.n	800629c <_printf_i+0xbc>
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	e003      	b.n	80062a4 <_printf_i+0xc4>
 800629c:	0645      	lsls	r5, r0, #25
 800629e:	d5fb      	bpl.n	8006298 <_printf_i+0xb8>
 80062a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	da03      	bge.n	80062b0 <_printf_i+0xd0>
 80062a8:	232d      	movs	r3, #45	@ 0x2d
 80062aa:	426d      	negs	r5, r5
 80062ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b0:	4859      	ldr	r0, [pc, #356]	@ (8006418 <_printf_i+0x238>)
 80062b2:	230a      	movs	r3, #10
 80062b4:	e011      	b.n	80062da <_printf_i+0xfa>
 80062b6:	6821      	ldr	r1, [r4, #0]
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	0608      	lsls	r0, r1, #24
 80062bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80062c0:	d402      	bmi.n	80062c8 <_printf_i+0xe8>
 80062c2:	0649      	lsls	r1, r1, #25
 80062c4:	bf48      	it	mi
 80062c6:	b2ad      	uxthmi	r5, r5
 80062c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80062ca:	4853      	ldr	r0, [pc, #332]	@ (8006418 <_printf_i+0x238>)
 80062cc:	6033      	str	r3, [r6, #0]
 80062ce:	bf14      	ite	ne
 80062d0:	230a      	movne	r3, #10
 80062d2:	2308      	moveq	r3, #8
 80062d4:	2100      	movs	r1, #0
 80062d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062da:	6866      	ldr	r6, [r4, #4]
 80062dc:	60a6      	str	r6, [r4, #8]
 80062de:	2e00      	cmp	r6, #0
 80062e0:	bfa2      	ittt	ge
 80062e2:	6821      	ldrge	r1, [r4, #0]
 80062e4:	f021 0104 	bicge.w	r1, r1, #4
 80062e8:	6021      	strge	r1, [r4, #0]
 80062ea:	b90d      	cbnz	r5, 80062f0 <_printf_i+0x110>
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	d04b      	beq.n	8006388 <_printf_i+0x1a8>
 80062f0:	4616      	mov	r6, r2
 80062f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80062f6:	fb03 5711 	mls	r7, r3, r1, r5
 80062fa:	5dc7      	ldrb	r7, [r0, r7]
 80062fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006300:	462f      	mov	r7, r5
 8006302:	42bb      	cmp	r3, r7
 8006304:	460d      	mov	r5, r1
 8006306:	d9f4      	bls.n	80062f2 <_printf_i+0x112>
 8006308:	2b08      	cmp	r3, #8
 800630a:	d10b      	bne.n	8006324 <_printf_i+0x144>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	07df      	lsls	r7, r3, #31
 8006310:	d508      	bpl.n	8006324 <_printf_i+0x144>
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	6861      	ldr	r1, [r4, #4]
 8006316:	4299      	cmp	r1, r3
 8006318:	bfde      	ittt	le
 800631a:	2330      	movle	r3, #48	@ 0x30
 800631c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006324:	1b92      	subs	r2, r2, r6
 8006326:	6122      	str	r2, [r4, #16]
 8006328:	f8cd a000 	str.w	sl, [sp]
 800632c:	464b      	mov	r3, r9
 800632e:	aa03      	add	r2, sp, #12
 8006330:	4621      	mov	r1, r4
 8006332:	4640      	mov	r0, r8
 8006334:	f7ff fee6 	bl	8006104 <_printf_common>
 8006338:	3001      	adds	r0, #1
 800633a:	d14a      	bne.n	80063d2 <_printf_i+0x1f2>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	b004      	add	sp, #16
 8006342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	f043 0320 	orr.w	r3, r3, #32
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	4833      	ldr	r0, [pc, #204]	@ (800641c <_printf_i+0x23c>)
 8006350:	2778      	movs	r7, #120	@ 0x78
 8006352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	6831      	ldr	r1, [r6, #0]
 800635a:	061f      	lsls	r7, r3, #24
 800635c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006360:	d402      	bmi.n	8006368 <_printf_i+0x188>
 8006362:	065f      	lsls	r7, r3, #25
 8006364:	bf48      	it	mi
 8006366:	b2ad      	uxthmi	r5, r5
 8006368:	6031      	str	r1, [r6, #0]
 800636a:	07d9      	lsls	r1, r3, #31
 800636c:	bf44      	itt	mi
 800636e:	f043 0320 	orrmi.w	r3, r3, #32
 8006372:	6023      	strmi	r3, [r4, #0]
 8006374:	b11d      	cbz	r5, 800637e <_printf_i+0x19e>
 8006376:	2310      	movs	r3, #16
 8006378:	e7ac      	b.n	80062d4 <_printf_i+0xf4>
 800637a:	4827      	ldr	r0, [pc, #156]	@ (8006418 <_printf_i+0x238>)
 800637c:	e7e9      	b.n	8006352 <_printf_i+0x172>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f023 0320 	bic.w	r3, r3, #32
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	e7f6      	b.n	8006376 <_printf_i+0x196>
 8006388:	4616      	mov	r6, r2
 800638a:	e7bd      	b.n	8006308 <_printf_i+0x128>
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	6825      	ldr	r5, [r4, #0]
 8006390:	6961      	ldr	r1, [r4, #20]
 8006392:	1d18      	adds	r0, r3, #4
 8006394:	6030      	str	r0, [r6, #0]
 8006396:	062e      	lsls	r6, r5, #24
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0x1c0>
 800639c:	6019      	str	r1, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0x1c6>
 80063a0:	0668      	lsls	r0, r5, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0x1bc>
 80063a4:	8019      	strh	r1, [r3, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	4616      	mov	r6, r2
 80063ac:	e7bc      	b.n	8006328 <_printf_i+0x148>
 80063ae:	6833      	ldr	r3, [r6, #0]
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	6032      	str	r2, [r6, #0]
 80063b4:	681e      	ldr	r6, [r3, #0]
 80063b6:	6862      	ldr	r2, [r4, #4]
 80063b8:	2100      	movs	r1, #0
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7f9 ff08 	bl	80001d0 <memchr>
 80063c0:	b108      	cbz	r0, 80063c6 <_printf_i+0x1e6>
 80063c2:	1b80      	subs	r0, r0, r6
 80063c4:	6060      	str	r0, [r4, #4]
 80063c6:	6863      	ldr	r3, [r4, #4]
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	2300      	movs	r3, #0
 80063cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d0:	e7aa      	b.n	8006328 <_printf_i+0x148>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	4632      	mov	r2, r6
 80063d6:	4649      	mov	r1, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	47d0      	blx	sl
 80063dc:	3001      	adds	r0, #1
 80063de:	d0ad      	beq.n	800633c <_printf_i+0x15c>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	079b      	lsls	r3, r3, #30
 80063e4:	d413      	bmi.n	800640e <_printf_i+0x22e>
 80063e6:	68e0      	ldr	r0, [r4, #12]
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	4298      	cmp	r0, r3
 80063ec:	bfb8      	it	lt
 80063ee:	4618      	movlt	r0, r3
 80063f0:	e7a6      	b.n	8006340 <_printf_i+0x160>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4632      	mov	r2, r6
 80063f6:	4649      	mov	r1, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	47d0      	blx	sl
 80063fc:	3001      	adds	r0, #1
 80063fe:	d09d      	beq.n	800633c <_printf_i+0x15c>
 8006400:	3501      	adds	r5, #1
 8006402:	68e3      	ldr	r3, [r4, #12]
 8006404:	9903      	ldr	r1, [sp, #12]
 8006406:	1a5b      	subs	r3, r3, r1
 8006408:	42ab      	cmp	r3, r5
 800640a:	dcf2      	bgt.n	80063f2 <_printf_i+0x212>
 800640c:	e7eb      	b.n	80063e6 <_printf_i+0x206>
 800640e:	2500      	movs	r5, #0
 8006410:	f104 0619 	add.w	r6, r4, #25
 8006414:	e7f5      	b.n	8006402 <_printf_i+0x222>
 8006416:	bf00      	nop
 8006418:	080068e1 	.word	0x080068e1
 800641c:	080068f2 	.word	0x080068f2

08006420 <__sflush_r>:
 8006420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006428:	0716      	lsls	r6, r2, #28
 800642a:	4605      	mov	r5, r0
 800642c:	460c      	mov	r4, r1
 800642e:	d454      	bmi.n	80064da <__sflush_r+0xba>
 8006430:	684b      	ldr	r3, [r1, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	dc02      	bgt.n	800643c <__sflush_r+0x1c>
 8006436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	dd48      	ble.n	80064ce <__sflush_r+0xae>
 800643c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800643e:	2e00      	cmp	r6, #0
 8006440:	d045      	beq.n	80064ce <__sflush_r+0xae>
 8006442:	2300      	movs	r3, #0
 8006444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006448:	682f      	ldr	r7, [r5, #0]
 800644a:	6a21      	ldr	r1, [r4, #32]
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	d030      	beq.n	80064b2 <__sflush_r+0x92>
 8006450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	0759      	lsls	r1, r3, #29
 8006456:	d505      	bpl.n	8006464 <__sflush_r+0x44>
 8006458:	6863      	ldr	r3, [r4, #4]
 800645a:	1ad2      	subs	r2, r2, r3
 800645c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800645e:	b10b      	cbz	r3, 8006464 <__sflush_r+0x44>
 8006460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	2300      	movs	r3, #0
 8006466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006468:	6a21      	ldr	r1, [r4, #32]
 800646a:	4628      	mov	r0, r5
 800646c:	47b0      	blx	r6
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	d106      	bne.n	8006482 <__sflush_r+0x62>
 8006474:	6829      	ldr	r1, [r5, #0]
 8006476:	291d      	cmp	r1, #29
 8006478:	d82b      	bhi.n	80064d2 <__sflush_r+0xb2>
 800647a:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <__sflush_r+0x104>)
 800647c:	410a      	asrs	r2, r1
 800647e:	07d6      	lsls	r6, r2, #31
 8006480:	d427      	bmi.n	80064d2 <__sflush_r+0xb2>
 8006482:	2200      	movs	r2, #0
 8006484:	6062      	str	r2, [r4, #4]
 8006486:	04d9      	lsls	r1, r3, #19
 8006488:	6922      	ldr	r2, [r4, #16]
 800648a:	6022      	str	r2, [r4, #0]
 800648c:	d504      	bpl.n	8006498 <__sflush_r+0x78>
 800648e:	1c42      	adds	r2, r0, #1
 8006490:	d101      	bne.n	8006496 <__sflush_r+0x76>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	b903      	cbnz	r3, 8006498 <__sflush_r+0x78>
 8006496:	6560      	str	r0, [r4, #84]	@ 0x54
 8006498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800649a:	602f      	str	r7, [r5, #0]
 800649c:	b1b9      	cbz	r1, 80064ce <__sflush_r+0xae>
 800649e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064a2:	4299      	cmp	r1, r3
 80064a4:	d002      	beq.n	80064ac <__sflush_r+0x8c>
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff fbf2 	bl	8005c90 <_free_r>
 80064ac:	2300      	movs	r3, #0
 80064ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80064b0:	e00d      	b.n	80064ce <__sflush_r+0xae>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b0      	blx	r6
 80064b8:	4602      	mov	r2, r0
 80064ba:	1c50      	adds	r0, r2, #1
 80064bc:	d1c9      	bne.n	8006452 <__sflush_r+0x32>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0c6      	beq.n	8006452 <__sflush_r+0x32>
 80064c4:	2b1d      	cmp	r3, #29
 80064c6:	d001      	beq.n	80064cc <__sflush_r+0xac>
 80064c8:	2b16      	cmp	r3, #22
 80064ca:	d11e      	bne.n	800650a <__sflush_r+0xea>
 80064cc:	602f      	str	r7, [r5, #0]
 80064ce:	2000      	movs	r0, #0
 80064d0:	e022      	b.n	8006518 <__sflush_r+0xf8>
 80064d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d6:	b21b      	sxth	r3, r3
 80064d8:	e01b      	b.n	8006512 <__sflush_r+0xf2>
 80064da:	690f      	ldr	r7, [r1, #16]
 80064dc:	2f00      	cmp	r7, #0
 80064de:	d0f6      	beq.n	80064ce <__sflush_r+0xae>
 80064e0:	0793      	lsls	r3, r2, #30
 80064e2:	680e      	ldr	r6, [r1, #0]
 80064e4:	bf08      	it	eq
 80064e6:	694b      	ldreq	r3, [r1, #20]
 80064e8:	600f      	str	r7, [r1, #0]
 80064ea:	bf18      	it	ne
 80064ec:	2300      	movne	r3, #0
 80064ee:	eba6 0807 	sub.w	r8, r6, r7
 80064f2:	608b      	str	r3, [r1, #8]
 80064f4:	f1b8 0f00 	cmp.w	r8, #0
 80064f8:	dde9      	ble.n	80064ce <__sflush_r+0xae>
 80064fa:	6a21      	ldr	r1, [r4, #32]
 80064fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064fe:	4643      	mov	r3, r8
 8006500:	463a      	mov	r2, r7
 8006502:	4628      	mov	r0, r5
 8006504:	47b0      	blx	r6
 8006506:	2800      	cmp	r0, #0
 8006508:	dc08      	bgt.n	800651c <__sflush_r+0xfc>
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006512:	81a3      	strh	r3, [r4, #12]
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800651c:	4407      	add	r7, r0
 800651e:	eba8 0800 	sub.w	r8, r8, r0
 8006522:	e7e7      	b.n	80064f4 <__sflush_r+0xd4>
 8006524:	dfbffffe 	.word	0xdfbffffe

08006528 <_fflush_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	690b      	ldr	r3, [r1, #16]
 800652c:	4605      	mov	r5, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b913      	cbnz	r3, 8006538 <_fflush_r+0x10>
 8006532:	2500      	movs	r5, #0
 8006534:	4628      	mov	r0, r5
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	b118      	cbz	r0, 8006542 <_fflush_r+0x1a>
 800653a:	6a03      	ldr	r3, [r0, #32]
 800653c:	b90b      	cbnz	r3, 8006542 <_fflush_r+0x1a>
 800653e:	f7ff f977 	bl	8005830 <__sinit>
 8006542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f3      	beq.n	8006532 <_fflush_r+0xa>
 800654a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800654c:	07d0      	lsls	r0, r2, #31
 800654e:	d404      	bmi.n	800655a <_fflush_r+0x32>
 8006550:	0599      	lsls	r1, r3, #22
 8006552:	d402      	bmi.n	800655a <_fflush_r+0x32>
 8006554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006556:	f7ff fb8a 	bl	8005c6e <__retarget_lock_acquire_recursive>
 800655a:	4628      	mov	r0, r5
 800655c:	4621      	mov	r1, r4
 800655e:	f7ff ff5f 	bl	8006420 <__sflush_r>
 8006562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006564:	07da      	lsls	r2, r3, #31
 8006566:	4605      	mov	r5, r0
 8006568:	d4e4      	bmi.n	8006534 <_fflush_r+0xc>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	059b      	lsls	r3, r3, #22
 800656e:	d4e1      	bmi.n	8006534 <_fflush_r+0xc>
 8006570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006572:	f7ff fb7d 	bl	8005c70 <__retarget_lock_release_recursive>
 8006576:	e7dd      	b.n	8006534 <_fflush_r+0xc>

08006578 <__swhatbuf_r>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	460c      	mov	r4, r1
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	2900      	cmp	r1, #0
 8006582:	b096      	sub	sp, #88	@ 0x58
 8006584:	4615      	mov	r5, r2
 8006586:	461e      	mov	r6, r3
 8006588:	da0d      	bge.n	80065a6 <__swhatbuf_r+0x2e>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006590:	f04f 0100 	mov.w	r1, #0
 8006594:	bf14      	ite	ne
 8006596:	2340      	movne	r3, #64	@ 0x40
 8006598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800659c:	2000      	movs	r0, #0
 800659e:	6031      	str	r1, [r6, #0]
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	b016      	add	sp, #88	@ 0x58
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	466a      	mov	r2, sp
 80065a8:	f000 f87c 	bl	80066a4 <_fstat_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	dbec      	blt.n	800658a <__swhatbuf_r+0x12>
 80065b0:	9901      	ldr	r1, [sp, #4]
 80065b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065ba:	4259      	negs	r1, r3
 80065bc:	4159      	adcs	r1, r3
 80065be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065c2:	e7eb      	b.n	800659c <__swhatbuf_r+0x24>

080065c4 <__smakebuf_r>:
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c8:	079d      	lsls	r5, r3, #30
 80065ca:	4606      	mov	r6, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	d507      	bpl.n	80065e0 <__smakebuf_r+0x1c>
 80065d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2301      	movs	r3, #1
 80065da:	6163      	str	r3, [r4, #20]
 80065dc:	b003      	add	sp, #12
 80065de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e0:	ab01      	add	r3, sp, #4
 80065e2:	466a      	mov	r2, sp
 80065e4:	f7ff ffc8 	bl	8006578 <__swhatbuf_r>
 80065e8:	9f00      	ldr	r7, [sp, #0]
 80065ea:	4605      	mov	r5, r0
 80065ec:	4639      	mov	r1, r7
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff fbba 	bl	8005d68 <_malloc_r>
 80065f4:	b948      	cbnz	r0, 800660a <__smakebuf_r+0x46>
 80065f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fa:	059a      	lsls	r2, r3, #22
 80065fc:	d4ee      	bmi.n	80065dc <__smakebuf_r+0x18>
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	f043 0302 	orr.w	r3, r3, #2
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	e7e2      	b.n	80065d0 <__smakebuf_r+0xc>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	6020      	str	r0, [r4, #0]
 800660e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800661a:	b15b      	cbz	r3, 8006634 <__smakebuf_r+0x70>
 800661c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006620:	4630      	mov	r0, r6
 8006622:	f000 f851 	bl	80066c8 <_isatty_r>
 8006626:	b128      	cbz	r0, 8006634 <__smakebuf_r+0x70>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	431d      	orrs	r5, r3
 8006638:	81a5      	strh	r5, [r4, #12]
 800663a:	e7cf      	b.n	80065dc <__smakebuf_r+0x18>

0800663c <_putc_r>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	460d      	mov	r5, r1
 8006640:	4614      	mov	r4, r2
 8006642:	4606      	mov	r6, r0
 8006644:	b118      	cbz	r0, 800664e <_putc_r+0x12>
 8006646:	6a03      	ldr	r3, [r0, #32]
 8006648:	b90b      	cbnz	r3, 800664e <_putc_r+0x12>
 800664a:	f7ff f8f1 	bl	8005830 <__sinit>
 800664e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006650:	07d8      	lsls	r0, r3, #31
 8006652:	d405      	bmi.n	8006660 <_putc_r+0x24>
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	0599      	lsls	r1, r3, #22
 8006658:	d402      	bmi.n	8006660 <_putc_r+0x24>
 800665a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800665c:	f7ff fb07 	bl	8005c6e <__retarget_lock_acquire_recursive>
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	3b01      	subs	r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	da05      	bge.n	8006676 <_putc_r+0x3a>
 800666a:	69a2      	ldr	r2, [r4, #24]
 800666c:	4293      	cmp	r3, r2
 800666e:	db12      	blt.n	8006696 <_putc_r+0x5a>
 8006670:	b2eb      	uxtb	r3, r5
 8006672:	2b0a      	cmp	r3, #10
 8006674:	d00f      	beq.n	8006696 <_putc_r+0x5a>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	701d      	strb	r5, [r3, #0]
 800667e:	b2ed      	uxtb	r5, r5
 8006680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006682:	07da      	lsls	r2, r3, #31
 8006684:	d405      	bmi.n	8006692 <_putc_r+0x56>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	059b      	lsls	r3, r3, #22
 800668a:	d402      	bmi.n	8006692 <_putc_r+0x56>
 800668c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800668e:	f7ff faef 	bl	8005c70 <__retarget_lock_release_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	bd70      	pop	{r4, r5, r6, pc}
 8006696:	4629      	mov	r1, r5
 8006698:	4622      	mov	r2, r4
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff f9b9 	bl	8005a12 <__swbuf_r>
 80066a0:	4605      	mov	r5, r0
 80066a2:	e7ed      	b.n	8006680 <_putc_r+0x44>

080066a4 <_fstat_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d07      	ldr	r5, [pc, #28]	@ (80066c4 <_fstat_r+0x20>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	f7fc f9a5 	bl	8002a00 <_fstat>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d102      	bne.n	80066c0 <_fstat_r+0x1c>
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	b103      	cbz	r3, 80066c0 <_fstat_r+0x1c>
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop
 80066c4:	2000067c 	.word	0x2000067c

080066c8 <_isatty_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d06      	ldr	r5, [pc, #24]	@ (80066e4 <_isatty_r+0x1c>)
 80066cc:	2300      	movs	r3, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	f7fc f9a4 	bl	8002a20 <_isatty>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_isatty_r+0x1a>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_isatty_r+0x1a>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	2000067c 	.word	0x2000067c

080066e8 <_sbrk_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d06      	ldr	r5, [pc, #24]	@ (8006704 <_sbrk_r+0x1c>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fc f9ac 	bl	8002a50 <_sbrk>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_sbrk_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_sbrk_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	2000067c 	.word	0x2000067c

08006708 <_init>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr

08006714 <_fini>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr
